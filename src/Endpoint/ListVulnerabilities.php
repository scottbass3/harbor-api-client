<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Endpoint;

class ListVulnerabilities extends \Flownative\Harbor\Api\Runtime\Client\BaseEndpoint implements \Flownative\Harbor\Api\Runtime\Client\Endpoint
{
    use \Flownative\Harbor\Api\Runtime\Client\EndpointTrait;

    /**
     * Get the vulnerability list. use q to pass the query condition,
     * supported conditions:
     * cve_id(exact match)
     * cvss_score_v3(range condition)
     * severity(exact match)
     * repository_name(exact match)
     * project_id(exact match)
     * package(exact match)
     * tag(exact match)
     * digest(exact match).
     *
     * @param array $queryParameters {
     *
     * @var string $q Query string to query resources. Supported query patterns are "exact match(k=v)", "fuzzy match(k=~v)", "range(k=[min~max])", "list with union releationship(k={v1 v2 v3})" and "list with intersetion relationship(k=(v1 v2 v3))". The value of range and list can be string(enclosed by " or '), integer or time(in format "2020-04-09 02:36:00"). All of these query patterns should be put in the query string "q=xxx" and splitted by ",". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @var int    $page The page number
     * @var int    $page_size The size of per page
     * @var bool   $tune_count enable to ignore X-Total-Count when the total count > 1000, if the total count is less than 1000, the real total count is returned, else -1
     * @var bool   $with_tag Specify whether the tag information is included inside vulnerability information
     *             }
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     */
    public function __construct(array $queryParameters = [], array $headerParameters = [])
    {
        $this->queryParameters = $queryParameters;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return '/security/vul';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['q', 'page', 'page_size', 'tune_count', 'with_tag']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults(['page' => 1, 'page_size' => 10, 'tune_count' => false, 'with_tag' => false]);
        $optionsResolver->addAllowedTypes('q', ['string']);
        $optionsResolver->addAllowedTypes('page', ['int']);
        $optionsResolver->addAllowedTypes('page_size', ['int']);
        $optionsResolver->addAllowedTypes('tune_count', ['bool']);
        $optionsResolver->addAllowedTypes('with_tag', ['bool']);

        return $optionsResolver;
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['X-Request-Id']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('X-Request-Id', ['string']);

        return $optionsResolver;
    }

    /**
     * @return \Flownative\Harbor\Api\Model\VulnerabilityItem[]
     *
     * @throws \Flownative\Harbor\Api\Exception\ListVulnerabilitiesBadRequestException
     * @throws \Flownative\Harbor\Api\Exception\ListVulnerabilitiesUnauthorizedException
     * @throws \Flownative\Harbor\Api\Exception\ListVulnerabilitiesInternalServerErrorException
     * @throws \Flownative\Harbor\Api\Exception\UnexpectedStatusCodeException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
            return $serializer->deserialize($body, 'Flownative\Harbor\Api\Model\VulnerabilityItem[]', 'json');
        }
        if (400 === $status) {
            throw new \Flownative\Harbor\Api\Exception\ListVulnerabilitiesBadRequestException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (401 === $status) {
            throw new \Flownative\Harbor\Api\Exception\ListVulnerabilitiesUnauthorizedException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (500 === $status) {
            throw new \Flownative\Harbor\Api\Exception\ListVulnerabilitiesInternalServerErrorException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        throw new \Flownative\Harbor\Api\Exception\UnexpectedStatusCodeException($status, $body);
    }

    public function getAuthenticationScopes(): array
    {
        return ['basic'];
    }
}
