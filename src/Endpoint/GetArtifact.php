<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Endpoint;

class GetArtifact extends \Scottbass3\Harbor\Api\Runtime\Client\BaseEndpoint implements \Scottbass3\Harbor\Api\Runtime\Client\Endpoint
{
    use \Scottbass3\Harbor\Api\Runtime\Client\EndpointTrait;
    protected $project_name;
    protected $repository_name;
    protected $reference;

    /**
     * Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.
     *
     * @param string $projectName     The name of the project
     * @param string $repositoryName  The name of the repository. If it contains slash, encode it twice over with URL encoding. e.g. a/b -> a%2Fb -> a%252Fb
     * @param string $reference       The reference of the artifact, can be digest or tag
     * @param array  $queryParameters {
     *
     * @var int  $page The page number
     * @var int  $page_size The size of per page
     * @var bool $with_tag Specify whether the tags are inclued inside the returning artifacts
     * @var bool $with_label Specify whether the labels are inclued inside the returning artifacts
     * @var bool $with_scan_overview Specify whether the scan overview is inclued inside the returning artifacts
     * @var bool $with_accessory specify whether the accessories are included of the returning artifacts
     * @var bool $with_signature Specify whether the signature is inclued inside the returning artifacts
     * @var bool $with_immutable_status Specify whether the immutable status is inclued inside the tags of the returning artifacts.
     *           }
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var string $X-Accept-Vulnerabilities A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.
     *             Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'
     *             }
     */
    public function __construct(string $projectName, string $repositoryName, string $reference, array $queryParameters = [], array $headerParameters = [])
    {
        $this->project_name = $projectName;
        $this->repository_name = $repositoryName;
        $this->reference = $reference;
        $this->queryParameters = $queryParameters;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{project_name}', '{repository_name}', '{reference}'], [$this->project_name, $this->repository_name, $this->reference], '/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['page', 'page_size', 'with_tag', 'with_label', 'with_scan_overview', 'with_accessory', 'with_signature', 'with_immutable_status']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults(['page' => 1, 'page_size' => 10, 'with_tag' => true, 'with_label' => false, 'with_scan_overview' => false, 'with_accessory' => false, 'with_signature' => false, 'with_immutable_status' => false]);
        $optionsResolver->addAllowedTypes('page', ['int']);
        $optionsResolver->addAllowedTypes('page_size', ['int']);
        $optionsResolver->addAllowedTypes('with_tag', ['bool']);
        $optionsResolver->addAllowedTypes('with_label', ['bool']);
        $optionsResolver->addAllowedTypes('with_scan_overview', ['bool']);
        $optionsResolver->addAllowedTypes('with_accessory', ['bool']);
        $optionsResolver->addAllowedTypes('with_signature', ['bool']);
        $optionsResolver->addAllowedTypes('with_immutable_status', ['bool']);

        return $optionsResolver;
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['X-Request-Id', 'X-Accept-Vulnerabilities']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults(['X-Accept-Vulnerabilities' => 'application/vnd.security.vulnerability.report; version=1.1, application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0']);
        $optionsResolver->addAllowedTypes('X-Request-Id', ['string']);
        $optionsResolver->addAllowedTypes('X-Accept-Vulnerabilities', ['string']);

        return $optionsResolver;
    }

    /**
     * @return \Scottbass3\Harbor\Api\Model\Artifact
     *
     * @throws \Scottbass3\Harbor\Api\Exception\GetArtifactBadRequestException
     * @throws \Scottbass3\Harbor\Api\Exception\GetArtifactUnauthorizedException
     * @throws \Scottbass3\Harbor\Api\Exception\GetArtifactForbiddenException
     * @throws \Scottbass3\Harbor\Api\Exception\GetArtifactNotFoundException
     * @throws \Scottbass3\Harbor\Api\Exception\GetArtifactInternalServerErrorException
     * @throws \Scottbass3\Harbor\Api\Exception\UnexpectedStatusCodeException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
            return $serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Artifact', 'json');
        }
        if (400 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\GetArtifactBadRequestException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (401 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\GetArtifactUnauthorizedException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (403 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\GetArtifactForbiddenException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (404 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\GetArtifactNotFoundException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (500 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\GetArtifactInternalServerErrorException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        throw new \Scottbass3\Harbor\Api\Exception\UnexpectedStatusCodeException($status, $body);
    }

    public function getAuthenticationScopes(): array
    {
        return ['basic'];
    }
}
