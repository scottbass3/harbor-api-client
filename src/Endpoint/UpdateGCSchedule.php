<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Endpoint;

class UpdateGCSchedule extends \Scottbass3\Harbor\Api\Runtime\Client\BaseEndpoint implements \Scottbass3\Harbor\Api\Runtime\Client\Endpoint
{
    use \Scottbass3\Harbor\Api\Runtime\Client\EndpointTrait;

    /**
     * This endpoint is for update gc schedule.
     *
     * @param \Scottbass3\Harbor\Api\Model\Schedule $schedule         updates of gc's schedule
     * @param array                                 $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     */
    public function __construct(\Scottbass3\Harbor\Api\Model\Schedule $schedule, array $headerParameters = [])
    {
        $this->body = $schedule;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'PUT';
    }

    public function getUri(): string
    {
        return '/system/gc/schedule';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return $this->getSerializedBody($serializer);
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['X-Request-Id']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('X-Request-Id', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Scottbass3\Harbor\Api\Exception\UpdateGCScheduleBadRequestException
     * @throws \Scottbass3\Harbor\Api\Exception\UpdateGCScheduleUnauthorizedException
     * @throws \Scottbass3\Harbor\Api\Exception\UpdateGCScheduleForbiddenException
     * @throws \Scottbass3\Harbor\Api\Exception\UpdateGCScheduleInternalServerErrorException
     * @throws \Scottbass3\Harbor\Api\Exception\UnexpectedStatusCodeException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
            return null;
        }
        if (400 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\UpdateGCScheduleBadRequestException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (401 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\UpdateGCScheduleUnauthorizedException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (403 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\UpdateGCScheduleForbiddenException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (500 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\UpdateGCScheduleInternalServerErrorException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        throw new \Scottbass3\Harbor\Api\Exception\UnexpectedStatusCodeException($status, $body);
    }

    public function getAuthenticationScopes(): array
    {
        return ['basic'];
    }
}
