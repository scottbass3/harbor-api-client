<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Endpoint;

class UpdateUserPassword extends \Scottbass3\Harbor\Api\Runtime\Client\BaseEndpoint implements \Scottbass3\Harbor\Api\Runtime\Client\Endpoint
{
    use \Scottbass3\Harbor\Api\Runtime\Client\EndpointTrait;
    protected $user_id;

    /**
     * This endpoint is for user to update password. Users with the admin role can change any user's password. Regular users can change only their own password.
     *
     * @param \Scottbass3\Harbor\Api\Model\PasswordReq $password         password to be updated, the attribute 'old_password' is optional when the API is called by the system administrator
     * @param array                                    $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     */
    public function __construct(int $userId, \Scottbass3\Harbor\Api\Model\PasswordReq $password, array $headerParameters = [])
    {
        $this->user_id = $userId;
        $this->body = $password;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'PUT';
    }

    public function getUri(): string
    {
        return str_replace(['{user_id}'], [$this->user_id], '/users/{user_id}/password');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return $this->getSerializedBody($serializer);
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['X-Request-Id']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('X-Request-Id', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Scottbass3\Harbor\Api\Exception\UpdateUserPasswordBadRequestException
     * @throws \Scottbass3\Harbor\Api\Exception\UpdateUserPasswordUnauthorizedException
     * @throws \Scottbass3\Harbor\Api\Exception\UpdateUserPasswordForbiddenException
     * @throws \Scottbass3\Harbor\Api\Exception\UpdateUserPasswordInternalServerErrorException
     * @throws \Scottbass3\Harbor\Api\Exception\UnexpectedStatusCodeException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
            return null;
        }
        if (400 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\UpdateUserPasswordBadRequestException($response);
        }
        if (401 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\UpdateUserPasswordUnauthorizedException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (403 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\UpdateUserPasswordForbiddenException($response);
        }
        if (500 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\UpdateUserPasswordInternalServerErrorException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        throw new \Scottbass3\Harbor\Api\Exception\UnexpectedStatusCodeException($status, $body);
    }

    public function getAuthenticationScopes(): array
    {
        return ['basic'];
    }
}
