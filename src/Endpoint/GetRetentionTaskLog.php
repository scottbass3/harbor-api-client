<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Endpoint;

class GetRetentionTaskLog extends \Flownative\Harbor\Api\Runtime\Client\BaseEndpoint implements \Flownative\Harbor\Api\Runtime\Client\Endpoint
{
    use \Flownative\Harbor\Api\Runtime\Client\EndpointTrait;
    protected $id;
    protected $eid;
    protected $tid;

    /**
     * Get Retention job task log, tags ratain or deletion detail will be shown in a table.
     *
     * @param int   $id               retention ID
     * @param int   $eid              retention execution ID
     * @param int   $tid              retention execution ID
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     */
    public function __construct(int $id, int $eid, int $tid, array $headerParameters = [])
    {
        $this->id = $id;
        $this->eid = $eid;
        $this->tid = $tid;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{id}', '{eid}', '{tid}'], [$this->id, $this->eid, $this->tid], '/retentions/{id}/executions/{eid}/tasks/{tid}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['X-Request-Id']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('X-Request-Id', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Flownative\Harbor\Api\Exception\GetRetentionTaskLogUnauthorizedException
     * @throws \Flownative\Harbor\Api\Exception\GetRetentionTaskLogForbiddenException
     * @throws \Flownative\Harbor\Api\Exception\GetRetentionTaskLogInternalServerErrorException
     * @throws \Flownative\Harbor\Api\Exception\UnexpectedStatusCodeException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
            return json_decode($body);
        }
        if (401 === $status) {
            throw new \Flownative\Harbor\Api\Exception\GetRetentionTaskLogUnauthorizedException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (403 === $status) {
            throw new \Flownative\Harbor\Api\Exception\GetRetentionTaskLogForbiddenException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (500 === $status) {
            throw new \Flownative\Harbor\Api\Exception\GetRetentionTaskLogInternalServerErrorException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        throw new \Flownative\Harbor\Api\Exception\UnexpectedStatusCodeException($status, $body);
    }

    public function getAuthenticationScopes(): array
    {
        return ['basic'];
    }
}
