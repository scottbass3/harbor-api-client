<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Endpoint;

class GetExecution extends \Flownative\Harbor\Api\Runtime\Client\BaseEndpoint implements \Flownative\Harbor\Api\Runtime\Client\Endpoint
{
    use \Flownative\Harbor\Api\Runtime\Client\EndpointTrait;
    protected $project_name;
    protected $preheat_policy_name;
    protected $execution_id;

    /**
     * Get a execution detail by id.
     *
     * @param string $projectName       The name of the project
     * @param string $preheatPolicyName Preheat Policy Name
     * @param int    $executionId       Execution ID
     * @param array  $headerParameters  {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     */
    public function __construct(string $projectName, string $preheatPolicyName, int $executionId, array $headerParameters = [])
    {
        $this->project_name = $projectName;
        $this->preheat_policy_name = $preheatPolicyName;
        $this->execution_id = $executionId;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{project_name}', '{preheat_policy_name}', '{execution_id}'], [$this->project_name, $this->preheat_policy_name, $this->execution_id], '/projects/{project_name}/preheat/policies/{preheat_policy_name}/executions/{execution_id}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['X-Request-Id']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('X-Request-Id', ['string']);

        return $optionsResolver;
    }

    /**
     * @return \Flownative\Harbor\Api\Model\Execution
     *
     * @throws \Flownative\Harbor\Api\Exception\GetExecutionBadRequestException
     * @throws \Flownative\Harbor\Api\Exception\GetExecutionUnauthorizedException
     * @throws \Flownative\Harbor\Api\Exception\GetExecutionForbiddenException
     * @throws \Flownative\Harbor\Api\Exception\GetExecutionNotFoundException
     * @throws \Flownative\Harbor\Api\Exception\GetExecutionInternalServerErrorException
     * @throws \Flownative\Harbor\Api\Exception\UnexpectedStatusCodeException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
            return $serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Execution', 'json');
        }
        if (400 === $status) {
            throw new \Flownative\Harbor\Api\Exception\GetExecutionBadRequestException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (401 === $status) {
            throw new \Flownative\Harbor\Api\Exception\GetExecutionUnauthorizedException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (403 === $status) {
            throw new \Flownative\Harbor\Api\Exception\GetExecutionForbiddenException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (404 === $status) {
            throw new \Flownative\Harbor\Api\Exception\GetExecutionNotFoundException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (500 === $status) {
            throw new \Flownative\Harbor\Api\Exception\GetExecutionInternalServerErrorException($serializer->deserialize($body, 'Flownative\Harbor\Api\Model\Errors', 'json'), $response);
        }
        throw new \Flownative\Harbor\Api\Exception\UnexpectedStatusCodeException($status, $body);
    }

    public function getAuthenticationScopes(): array
    {
        return ['basic'];
    }
}
