<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Endpoint;

class CreateProject extends \Scottbass3\Harbor\Api\Runtime\Client\BaseEndpoint implements \Scottbass3\Harbor\Api\Runtime\Client\Endpoint
{
    use \Scottbass3\Harbor\Api\Runtime\Client\EndpointTrait;

    /**
     * This endpoint is for user to create a new project.
     *
     * @param \Scottbass3\Harbor\Api\Model\ProjectReq $project          new created project
     * @param array                                   $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Resource-Name-In-Location The flag to indicate whether to return the name of the resource in Location. When X-Resource-Name-In-Location is true, the Location will return the name of the resource.
     *             }
     */
    public function __construct(\Scottbass3\Harbor\Api\Model\ProjectReq $project, array $headerParameters = [])
    {
        $this->body = $project;
        $this->headerParameters = $headerParameters;
    }

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return '/projects';
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return $this->getSerializedBody($serializer);
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getHeadersOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getHeadersOptionsResolver();
        $optionsResolver->setDefined(['X-Request-Id', 'X-Resource-Name-In-Location']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults(['X-Resource-Name-In-Location' => false]);
        $optionsResolver->addAllowedTypes('X-Request-Id', ['string']);
        $optionsResolver->addAllowedTypes('X-Resource-Name-In-Location', ['bool']);

        return $optionsResolver;
    }

    /**
     * @return null
     *
     * @throws \Scottbass3\Harbor\Api\Exception\CreateProjectBadRequestException
     * @throws \Scottbass3\Harbor\Api\Exception\CreateProjectUnauthorizedException
     * @throws \Scottbass3\Harbor\Api\Exception\CreateProjectConflictException
     * @throws \Scottbass3\Harbor\Api\Exception\CreateProjectInternalServerErrorException
     * @throws \Scottbass3\Harbor\Api\Exception\UnexpectedStatusCodeException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (201 === $status) {
            return null;
        }
        if (400 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\CreateProjectBadRequestException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (401 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\CreateProjectUnauthorizedException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (409 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\CreateProjectConflictException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        if (500 === $status) {
            throw new \Scottbass3\Harbor\Api\Exception\CreateProjectInternalServerErrorException($serializer->deserialize($body, 'Scottbass3\Harbor\Api\Model\Errors', 'json'), $response);
        }
        throw new \Scottbass3\Harbor\Api\Exception\UnexpectedStatusCodeException($status, $body);
    }

    public function getAuthenticationScopes(): array
    {
        return ['basic'];
    }
}
