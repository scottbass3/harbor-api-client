<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class StatsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\Stats::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\Stats::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\Stats();
        if (\array_key_exists('ongoing', $data) && \is_int($data['ongoing'])) {
            $data['ongoing'] = (bool) $data['ongoing'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('total', $data) && $data['total'] !== null) {
            $object->setTotal($data['total']);
        } elseif (\array_key_exists('total', $data) && $data['total'] === null) {
            $object->setTotal(null);
        }
        if (\array_key_exists('completed', $data) && $data['completed'] !== null) {
            $object->setCompleted($data['completed']);
        } elseif (\array_key_exists('completed', $data) && $data['completed'] === null) {
            $object->setCompleted(null);
        }
        if (\array_key_exists('metrics', $data) && $data['metrics'] !== null) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['metrics'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setMetrics($values);
        } elseif (\array_key_exists('metrics', $data) && $data['metrics'] === null) {
            $object->setMetrics(null);
        }
        if (\array_key_exists('ongoing', $data) && $data['ongoing'] !== null) {
            $object->setOngoing($data['ongoing']);
        } elseif (\array_key_exists('ongoing', $data) && $data['ongoing'] === null) {
            $object->setOngoing(null);
        }
        if (\array_key_exists('trigger', $data) && $data['trigger'] !== null) {
            $object->setTrigger($data['trigger']);
        } elseif (\array_key_exists('trigger', $data) && $data['trigger'] === null) {
            $object->setTrigger(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('total') && null !== $data->getTotal()) {
            $dataArray['total'] = $data->getTotal();
        }
        if ($data->isInitialized('completed') && null !== $data->getCompleted()) {
            $dataArray['completed'] = $data->getCompleted();
        }
        if ($data->isInitialized('metrics') && null !== $data->getMetrics()) {
            $values = [];
            foreach ($data->getMetrics() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['metrics'] = $values;
        }
        if ($data->isInitialized('ongoing') && null !== $data->getOngoing()) {
            $dataArray['ongoing'] = $data->getOngoing();
        }
        if ($data->isInitialized('trigger') && null !== $data->getTrigger()) {
            $dataArray['trigger'] = $data->getTrigger();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\Stats::class => false];
    }
}
