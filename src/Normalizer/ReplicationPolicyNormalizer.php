<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ReplicationPolicyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\ReplicationPolicy::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\ReplicationPolicy::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\ReplicationPolicy();
        if (\array_key_exists('replicate_deletion', $data) && \is_int($data['replicate_deletion'])) {
            $data['replicate_deletion'] = (bool) $data['replicate_deletion'];
        }
        if (\array_key_exists('deletion', $data) && \is_int($data['deletion'])) {
            $data['deletion'] = (bool) $data['deletion'];
        }
        if (\array_key_exists('override', $data) && \is_int($data['override'])) {
            $data['override'] = (bool) $data['override'];
        }
        if (\array_key_exists('enabled', $data) && \is_int($data['enabled'])) {
            $data['enabled'] = (bool) $data['enabled'];
        }
        if (\array_key_exists('copy_by_chunk', $data) && \is_int($data['copy_by_chunk'])) {
            $data['copy_by_chunk'] = (bool) $data['copy_by_chunk'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data) && $data['id'] !== null) {
            $object->setId($data['id']);
        } elseif (\array_key_exists('id', $data) && $data['id'] === null) {
            $object->setId(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('description', $data) && $data['description'] !== null) {
            $object->setDescription($data['description']);
        } elseif (\array_key_exists('description', $data) && $data['description'] === null) {
            $object->setDescription(null);
        }
        if (\array_key_exists('src_registry', $data) && $data['src_registry'] !== null) {
            $object->setSrcRegistry($this->denormalizer->denormalize($data['src_registry'], \Scottbass3\Harbor\Api\Model\Registry::class, 'json', $context));
        } elseif (\array_key_exists('src_registry', $data) && $data['src_registry'] === null) {
            $object->setSrcRegistry(null);
        }
        if (\array_key_exists('dest_registry', $data) && $data['dest_registry'] !== null) {
            $object->setDestRegistry($this->denormalizer->denormalize($data['dest_registry'], \Scottbass3\Harbor\Api\Model\Registry::class, 'json', $context));
        } elseif (\array_key_exists('dest_registry', $data) && $data['dest_registry'] === null) {
            $object->setDestRegistry(null);
        }
        if (\array_key_exists('dest_namespace', $data) && $data['dest_namespace'] !== null) {
            $object->setDestNamespace($data['dest_namespace']);
        } elseif (\array_key_exists('dest_namespace', $data) && $data['dest_namespace'] === null) {
            $object->setDestNamespace(null);
        }
        if (\array_key_exists('dest_namespace_replace_count', $data) && $data['dest_namespace_replace_count'] !== null) {
            $object->setDestNamespaceReplaceCount($data['dest_namespace_replace_count']);
        } elseif (\array_key_exists('dest_namespace_replace_count', $data) && $data['dest_namespace_replace_count'] === null) {
            $object->setDestNamespaceReplaceCount(null);
        }
        if (\array_key_exists('trigger', $data) && $data['trigger'] !== null) {
            $object->setTrigger($this->denormalizer->denormalize($data['trigger'], \Scottbass3\Harbor\Api\Model\ReplicationTrigger::class, 'json', $context));
        } elseif (\array_key_exists('trigger', $data) && $data['trigger'] === null) {
            $object->setTrigger(null);
        }
        if (\array_key_exists('filters', $data) && $data['filters'] !== null) {
            $values = [];
            foreach ($data['filters'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Scottbass3\Harbor\Api\Model\ReplicationFilter::class, 'json', $context);
            }
            $object->setFilters($values);
        } elseif (\array_key_exists('filters', $data) && $data['filters'] === null) {
            $object->setFilters(null);
        }
        if (\array_key_exists('replicate_deletion', $data) && $data['replicate_deletion'] !== null) {
            $object->setReplicateDeletion($data['replicate_deletion']);
        } elseif (\array_key_exists('replicate_deletion', $data) && $data['replicate_deletion'] === null) {
            $object->setReplicateDeletion(null);
        }
        if (\array_key_exists('deletion', $data) && $data['deletion'] !== null) {
            $object->setDeletion($data['deletion']);
        } elseif (\array_key_exists('deletion', $data) && $data['deletion'] === null) {
            $object->setDeletion(null);
        }
        if (\array_key_exists('override', $data) && $data['override'] !== null) {
            $object->setOverride($data['override']);
        } elseif (\array_key_exists('override', $data) && $data['override'] === null) {
            $object->setOverride(null);
        }
        if (\array_key_exists('enabled', $data) && $data['enabled'] !== null) {
            $object->setEnabled($data['enabled']);
        } elseif (\array_key_exists('enabled', $data) && $data['enabled'] === null) {
            $object->setEnabled(null);
        }
        if (\array_key_exists('creation_time', $data) && $data['creation_time'] !== null) {
            $object->setCreationTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['creation_time']));
        } elseif (\array_key_exists('creation_time', $data) && $data['creation_time'] === null) {
            $object->setCreationTime(null);
        }
        if (\array_key_exists('update_time', $data) && $data['update_time'] !== null) {
            $object->setUpdateTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['update_time']));
        } elseif (\array_key_exists('update_time', $data) && $data['update_time'] === null) {
            $object->setUpdateTime(null);
        }
        if (\array_key_exists('speed', $data) && $data['speed'] !== null) {
            $object->setSpeed($data['speed']);
        } elseif (\array_key_exists('speed', $data) && $data['speed'] === null) {
            $object->setSpeed(null);
        }
        if (\array_key_exists('copy_by_chunk', $data) && $data['copy_by_chunk'] !== null) {
            $object->setCopyByChunk($data['copy_by_chunk']);
        } elseif (\array_key_exists('copy_by_chunk', $data) && $data['copy_by_chunk'] === null) {
            $object->setCopyByChunk(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('name') && null !== $data->getName()) {
            $dataArray['name'] = $data->getName();
        }
        if ($data->isInitialized('description') && null !== $data->getDescription()) {
            $dataArray['description'] = $data->getDescription();
        }
        if ($data->isInitialized('srcRegistry') && null !== $data->getSrcRegistry()) {
            $dataArray['src_registry'] = $this->normalizer->normalize($data->getSrcRegistry(), 'json', $context);
        }
        if ($data->isInitialized('destRegistry') && null !== $data->getDestRegistry()) {
            $dataArray['dest_registry'] = $this->normalizer->normalize($data->getDestRegistry(), 'json', $context);
        }
        if ($data->isInitialized('destNamespace') && null !== $data->getDestNamespace()) {
            $dataArray['dest_namespace'] = $data->getDestNamespace();
        }
        if ($data->isInitialized('destNamespaceReplaceCount') && null !== $data->getDestNamespaceReplaceCount()) {
            $dataArray['dest_namespace_replace_count'] = $data->getDestNamespaceReplaceCount();
        }
        if ($data->isInitialized('trigger') && null !== $data->getTrigger()) {
            $dataArray['trigger'] = $this->normalizer->normalize($data->getTrigger(), 'json', $context);
        }
        if ($data->isInitialized('filters') && null !== $data->getFilters()) {
            $values = [];
            foreach ($data->getFilters() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['filters'] = $values;
        }
        if ($data->isInitialized('replicateDeletion') && null !== $data->getReplicateDeletion()) {
            $dataArray['replicate_deletion'] = $data->getReplicateDeletion();
        }
        if ($data->isInitialized('deletion') && null !== $data->getDeletion()) {
            $dataArray['deletion'] = $data->getDeletion();
        }
        if ($data->isInitialized('override') && null !== $data->getOverride()) {
            $dataArray['override'] = $data->getOverride();
        }
        if ($data->isInitialized('enabled') && null !== $data->getEnabled()) {
            $dataArray['enabled'] = $data->getEnabled();
        }
        if ($data->isInitialized('creationTime') && null !== $data->getCreationTime()) {
            $dataArray['creation_time'] = $data->getCreationTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('updateTime') && null !== $data->getUpdateTime()) {
            $dataArray['update_time'] = $data->getUpdateTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('speed') && null !== $data->getSpeed()) {
            $dataArray['speed'] = $data->getSpeed();
        }
        if ($data->isInitialized('copyByChunk') && null !== $data->getCopyByChunk()) {
            $dataArray['copy_by_chunk'] = $data->getCopyByChunk();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\ReplicationPolicy::class => false];
    }
}
