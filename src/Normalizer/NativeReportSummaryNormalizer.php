<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class NativeReportSummaryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\NativeReportSummary::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\NativeReportSummary::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\NativeReportSummary();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('report_id', $data) && $data['report_id'] !== null) {
            $object->setReportId($data['report_id']);
        } elseif (\array_key_exists('report_id', $data) && $data['report_id'] === null) {
            $object->setReportId(null);
        }
        if (\array_key_exists('scan_status', $data) && $data['scan_status'] !== null) {
            $object->setScanStatus($data['scan_status']);
        } elseif (\array_key_exists('scan_status', $data) && $data['scan_status'] === null) {
            $object->setScanStatus(null);
        }
        if (\array_key_exists('severity', $data) && $data['severity'] !== null) {
            $object->setSeverity($data['severity']);
        } elseif (\array_key_exists('severity', $data) && $data['severity'] === null) {
            $object->setSeverity(null);
        }
        if (\array_key_exists('duration', $data) && $data['duration'] !== null) {
            $object->setDuration($data['duration']);
        } elseif (\array_key_exists('duration', $data) && $data['duration'] === null) {
            $object->setDuration(null);
        }
        if (\array_key_exists('summary', $data) && $data['summary'] !== null) {
            $object->setSummary($this->denormalizer->denormalize($data['summary'], \Flownative\Harbor\Api\Model\VulnerabilitySummary::class, 'json', $context));
        } elseif (\array_key_exists('summary', $data) && $data['summary'] === null) {
            $object->setSummary(null);
        }
        if (\array_key_exists('start_time', $data) && $data['start_time'] !== null) {
            $object->setStartTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['start_time']));
        } elseif (\array_key_exists('start_time', $data) && $data['start_time'] === null) {
            $object->setStartTime(null);
        }
        if (\array_key_exists('end_time', $data) && $data['end_time'] !== null) {
            $object->setEndTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['end_time']));
        } elseif (\array_key_exists('end_time', $data) && $data['end_time'] === null) {
            $object->setEndTime(null);
        }
        if (\array_key_exists('complete_percent', $data) && $data['complete_percent'] !== null) {
            $object->setCompletePercent($data['complete_percent']);
        } elseif (\array_key_exists('complete_percent', $data) && $data['complete_percent'] === null) {
            $object->setCompletePercent(null);
        }
        if (\array_key_exists('scanner', $data) && $data['scanner'] !== null) {
            $object->setScanner($this->denormalizer->denormalize($data['scanner'], \Flownative\Harbor\Api\Model\Scanner::class, 'json', $context));
        } elseif (\array_key_exists('scanner', $data) && $data['scanner'] === null) {
            $object->setScanner(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('reportId') && null !== $data->getReportId()) {
            $dataArray['report_id'] = $data->getReportId();
        }
        if ($data->isInitialized('scanStatus') && null !== $data->getScanStatus()) {
            $dataArray['scan_status'] = $data->getScanStatus();
        }
        if ($data->isInitialized('severity') && null !== $data->getSeverity()) {
            $dataArray['severity'] = $data->getSeverity();
        }
        if ($data->isInitialized('duration') && null !== $data->getDuration()) {
            $dataArray['duration'] = $data->getDuration();
        }
        if ($data->isInitialized('summary') && null !== $data->getSummary()) {
            $dataArray['summary'] = $this->normalizer->normalize($data->getSummary(), 'json', $context);
        }
        if ($data->isInitialized('startTime') && null !== $data->getStartTime()) {
            $dataArray['start_time'] = $data->getStartTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('endTime') && null !== $data->getEndTime()) {
            $dataArray['end_time'] = $data->getEndTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('completePercent') && null !== $data->getCompletePercent()) {
            $dataArray['complete_percent'] = $data->getCompletePercent();
        }
        if ($data->isInitialized('scanner') && null !== $data->getScanner()) {
            $dataArray['scanner'] = $this->normalizer->normalize($data->getScanner(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\NativeReportSummary::class => false];
    }
}
