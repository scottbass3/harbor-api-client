<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class DangerousCVENormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\DangerousCVE::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\DangerousCVE::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\DangerousCVE();
        if (\array_key_exists('cvss_score_v3', $data) && \is_int($data['cvss_score_v3'])) {
            $data['cvss_score_v3'] = (float) $data['cvss_score_v3'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('cve_id', $data) && $data['cve_id'] !== null) {
            $object->setCveId($data['cve_id']);
        } elseif (\array_key_exists('cve_id', $data) && $data['cve_id'] === null) {
            $object->setCveId(null);
        }
        if (\array_key_exists('severity', $data) && $data['severity'] !== null) {
            $object->setSeverity($data['severity']);
        } elseif (\array_key_exists('severity', $data) && $data['severity'] === null) {
            $object->setSeverity(null);
        }
        if (\array_key_exists('cvss_score_v3', $data) && $data['cvss_score_v3'] !== null) {
            $object->setCvssScoreV3($data['cvss_score_v3']);
        } elseif (\array_key_exists('cvss_score_v3', $data) && $data['cvss_score_v3'] === null) {
            $object->setCvssScoreV3(null);
        }
        if (\array_key_exists('desc', $data) && $data['desc'] !== null) {
            $object->setDesc($data['desc']);
        } elseif (\array_key_exists('desc', $data) && $data['desc'] === null) {
            $object->setDesc(null);
        }
        if (\array_key_exists('package', $data) && $data['package'] !== null) {
            $object->setPackage($data['package']);
        } elseif (\array_key_exists('package', $data) && $data['package'] === null) {
            $object->setPackage(null);
        }
        if (\array_key_exists('version', $data) && $data['version'] !== null) {
            $object->setVersion($data['version']);
        } elseif (\array_key_exists('version', $data) && $data['version'] === null) {
            $object->setVersion(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('cveId') && null !== $data->getCveId()) {
            $dataArray['cve_id'] = $data->getCveId();
        }
        if ($data->isInitialized('severity') && null !== $data->getSeverity()) {
            $dataArray['severity'] = $data->getSeverity();
        }
        if ($data->isInitialized('cvssScoreV3') && null !== $data->getCvssScoreV3()) {
            $dataArray['cvss_score_v3'] = $data->getCvssScoreV3();
        }
        if ($data->isInitialized('desc') && null !== $data->getDesc()) {
            $dataArray['desc'] = $data->getDesc();
        }
        if ($data->isInitialized('package') && null !== $data->getPackage()) {
            $dataArray['package'] = $data->getPackage();
        }
        if ($data->isInitialized('version') && null !== $data->getVersion()) {
            $dataArray['version'] = $data->getVersion();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\DangerousCVE::class => false];
    }
}
