<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class StatisticNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\Statistic::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\Statistic::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\Statistic();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('private_project_count', $data) && $data['private_project_count'] !== null) {
            $object->setPrivateProjectCount($data['private_project_count']);
        } elseif (\array_key_exists('private_project_count', $data) && $data['private_project_count'] === null) {
            $object->setPrivateProjectCount(null);
        }
        if (\array_key_exists('private_repo_count', $data) && $data['private_repo_count'] !== null) {
            $object->setPrivateRepoCount($data['private_repo_count']);
        } elseif (\array_key_exists('private_repo_count', $data) && $data['private_repo_count'] === null) {
            $object->setPrivateRepoCount(null);
        }
        if (\array_key_exists('public_project_count', $data) && $data['public_project_count'] !== null) {
            $object->setPublicProjectCount($data['public_project_count']);
        } elseif (\array_key_exists('public_project_count', $data) && $data['public_project_count'] === null) {
            $object->setPublicProjectCount(null);
        }
        if (\array_key_exists('public_repo_count', $data) && $data['public_repo_count'] !== null) {
            $object->setPublicRepoCount($data['public_repo_count']);
        } elseif (\array_key_exists('public_repo_count', $data) && $data['public_repo_count'] === null) {
            $object->setPublicRepoCount(null);
        }
        if (\array_key_exists('total_project_count', $data) && $data['total_project_count'] !== null) {
            $object->setTotalProjectCount($data['total_project_count']);
        } elseif (\array_key_exists('total_project_count', $data) && $data['total_project_count'] === null) {
            $object->setTotalProjectCount(null);
        }
        if (\array_key_exists('total_repo_count', $data) && $data['total_repo_count'] !== null) {
            $object->setTotalRepoCount($data['total_repo_count']);
        } elseif (\array_key_exists('total_repo_count', $data) && $data['total_repo_count'] === null) {
            $object->setTotalRepoCount(null);
        }
        if (\array_key_exists('total_storage_consumption', $data) && $data['total_storage_consumption'] !== null) {
            $object->setTotalStorageConsumption($data['total_storage_consumption']);
        } elseif (\array_key_exists('total_storage_consumption', $data) && $data['total_storage_consumption'] === null) {
            $object->setTotalStorageConsumption(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('privateProjectCount') && null !== $data->getPrivateProjectCount()) {
            $dataArray['private_project_count'] = $data->getPrivateProjectCount();
        }
        if ($data->isInitialized('privateRepoCount') && null !== $data->getPrivateRepoCount()) {
            $dataArray['private_repo_count'] = $data->getPrivateRepoCount();
        }
        if ($data->isInitialized('publicProjectCount') && null !== $data->getPublicProjectCount()) {
            $dataArray['public_project_count'] = $data->getPublicProjectCount();
        }
        if ($data->isInitialized('publicRepoCount') && null !== $data->getPublicRepoCount()) {
            $dataArray['public_repo_count'] = $data->getPublicRepoCount();
        }
        if ($data->isInitialized('totalProjectCount') && null !== $data->getTotalProjectCount()) {
            $dataArray['total_project_count'] = $data->getTotalProjectCount();
        }
        if ($data->isInitialized('totalRepoCount') && null !== $data->getTotalRepoCount()) {
            $dataArray['total_repo_count'] = $data->getTotalRepoCount();
        }
        if ($data->isInitialized('totalStorageConsumption') && null !== $data->getTotalStorageConsumption()) {
            $dataArray['total_storage_consumption'] = $data->getTotalStorageConsumption();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\Statistic::class => false];
    }
}
