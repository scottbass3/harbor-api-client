<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ScannerRegistrationNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\ScannerRegistration::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\ScannerRegistration::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\ScannerRegistration();
        if (\array_key_exists('disabled', $data) && \is_int($data['disabled'])) {
            $data['disabled'] = (bool) $data['disabled'];
        }
        if (\array_key_exists('is_default', $data) && \is_int($data['is_default'])) {
            $data['is_default'] = (bool) $data['is_default'];
        }
        if (\array_key_exists('skip_certVerify', $data) && \is_int($data['skip_certVerify'])) {
            $data['skip_certVerify'] = (bool) $data['skip_certVerify'];
        }
        if (\array_key_exists('use_internal_addr', $data) && \is_int($data['use_internal_addr'])) {
            $data['use_internal_addr'] = (bool) $data['use_internal_addr'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('uuid', $data) && $data['uuid'] !== null) {
            $object->setUuid($data['uuid']);
        } elseif (\array_key_exists('uuid', $data) && $data['uuid'] === null) {
            $object->setUuid(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('description', $data) && $data['description'] !== null) {
            $object->setDescription($data['description']);
        } elseif (\array_key_exists('description', $data) && $data['description'] === null) {
            $object->setDescription(null);
        }
        if (\array_key_exists('url', $data) && $data['url'] !== null) {
            $object->setUrl($data['url']);
        } elseif (\array_key_exists('url', $data) && $data['url'] === null) {
            $object->setUrl(null);
        }
        if (\array_key_exists('disabled', $data) && $data['disabled'] !== null) {
            $object->setDisabled($data['disabled']);
        } elseif (\array_key_exists('disabled', $data) && $data['disabled'] === null) {
            $object->setDisabled(null);
        }
        if (\array_key_exists('is_default', $data) && $data['is_default'] !== null) {
            $object->setIsDefault($data['is_default']);
        } elseif (\array_key_exists('is_default', $data) && $data['is_default'] === null) {
            $object->setIsDefault(null);
        }
        if (\array_key_exists('auth', $data) && $data['auth'] !== null) {
            $object->setAuth($data['auth']);
        } elseif (\array_key_exists('auth', $data) && $data['auth'] === null) {
            $object->setAuth(null);
        }
        if (\array_key_exists('access_credential', $data) && $data['access_credential'] !== null) {
            $object->setAccessCredential($data['access_credential']);
        } elseif (\array_key_exists('access_credential', $data) && $data['access_credential'] === null) {
            $object->setAccessCredential(null);
        }
        if (\array_key_exists('skip_certVerify', $data) && $data['skip_certVerify'] !== null) {
            $object->setSkipCertVerify($data['skip_certVerify']);
        } elseif (\array_key_exists('skip_certVerify', $data) && $data['skip_certVerify'] === null) {
            $object->setSkipCertVerify(null);
        }
        if (\array_key_exists('use_internal_addr', $data) && $data['use_internal_addr'] !== null) {
            $object->setUseInternalAddr($data['use_internal_addr']);
        } elseif (\array_key_exists('use_internal_addr', $data) && $data['use_internal_addr'] === null) {
            $object->setUseInternalAddr(null);
        }
        if (\array_key_exists('create_time', $data) && $data['create_time'] !== null) {
            $object->setCreateTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['create_time']));
        } elseif (\array_key_exists('create_time', $data) && $data['create_time'] === null) {
            $object->setCreateTime(null);
        }
        if (\array_key_exists('update_time', $data) && $data['update_time'] !== null) {
            $object->setUpdateTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['update_time']));
        } elseif (\array_key_exists('update_time', $data) && $data['update_time'] === null) {
            $object->setUpdateTime(null);
        }
        if (\array_key_exists('adapter', $data) && $data['adapter'] !== null) {
            $object->setAdapter($data['adapter']);
        } elseif (\array_key_exists('adapter', $data) && $data['adapter'] === null) {
            $object->setAdapter(null);
        }
        if (\array_key_exists('vendor', $data) && $data['vendor'] !== null) {
            $object->setVendor($data['vendor']);
        } elseif (\array_key_exists('vendor', $data) && $data['vendor'] === null) {
            $object->setVendor(null);
        }
        if (\array_key_exists('version', $data) && $data['version'] !== null) {
            $object->setVersion($data['version']);
        } elseif (\array_key_exists('version', $data) && $data['version'] === null) {
            $object->setVersion(null);
        }
        if (\array_key_exists('health', $data) && $data['health'] !== null) {
            $object->setHealth($data['health']);
        } elseif (\array_key_exists('health', $data) && $data['health'] === null) {
            $object->setHealth(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('uuid') && null !== $data->getUuid()) {
            $dataArray['uuid'] = $data->getUuid();
        }
        if ($data->isInitialized('name') && null !== $data->getName()) {
            $dataArray['name'] = $data->getName();
        }
        if ($data->isInitialized('description') && null !== $data->getDescription()) {
            $dataArray['description'] = $data->getDescription();
        }
        if ($data->isInitialized('url') && null !== $data->getUrl()) {
            $dataArray['url'] = $data->getUrl();
        }
        if ($data->isInitialized('disabled') && null !== $data->getDisabled()) {
            $dataArray['disabled'] = $data->getDisabled();
        }
        if ($data->isInitialized('isDefault') && null !== $data->getIsDefault()) {
            $dataArray['is_default'] = $data->getIsDefault();
        }
        if ($data->isInitialized('auth') && null !== $data->getAuth()) {
            $dataArray['auth'] = $data->getAuth();
        }
        if ($data->isInitialized('accessCredential') && null !== $data->getAccessCredential()) {
            $dataArray['access_credential'] = $data->getAccessCredential();
        }
        if ($data->isInitialized('skipCertVerify') && null !== $data->getSkipCertVerify()) {
            $dataArray['skip_certVerify'] = $data->getSkipCertVerify();
        }
        if ($data->isInitialized('useInternalAddr') && null !== $data->getUseInternalAddr()) {
            $dataArray['use_internal_addr'] = $data->getUseInternalAddr();
        }
        if ($data->isInitialized('createTime') && null !== $data->getCreateTime()) {
            $dataArray['create_time'] = $data->getCreateTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('updateTime') && null !== $data->getUpdateTime()) {
            $dataArray['update_time'] = $data->getUpdateTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('adapter') && null !== $data->getAdapter()) {
            $dataArray['adapter'] = $data->getAdapter();
        }
        if ($data->isInitialized('vendor') && null !== $data->getVendor()) {
            $dataArray['vendor'] = $data->getVendor();
        }
        if ($data->isInitialized('version') && null !== $data->getVersion()) {
            $dataArray['version'] = $data->getVersion();
        }
        if ($data->isInitialized('health') && null !== $data->getHealth()) {
            $dataArray['health'] = $data->getHealth();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\ScannerRegistration::class => false];
    }
}
