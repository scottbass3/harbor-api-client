<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ProjectMetadataNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\ProjectMetadata::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\ProjectMetadata::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\ProjectMetadata();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('public', $data) && $data['public'] !== null) {
            $object->setPublic($data['public']);
        } elseif (\array_key_exists('public', $data) && $data['public'] === null) {
            $object->setPublic(null);
        }
        if (\array_key_exists('enable_content_trust', $data) && $data['enable_content_trust'] !== null) {
            $object->setEnableContentTrust($data['enable_content_trust']);
        } elseif (\array_key_exists('enable_content_trust', $data) && $data['enable_content_trust'] === null) {
            $object->setEnableContentTrust(null);
        }
        if (\array_key_exists('enable_content_trust_cosign', $data) && $data['enable_content_trust_cosign'] !== null) {
            $object->setEnableContentTrustCosign($data['enable_content_trust_cosign']);
        } elseif (\array_key_exists('enable_content_trust_cosign', $data) && $data['enable_content_trust_cosign'] === null) {
            $object->setEnableContentTrustCosign(null);
        }
        if (\array_key_exists('prevent_vul', $data) && $data['prevent_vul'] !== null) {
            $object->setPreventVul($data['prevent_vul']);
        } elseif (\array_key_exists('prevent_vul', $data) && $data['prevent_vul'] === null) {
            $object->setPreventVul(null);
        }
        if (\array_key_exists('severity', $data) && $data['severity'] !== null) {
            $object->setSeverity($data['severity']);
        } elseif (\array_key_exists('severity', $data) && $data['severity'] === null) {
            $object->setSeverity(null);
        }
        if (\array_key_exists('auto_scan', $data) && $data['auto_scan'] !== null) {
            $object->setAutoScan($data['auto_scan']);
        } elseif (\array_key_exists('auto_scan', $data) && $data['auto_scan'] === null) {
            $object->setAutoScan(null);
        }
        if (\array_key_exists('reuse_sys_cve_allowlist', $data) && $data['reuse_sys_cve_allowlist'] !== null) {
            $object->setReuseSysCveAllowlist($data['reuse_sys_cve_allowlist']);
        } elseif (\array_key_exists('reuse_sys_cve_allowlist', $data) && $data['reuse_sys_cve_allowlist'] === null) {
            $object->setReuseSysCveAllowlist(null);
        }
        if (\array_key_exists('retention_id', $data) && $data['retention_id'] !== null) {
            $object->setRetentionId($data['retention_id']);
        } elseif (\array_key_exists('retention_id', $data) && $data['retention_id'] === null) {
            $object->setRetentionId(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('public') && null !== $data->getPublic()) {
            $dataArray['public'] = $data->getPublic();
        }
        if ($data->isInitialized('enableContentTrust') && null !== $data->getEnableContentTrust()) {
            $dataArray['enable_content_trust'] = $data->getEnableContentTrust();
        }
        if ($data->isInitialized('enableContentTrustCosign') && null !== $data->getEnableContentTrustCosign()) {
            $dataArray['enable_content_trust_cosign'] = $data->getEnableContentTrustCosign();
        }
        if ($data->isInitialized('preventVul') && null !== $data->getPreventVul()) {
            $dataArray['prevent_vul'] = $data->getPreventVul();
        }
        if ($data->isInitialized('severity') && null !== $data->getSeverity()) {
            $dataArray['severity'] = $data->getSeverity();
        }
        if ($data->isInitialized('autoScan') && null !== $data->getAutoScan()) {
            $dataArray['auto_scan'] = $data->getAutoScan();
        }
        if ($data->isInitialized('reuseSysCveAllowlist') && null !== $data->getReuseSysCveAllowlist()) {
            $dataArray['reuse_sys_cve_allowlist'] = $data->getReuseSysCveAllowlist();
        }
        if ($data->isInitialized('retentionId') && null !== $data->getRetentionId()) {
            $dataArray['retention_id'] = $data->getRetentionId();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\ProjectMetadata::class => false];
    }
}
