<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TagNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\Tag::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\Tag::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\Tag();
        if (\array_key_exists('immutable', $data) && \is_int($data['immutable'])) {
            $data['immutable'] = (bool) $data['immutable'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data) && $data['id'] !== null) {
            $object->setId($data['id']);
        } elseif (\array_key_exists('id', $data) && $data['id'] === null) {
            $object->setId(null);
        }
        if (\array_key_exists('repository_id', $data) && $data['repository_id'] !== null) {
            $object->setRepositoryId($data['repository_id']);
        } elseif (\array_key_exists('repository_id', $data) && $data['repository_id'] === null) {
            $object->setRepositoryId(null);
        }
        if (\array_key_exists('artifact_id', $data) && $data['artifact_id'] !== null) {
            $object->setArtifactId($data['artifact_id']);
        } elseif (\array_key_exists('artifact_id', $data) && $data['artifact_id'] === null) {
            $object->setArtifactId(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('push_time', $data) && $data['push_time'] !== null) {
            $object->setPushTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['push_time']));
        } elseif (\array_key_exists('push_time', $data) && $data['push_time'] === null) {
            $object->setPushTime(null);
        }
        if (\array_key_exists('pull_time', $data) && $data['pull_time'] !== null) {
            $object->setPullTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['pull_time']));
        } elseif (\array_key_exists('pull_time', $data) && $data['pull_time'] === null) {
            $object->setPullTime(null);
        }
        if (\array_key_exists('immutable', $data) && $data['immutable'] !== null) {
            $object->setImmutable($data['immutable']);
        } elseif (\array_key_exists('immutable', $data) && $data['immutable'] === null) {
            $object->setImmutable(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('repositoryId') && null !== $data->getRepositoryId()) {
            $dataArray['repository_id'] = $data->getRepositoryId();
        }
        if ($data->isInitialized('artifactId') && null !== $data->getArtifactId()) {
            $dataArray['artifact_id'] = $data->getArtifactId();
        }
        if ($data->isInitialized('name') && null !== $data->getName()) {
            $dataArray['name'] = $data->getName();
        }
        if ($data->isInitialized('pushTime') && null !== $data->getPushTime()) {
            $dataArray['push_time'] = $data->getPushTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('pullTime') && null !== $data->getPullTime()) {
            $dataArray['pull_time'] = $data->getPullTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('immutable') && null !== $data->getImmutable()) {
            $dataArray['immutable'] = $data->getImmutable();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\Tag::class => false];
    }
}
