<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class RetentionPolicyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\RetentionPolicy::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\RetentionPolicy::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\RetentionPolicy();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data) && $data['id'] !== null) {
            $object->setId($data['id']);
        } elseif (\array_key_exists('id', $data) && $data['id'] === null) {
            $object->setId(null);
        }
        if (\array_key_exists('algorithm', $data) && $data['algorithm'] !== null) {
            $object->setAlgorithm($data['algorithm']);
        } elseif (\array_key_exists('algorithm', $data) && $data['algorithm'] === null) {
            $object->setAlgorithm(null);
        }
        if (\array_key_exists('rules', $data) && $data['rules'] !== null) {
            $values = [];
            foreach ($data['rules'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Scottbass3\Harbor\Api\Model\RetentionRule::class, 'json', $context);
            }
            $object->setRules($values);
        } elseif (\array_key_exists('rules', $data) && $data['rules'] === null) {
            $object->setRules(null);
        }
        if (\array_key_exists('trigger', $data) && $data['trigger'] !== null) {
            $object->setTrigger($this->denormalizer->denormalize($data['trigger'], \Scottbass3\Harbor\Api\Model\RetentionRuleTrigger::class, 'json', $context));
        } elseif (\array_key_exists('trigger', $data) && $data['trigger'] === null) {
            $object->setTrigger(null);
        }
        if (\array_key_exists('scope', $data) && $data['scope'] !== null) {
            $object->setScope($this->denormalizer->denormalize($data['scope'], \Scottbass3\Harbor\Api\Model\RetentionPolicyScope::class, 'json', $context));
        } elseif (\array_key_exists('scope', $data) && $data['scope'] === null) {
            $object->setScope(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('algorithm') && null !== $data->getAlgorithm()) {
            $dataArray['algorithm'] = $data->getAlgorithm();
        }
        if ($data->isInitialized('rules') && null !== $data->getRules()) {
            $values = [];
            foreach ($data->getRules() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['rules'] = $values;
        }
        if ($data->isInitialized('trigger') && null !== $data->getTrigger()) {
            $dataArray['trigger'] = $this->normalizer->normalize($data->getTrigger(), 'json', $context);
        }
        if ($data->isInitialized('scope') && null !== $data->getScope()) {
            $dataArray['scope'] = $this->normalizer->normalize($data->getScope(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\RetentionPolicy::class => false];
    }
}
