<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class VulnerabilityItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\VulnerabilityItem::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\VulnerabilityItem::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\VulnerabilityItem();
        if (\array_key_exists('cvss_v3_score', $data) && \is_int($data['cvss_v3_score'])) {
            $data['cvss_v3_score'] = (float) $data['cvss_v3_score'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('project_id', $data) && $data['project_id'] !== null) {
            $object->setProjectId($data['project_id']);
        } elseif (\array_key_exists('project_id', $data) && $data['project_id'] === null) {
            $object->setProjectId(null);
        }
        if (\array_key_exists('repository_name', $data) && $data['repository_name'] !== null) {
            $object->setRepositoryName($data['repository_name']);
        } elseif (\array_key_exists('repository_name', $data) && $data['repository_name'] === null) {
            $object->setRepositoryName(null);
        }
        if (\array_key_exists('digest', $data) && $data['digest'] !== null) {
            $object->setDigest($data['digest']);
        } elseif (\array_key_exists('digest', $data) && $data['digest'] === null) {
            $object->setDigest(null);
        }
        if (\array_key_exists('tags', $data) && $data['tags'] !== null) {
            $values = [];
            foreach ($data['tags'] as $value) {
                $values[] = $value;
            }
            $object->setTags($values);
        } elseif (\array_key_exists('tags', $data) && $data['tags'] === null) {
            $object->setTags(null);
        }
        if (\array_key_exists('cve_id', $data) && $data['cve_id'] !== null) {
            $object->setCveId($data['cve_id']);
        } elseif (\array_key_exists('cve_id', $data) && $data['cve_id'] === null) {
            $object->setCveId(null);
        }
        if (\array_key_exists('severity', $data) && $data['severity'] !== null) {
            $object->setSeverity($data['severity']);
        } elseif (\array_key_exists('severity', $data) && $data['severity'] === null) {
            $object->setSeverity(null);
        }
        if (\array_key_exists('cvss_v3_score', $data) && $data['cvss_v3_score'] !== null) {
            $object->setCvssV3Score($data['cvss_v3_score']);
        } elseif (\array_key_exists('cvss_v3_score', $data) && $data['cvss_v3_score'] === null) {
            $object->setCvssV3Score(null);
        }
        if (\array_key_exists('package', $data) && $data['package'] !== null) {
            $object->setPackage($data['package']);
        } elseif (\array_key_exists('package', $data) && $data['package'] === null) {
            $object->setPackage(null);
        }
        if (\array_key_exists('version', $data) && $data['version'] !== null) {
            $object->setVersion($data['version']);
        } elseif (\array_key_exists('version', $data) && $data['version'] === null) {
            $object->setVersion(null);
        }
        if (\array_key_exists('fixed_version', $data) && $data['fixed_version'] !== null) {
            $object->setFixedVersion($data['fixed_version']);
        } elseif (\array_key_exists('fixed_version', $data) && $data['fixed_version'] === null) {
            $object->setFixedVersion(null);
        }
        if (\array_key_exists('desc', $data) && $data['desc'] !== null) {
            $object->setDesc($data['desc']);
        } elseif (\array_key_exists('desc', $data) && $data['desc'] === null) {
            $object->setDesc(null);
        }
        if (\array_key_exists('links', $data) && $data['links'] !== null) {
            $values_1 = [];
            foreach ($data['links'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setLinks($values_1);
        } elseif (\array_key_exists('links', $data) && $data['links'] === null) {
            $object->setLinks(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('projectId') && null !== $data->getProjectId()) {
            $dataArray['project_id'] = $data->getProjectId();
        }
        if ($data->isInitialized('repositoryName') && null !== $data->getRepositoryName()) {
            $dataArray['repository_name'] = $data->getRepositoryName();
        }
        if ($data->isInitialized('digest') && null !== $data->getDigest()) {
            $dataArray['digest'] = $data->getDigest();
        }
        if ($data->isInitialized('tags') && null !== $data->getTags()) {
            $values = [];
            foreach ($data->getTags() as $value) {
                $values[] = $value;
            }
            $dataArray['tags'] = $values;
        }
        if ($data->isInitialized('cveId') && null !== $data->getCveId()) {
            $dataArray['cve_id'] = $data->getCveId();
        }
        if ($data->isInitialized('severity') && null !== $data->getSeverity()) {
            $dataArray['severity'] = $data->getSeverity();
        }
        if ($data->isInitialized('cvssV3Score') && null !== $data->getCvssV3Score()) {
            $dataArray['cvss_v3_score'] = $data->getCvssV3Score();
        }
        if ($data->isInitialized('package') && null !== $data->getPackage()) {
            $dataArray['package'] = $data->getPackage();
        }
        if ($data->isInitialized('version') && null !== $data->getVersion()) {
            $dataArray['version'] = $data->getVersion();
        }
        if ($data->isInitialized('fixedVersion') && null !== $data->getFixedVersion()) {
            $dataArray['fixed_version'] = $data->getFixedVersion();
        }
        if ($data->isInitialized('desc') && null !== $data->getDesc()) {
            $dataArray['desc'] = $data->getDesc();
        }
        if ($data->isInitialized('links') && null !== $data->getLinks()) {
            $values_1 = [];
            foreach ($data->getLinks() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['links'] = $values_1;
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\VulnerabilityItem::class => false];
    }
}
