<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class RegistryProviderInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\RegistryProviderInfo::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\RegistryProviderInfo::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\RegistryProviderInfo();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('endpoint_pattern', $data) && $data['endpoint_pattern'] !== null) {
            $object->setEndpointPattern($this->denormalizer->denormalize($data['endpoint_pattern'], \Flownative\Harbor\Api\Model\RegistryProviderEndpointPattern::class, 'json', $context));
        } elseif (\array_key_exists('endpoint_pattern', $data) && $data['endpoint_pattern'] === null) {
            $object->setEndpointPattern(null);
        }
        if (\array_key_exists('credential_pattern', $data) && $data['credential_pattern'] !== null) {
            $object->setCredentialPattern($this->denormalizer->denormalize($data['credential_pattern'], \Flownative\Harbor\Api\Model\RegistryProviderCredentialPattern::class, 'json', $context));
        } elseif (\array_key_exists('credential_pattern', $data) && $data['credential_pattern'] === null) {
            $object->setCredentialPattern(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('endpointPattern') && null !== $data->getEndpointPattern()) {
            $dataArray['endpoint_pattern'] = $this->normalizer->normalize($data->getEndpointPattern(), 'json', $context);
        }
        if ($data->isInitialized('credentialPattern') && null !== $data->getCredentialPattern()) {
            $dataArray['credential_pattern'] = $this->normalizer->normalize($data->getCredentialPattern(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\RegistryProviderInfo::class => false];
    }
}
