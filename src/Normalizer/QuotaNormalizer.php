<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class QuotaNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\Quota::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\Quota::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\Quota();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data) && $data['id'] !== null) {
            $object->setId($data['id']);
        } elseif (\array_key_exists('id', $data) && $data['id'] === null) {
            $object->setId(null);
        }
        if (\array_key_exists('ref', $data) && $data['ref'] !== null) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['ref'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setRef($values);
        } elseif (\array_key_exists('ref', $data) && $data['ref'] === null) {
            $object->setRef(null);
        }
        if (\array_key_exists('hard', $data) && $data['hard'] !== null) {
            $values_1 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['hard'] as $key_1 => $value_1) {
                $values_1[$key_1] = $value_1;
            }
            $object->setHard($values_1);
        } elseif (\array_key_exists('hard', $data) && $data['hard'] === null) {
            $object->setHard(null);
        }
        if (\array_key_exists('used', $data) && $data['used'] !== null) {
            $values_2 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['used'] as $key_2 => $value_2) {
                $values_2[$key_2] = $value_2;
            }
            $object->setUsed($values_2);
        } elseif (\array_key_exists('used', $data) && $data['used'] === null) {
            $object->setUsed(null);
        }
        if (\array_key_exists('creation_time', $data) && $data['creation_time'] !== null) {
            $object->setCreationTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['creation_time']));
        } elseif (\array_key_exists('creation_time', $data) && $data['creation_time'] === null) {
            $object->setCreationTime(null);
        }
        if (\array_key_exists('update_time', $data) && $data['update_time'] !== null) {
            $object->setUpdateTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['update_time']));
        } elseif (\array_key_exists('update_time', $data) && $data['update_time'] === null) {
            $object->setUpdateTime(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('ref') && null !== $data->getRef()) {
            $values = [];
            foreach ($data->getRef() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['ref'] = $values;
        }
        if ($data->isInitialized('hard') && null !== $data->getHard()) {
            $values_1 = [];
            foreach ($data->getHard() as $key_1 => $value_1) {
                $values_1[$key_1] = $value_1;
            }
            $dataArray['hard'] = $values_1;
        }
        if ($data->isInitialized('used') && null !== $data->getUsed()) {
            $values_2 = [];
            foreach ($data->getUsed() as $key_2 => $value_2) {
                $values_2[$key_2] = $value_2;
            }
            $dataArray['used'] = $values_2;
        }
        if ($data->isInitialized('creationTime') && null !== $data->getCreationTime()) {
            $dataArray['creation_time'] = $data->getCreationTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('updateTime') && null !== $data->getUpdateTime()) {
            $dataArray['update_time'] = $data->getUpdateTime()->format('Y-m-d\TH:i:s.vp');
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\Quota::class => false];
    }
}
