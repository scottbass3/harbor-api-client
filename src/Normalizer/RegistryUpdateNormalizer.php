<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class RegistryUpdateNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\RegistryUpdate::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\RegistryUpdate::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\RegistryUpdate();
        if (\array_key_exists('insecure', $data) && \is_int($data['insecure'])) {
            $data['insecure'] = (bool) $data['insecure'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('description', $data) && $data['description'] !== null) {
            $object->setDescription($data['description']);
        } elseif (\array_key_exists('description', $data) && $data['description'] === null) {
            $object->setDescription(null);
        }
        if (\array_key_exists('url', $data) && $data['url'] !== null) {
            $object->setUrl($data['url']);
        } elseif (\array_key_exists('url', $data) && $data['url'] === null) {
            $object->setUrl(null);
        }
        if (\array_key_exists('credential_type', $data) && $data['credential_type'] !== null) {
            $object->setCredentialType($data['credential_type']);
        } elseif (\array_key_exists('credential_type', $data) && $data['credential_type'] === null) {
            $object->setCredentialType(null);
        }
        if (\array_key_exists('access_key', $data) && $data['access_key'] !== null) {
            $object->setAccessKey($data['access_key']);
        } elseif (\array_key_exists('access_key', $data) && $data['access_key'] === null) {
            $object->setAccessKey(null);
        }
        if (\array_key_exists('access_secret', $data) && $data['access_secret'] !== null) {
            $object->setAccessSecret($data['access_secret']);
        } elseif (\array_key_exists('access_secret', $data) && $data['access_secret'] === null) {
            $object->setAccessSecret(null);
        }
        if (\array_key_exists('insecure', $data) && $data['insecure'] !== null) {
            $object->setInsecure($data['insecure']);
        } elseif (\array_key_exists('insecure', $data) && $data['insecure'] === null) {
            $object->setInsecure(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('name') && null !== $data->getName()) {
            $dataArray['name'] = $data->getName();
        }
        if ($data->isInitialized('description') && null !== $data->getDescription()) {
            $dataArray['description'] = $data->getDescription();
        }
        if ($data->isInitialized('url') && null !== $data->getUrl()) {
            $dataArray['url'] = $data->getUrl();
        }
        if ($data->isInitialized('credentialType') && null !== $data->getCredentialType()) {
            $dataArray['credential_type'] = $data->getCredentialType();
        }
        if ($data->isInitialized('accessKey') && null !== $data->getAccessKey()) {
            $dataArray['access_key'] = $data->getAccessKey();
        }
        if ($data->isInitialized('accessSecret') && null !== $data->getAccessSecret()) {
            $dataArray['access_secret'] = $data->getAccessSecret();
        }
        if ($data->isInitialized('insecure') && null !== $data->getInsecure()) {
            $dataArray['insecure'] = $data->getInsecure();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\RegistryUpdate::class => false];
    }
}
