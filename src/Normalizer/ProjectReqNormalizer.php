<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ProjectReqNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\ProjectReq::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\ProjectReq::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\ProjectReq();
        if (\array_key_exists('public', $data) && \is_int($data['public'])) {
            $data['public'] = (bool) $data['public'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('project_name', $data) && $data['project_name'] !== null) {
            $object->setProjectName($data['project_name']);
        } elseif (\array_key_exists('project_name', $data) && $data['project_name'] === null) {
            $object->setProjectName(null);
        }
        if (\array_key_exists('public', $data) && $data['public'] !== null) {
            $object->setPublic($data['public']);
        } elseif (\array_key_exists('public', $data) && $data['public'] === null) {
            $object->setPublic(null);
        }
        if (\array_key_exists('metadata', $data) && $data['metadata'] !== null) {
            $object->setMetadata($this->denormalizer->denormalize($data['metadata'], \Scottbass3\Harbor\Api\Model\ProjectMetadata::class, 'json', $context));
        } elseif (\array_key_exists('metadata', $data) && $data['metadata'] === null) {
            $object->setMetadata(null);
        }
        if (\array_key_exists('cve_allowlist', $data) && $data['cve_allowlist'] !== null) {
            $object->setCveAllowlist($this->denormalizer->denormalize($data['cve_allowlist'], \Scottbass3\Harbor\Api\Model\CVEAllowlist::class, 'json', $context));
        } elseif (\array_key_exists('cve_allowlist', $data) && $data['cve_allowlist'] === null) {
            $object->setCveAllowlist(null);
        }
        if (\array_key_exists('storage_limit', $data) && $data['storage_limit'] !== null) {
            $object->setStorageLimit($data['storage_limit']);
        } elseif (\array_key_exists('storage_limit', $data) && $data['storage_limit'] === null) {
            $object->setStorageLimit(null);
        }
        if (\array_key_exists('registry_id', $data) && $data['registry_id'] !== null) {
            $object->setRegistryId($data['registry_id']);
        } elseif (\array_key_exists('registry_id', $data) && $data['registry_id'] === null) {
            $object->setRegistryId(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('projectName') && null !== $data->getProjectName()) {
            $dataArray['project_name'] = $data->getProjectName();
        }
        if ($data->isInitialized('public') && null !== $data->getPublic()) {
            $dataArray['public'] = $data->getPublic();
        }
        if ($data->isInitialized('metadata') && null !== $data->getMetadata()) {
            $dataArray['metadata'] = $this->normalizer->normalize($data->getMetadata(), 'json', $context);
        }
        if ($data->isInitialized('cveAllowlist') && null !== $data->getCveAllowlist()) {
            $dataArray['cve_allowlist'] = $this->normalizer->normalize($data->getCveAllowlist(), 'json', $context);
        }
        if ($data->isInitialized('storageLimit') && null !== $data->getStorageLimit()) {
            $dataArray['storage_limit'] = $data->getStorageLimit();
        }
        if ($data->isInitialized('registryId') && null !== $data->getRegistryId()) {
            $dataArray['registry_id'] = $data->getRegistryId();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\ProjectReq::class => false];
    }
}
