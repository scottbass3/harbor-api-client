<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SearchRepositoryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\SearchRepository::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\SearchRepository::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\SearchRepository();
        if (\array_key_exists('project_public', $data) && \is_int($data['project_public'])) {
            $data['project_public'] = (bool) $data['project_public'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('project_id', $data) && $data['project_id'] !== null) {
            $object->setProjectId($data['project_id']);
        } elseif (\array_key_exists('project_id', $data) && $data['project_id'] === null) {
            $object->setProjectId(null);
        }
        if (\array_key_exists('project_name', $data) && $data['project_name'] !== null) {
            $object->setProjectName($data['project_name']);
        } elseif (\array_key_exists('project_name', $data) && $data['project_name'] === null) {
            $object->setProjectName(null);
        }
        if (\array_key_exists('project_public', $data) && $data['project_public'] !== null) {
            $object->setProjectPublic($data['project_public']);
        } elseif (\array_key_exists('project_public', $data) && $data['project_public'] === null) {
            $object->setProjectPublic(null);
        }
        if (\array_key_exists('repository_name', $data) && $data['repository_name'] !== null) {
            $object->setRepositoryName($data['repository_name']);
        } elseif (\array_key_exists('repository_name', $data) && $data['repository_name'] === null) {
            $object->setRepositoryName(null);
        }
        if (\array_key_exists('pull_count', $data) && $data['pull_count'] !== null) {
            $object->setPullCount($data['pull_count']);
        } elseif (\array_key_exists('pull_count', $data) && $data['pull_count'] === null) {
            $object->setPullCount(null);
        }
        if (\array_key_exists('artifact_count', $data) && $data['artifact_count'] !== null) {
            $object->setArtifactCount($data['artifact_count']);
        } elseif (\array_key_exists('artifact_count', $data) && $data['artifact_count'] === null) {
            $object->setArtifactCount(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('projectId') && null !== $data->getProjectId()) {
            $dataArray['project_id'] = $data->getProjectId();
        }
        if ($data->isInitialized('projectName') && null !== $data->getProjectName()) {
            $dataArray['project_name'] = $data->getProjectName();
        }
        if ($data->isInitialized('projectPublic') && null !== $data->getProjectPublic()) {
            $dataArray['project_public'] = $data->getProjectPublic();
        }
        if ($data->isInitialized('repositoryName') && null !== $data->getRepositoryName()) {
            $dataArray['repository_name'] = $data->getRepositoryName();
        }
        if ($data->isInitialized('pullCount') && null !== $data->getPullCount()) {
            $dataArray['pull_count'] = $data->getPullCount();
        }
        if ($data->isInitialized('artifactCount') && null !== $data->getArtifactCount()) {
            $dataArray['artifact_count'] = $data->getArtifactCount();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\SearchRepository::class => false];
    }
}
