<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class WorkerPoolNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\WorkerPool::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\WorkerPool::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\WorkerPool();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('pid', $data) && $data['pid'] !== null) {
            $object->setPid($data['pid']);
        } elseif (\array_key_exists('pid', $data) && $data['pid'] === null) {
            $object->setPid(null);
        }
        if (\array_key_exists('worker_pool_id', $data) && $data['worker_pool_id'] !== null) {
            $object->setWorkerPoolId($data['worker_pool_id']);
        } elseif (\array_key_exists('worker_pool_id', $data) && $data['worker_pool_id'] === null) {
            $object->setWorkerPoolId(null);
        }
        if (\array_key_exists('start_at', $data) && $data['start_at'] !== null) {
            $object->setStartAt(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['start_at']));
        } elseif (\array_key_exists('start_at', $data) && $data['start_at'] === null) {
            $object->setStartAt(null);
        }
        if (\array_key_exists('heartbeat_at', $data) && $data['heartbeat_at'] !== null) {
            $object->setHeartbeatAt(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['heartbeat_at']));
        } elseif (\array_key_exists('heartbeat_at', $data) && $data['heartbeat_at'] === null) {
            $object->setHeartbeatAt(null);
        }
        if (\array_key_exists('concurrency', $data) && $data['concurrency'] !== null) {
            $object->setConcurrency($data['concurrency']);
        } elseif (\array_key_exists('concurrency', $data) && $data['concurrency'] === null) {
            $object->setConcurrency(null);
        }
        if (\array_key_exists('host', $data) && $data['host'] !== null) {
            $object->setHost($data['host']);
        } elseif (\array_key_exists('host', $data) && $data['host'] === null) {
            $object->setHost(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('pid') && null !== $data->getPid()) {
            $dataArray['pid'] = $data->getPid();
        }
        if ($data->isInitialized('workerPoolId') && null !== $data->getWorkerPoolId()) {
            $dataArray['worker_pool_id'] = $data->getWorkerPoolId();
        }
        if ($data->isInitialized('startAt') && null !== $data->getStartAt()) {
            $dataArray['start_at'] = $data->getStartAt()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('heartbeatAt') && null !== $data->getHeartbeatAt()) {
            $dataArray['heartbeat_at'] = $data->getHeartbeatAt()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('concurrency') && null !== $data->getConcurrency()) {
            $dataArray['concurrency'] = $data->getConcurrency();
        }
        if ($data->isInitialized('host') && null !== $data->getHost()) {
            $dataArray['host'] = $data->getHost();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\WorkerPool::class => false];
    }
}
