<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class RegistryInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\RegistryInfo::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\RegistryInfo::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\RegistryInfo();
        if (\array_key_exists('supported_copy_by_chunk', $data) && \is_int($data['supported_copy_by_chunk'])) {
            $data['supported_copy_by_chunk'] = (bool) $data['supported_copy_by_chunk'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('type', $data) && $data['type'] !== null) {
            $object->setType($data['type']);
        } elseif (\array_key_exists('type', $data) && $data['type'] === null) {
            $object->setType(null);
        }
        if (\array_key_exists('description', $data) && $data['description'] !== null) {
            $object->setDescription($data['description']);
        } elseif (\array_key_exists('description', $data) && $data['description'] === null) {
            $object->setDescription(null);
        }
        if (\array_key_exists('supported_resource_filters', $data) && $data['supported_resource_filters'] !== null) {
            $values = [];
            foreach ($data['supported_resource_filters'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Scottbass3\Harbor\Api\Model\FilterStyle::class, 'json', $context);
            }
            $object->setSupportedResourceFilters($values);
        } elseif (\array_key_exists('supported_resource_filters', $data) && $data['supported_resource_filters'] === null) {
            $object->setSupportedResourceFilters(null);
        }
        if (\array_key_exists('supported_triggers', $data) && $data['supported_triggers'] !== null) {
            $values_1 = [];
            foreach ($data['supported_triggers'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setSupportedTriggers($values_1);
        } elseif (\array_key_exists('supported_triggers', $data) && $data['supported_triggers'] === null) {
            $object->setSupportedTriggers(null);
        }
        if (\array_key_exists('supported_copy_by_chunk', $data) && $data['supported_copy_by_chunk'] !== null) {
            $object->setSupportedCopyByChunk($data['supported_copy_by_chunk']);
        } elseif (\array_key_exists('supported_copy_by_chunk', $data) && $data['supported_copy_by_chunk'] === null) {
            $object->setSupportedCopyByChunk(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('type') && null !== $data->getType()) {
            $dataArray['type'] = $data->getType();
        }
        if ($data->isInitialized('description') && null !== $data->getDescription()) {
            $dataArray['description'] = $data->getDescription();
        }
        if ($data->isInitialized('supportedResourceFilters') && null !== $data->getSupportedResourceFilters()) {
            $values = [];
            foreach ($data->getSupportedResourceFilters() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['supported_resource_filters'] = $values;
        }
        if ($data->isInitialized('supportedTriggers') && null !== $data->getSupportedTriggers()) {
            $values_1 = [];
            foreach ($data->getSupportedTriggers() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['supported_triggers'] = $values_1;
        }
        if ($data->isInitialized('supportedCopyByChunk') && null !== $data->getSupportedCopyByChunk()) {
            $dataArray['supported_copy_by_chunk'] = $data->getSupportedCopyByChunk();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\RegistryInfo::class => false];
    }
}
