<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ProjectNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\Project::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\Project::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\Project();
        if (\array_key_exists('deleted', $data) && \is_int($data['deleted'])) {
            $data['deleted'] = (bool) $data['deleted'];
        }
        if (\array_key_exists('togglable', $data) && \is_int($data['togglable'])) {
            $data['togglable'] = (bool) $data['togglable'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('project_id', $data) && $data['project_id'] !== null) {
            $object->setProjectId($data['project_id']);
        } elseif (\array_key_exists('project_id', $data) && $data['project_id'] === null) {
            $object->setProjectId(null);
        }
        if (\array_key_exists('owner_id', $data) && $data['owner_id'] !== null) {
            $object->setOwnerId($data['owner_id']);
        } elseif (\array_key_exists('owner_id', $data) && $data['owner_id'] === null) {
            $object->setOwnerId(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('registry_id', $data) && $data['registry_id'] !== null) {
            $object->setRegistryId($data['registry_id']);
        } elseif (\array_key_exists('registry_id', $data) && $data['registry_id'] === null) {
            $object->setRegistryId(null);
        }
        if (\array_key_exists('creation_time', $data) && $data['creation_time'] !== null) {
            $object->setCreationTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['creation_time']));
        } elseif (\array_key_exists('creation_time', $data) && $data['creation_time'] === null) {
            $object->setCreationTime(null);
        }
        if (\array_key_exists('update_time', $data) && $data['update_time'] !== null) {
            $object->setUpdateTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['update_time']));
        } elseif (\array_key_exists('update_time', $data) && $data['update_time'] === null) {
            $object->setUpdateTime(null);
        }
        if (\array_key_exists('deleted', $data) && $data['deleted'] !== null) {
            $object->setDeleted($data['deleted']);
        } elseif (\array_key_exists('deleted', $data) && $data['deleted'] === null) {
            $object->setDeleted(null);
        }
        if (\array_key_exists('owner_name', $data) && $data['owner_name'] !== null) {
            $object->setOwnerName($data['owner_name']);
        } elseif (\array_key_exists('owner_name', $data) && $data['owner_name'] === null) {
            $object->setOwnerName(null);
        }
        if (\array_key_exists('togglable', $data) && $data['togglable'] !== null) {
            $object->setTogglable($data['togglable']);
        } elseif (\array_key_exists('togglable', $data) && $data['togglable'] === null) {
            $object->setTogglable(null);
        }
        if (\array_key_exists('current_user_role_id', $data) && $data['current_user_role_id'] !== null) {
            $object->setCurrentUserRoleId($data['current_user_role_id']);
        } elseif (\array_key_exists('current_user_role_id', $data) && $data['current_user_role_id'] === null) {
            $object->setCurrentUserRoleId(null);
        }
        if (\array_key_exists('current_user_role_ids', $data) && $data['current_user_role_ids'] !== null) {
            $values = [];
            foreach ($data['current_user_role_ids'] as $value) {
                $values[] = $value;
            }
            $object->setCurrentUserRoleIds($values);
        } elseif (\array_key_exists('current_user_role_ids', $data) && $data['current_user_role_ids'] === null) {
            $object->setCurrentUserRoleIds(null);
        }
        if (\array_key_exists('repo_count', $data) && $data['repo_count'] !== null) {
            $object->setRepoCount($data['repo_count']);
        } elseif (\array_key_exists('repo_count', $data) && $data['repo_count'] === null) {
            $object->setRepoCount(null);
        }
        if (\array_key_exists('metadata', $data) && $data['metadata'] !== null) {
            $object->setMetadata($this->denormalizer->denormalize($data['metadata'], \Scottbass3\Harbor\Api\Model\ProjectMetadata::class, 'json', $context));
        } elseif (\array_key_exists('metadata', $data) && $data['metadata'] === null) {
            $object->setMetadata(null);
        }
        if (\array_key_exists('cve_allowlist', $data) && $data['cve_allowlist'] !== null) {
            $object->setCveAllowlist($this->denormalizer->denormalize($data['cve_allowlist'], \Scottbass3\Harbor\Api\Model\CVEAllowlist::class, 'json', $context));
        } elseif (\array_key_exists('cve_allowlist', $data) && $data['cve_allowlist'] === null) {
            $object->setCveAllowlist(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('projectId') && null !== $data->getProjectId()) {
            $dataArray['project_id'] = $data->getProjectId();
        }
        if ($data->isInitialized('ownerId') && null !== $data->getOwnerId()) {
            $dataArray['owner_id'] = $data->getOwnerId();
        }
        if ($data->isInitialized('name') && null !== $data->getName()) {
            $dataArray['name'] = $data->getName();
        }
        if ($data->isInitialized('registryId') && null !== $data->getRegistryId()) {
            $dataArray['registry_id'] = $data->getRegistryId();
        }
        if ($data->isInitialized('creationTime') && null !== $data->getCreationTime()) {
            $dataArray['creation_time'] = $data->getCreationTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('updateTime') && null !== $data->getUpdateTime()) {
            $dataArray['update_time'] = $data->getUpdateTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('deleted') && null !== $data->getDeleted()) {
            $dataArray['deleted'] = $data->getDeleted();
        }
        if ($data->isInitialized('ownerName') && null !== $data->getOwnerName()) {
            $dataArray['owner_name'] = $data->getOwnerName();
        }
        if ($data->isInitialized('togglable') && null !== $data->getTogglable()) {
            $dataArray['togglable'] = $data->getTogglable();
        }
        if ($data->isInitialized('currentUserRoleId') && null !== $data->getCurrentUserRoleId()) {
            $dataArray['current_user_role_id'] = $data->getCurrentUserRoleId();
        }
        if ($data->isInitialized('currentUserRoleIds') && null !== $data->getCurrentUserRoleIds()) {
            $values = [];
            foreach ($data->getCurrentUserRoleIds() as $value) {
                $values[] = $value;
            }
            $dataArray['current_user_role_ids'] = $values;
        }
        if ($data->isInitialized('repoCount') && null !== $data->getRepoCount()) {
            $dataArray['repo_count'] = $data->getRepoCount();
        }
        if ($data->isInitialized('metadata') && null !== $data->getMetadata()) {
            $dataArray['metadata'] = $this->normalizer->normalize($data->getMetadata(), 'json', $context);
        }
        if ($data->isInitialized('cveAllowlist') && null !== $data->getCveAllowlist()) {
            $dataArray['cve_allowlist'] = $this->normalizer->normalize($data->getCveAllowlist(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\Project::class => false];
    }
}
