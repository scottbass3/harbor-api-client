<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AccessoryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\Accessory::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\Accessory::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\Accessory();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data) && $data['id'] !== null) {
            $object->setId($data['id']);
        } elseif (\array_key_exists('id', $data) && $data['id'] === null) {
            $object->setId(null);
        }
        if (\array_key_exists('artifact_id', $data) && $data['artifact_id'] !== null) {
            $object->setArtifactId($data['artifact_id']);
        } elseif (\array_key_exists('artifact_id', $data) && $data['artifact_id'] === null) {
            $object->setArtifactId(null);
        }
        if (\array_key_exists('subject_artifact_id', $data) && $data['subject_artifact_id'] !== null) {
            $object->setSubjectArtifactId($data['subject_artifact_id']);
        } elseif (\array_key_exists('subject_artifact_id', $data) && $data['subject_artifact_id'] === null) {
            $object->setSubjectArtifactId(null);
        }
        if (\array_key_exists('subject_artifact_digest', $data) && $data['subject_artifact_digest'] !== null) {
            $object->setSubjectArtifactDigest($data['subject_artifact_digest']);
        } elseif (\array_key_exists('subject_artifact_digest', $data) && $data['subject_artifact_digest'] === null) {
            $object->setSubjectArtifactDigest(null);
        }
        if (\array_key_exists('subject_artifact_repo', $data) && $data['subject_artifact_repo'] !== null) {
            $object->setSubjectArtifactRepo($data['subject_artifact_repo']);
        } elseif (\array_key_exists('subject_artifact_repo', $data) && $data['subject_artifact_repo'] === null) {
            $object->setSubjectArtifactRepo(null);
        }
        if (\array_key_exists('size', $data) && $data['size'] !== null) {
            $object->setSize($data['size']);
        } elseif (\array_key_exists('size', $data) && $data['size'] === null) {
            $object->setSize(null);
        }
        if (\array_key_exists('digest', $data) && $data['digest'] !== null) {
            $object->setDigest($data['digest']);
        } elseif (\array_key_exists('digest', $data) && $data['digest'] === null) {
            $object->setDigest(null);
        }
        if (\array_key_exists('type', $data) && $data['type'] !== null) {
            $object->setType($data['type']);
        } elseif (\array_key_exists('type', $data) && $data['type'] === null) {
            $object->setType(null);
        }
        if (\array_key_exists('icon', $data) && $data['icon'] !== null) {
            $object->setIcon($data['icon']);
        } elseif (\array_key_exists('icon', $data) && $data['icon'] === null) {
            $object->setIcon(null);
        }
        if (\array_key_exists('creation_time', $data) && $data['creation_time'] !== null) {
            $object->setCreationTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['creation_time']));
        } elseif (\array_key_exists('creation_time', $data) && $data['creation_time'] === null) {
            $object->setCreationTime(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('artifactId') && null !== $data->getArtifactId()) {
            $dataArray['artifact_id'] = $data->getArtifactId();
        }
        if ($data->isInitialized('subjectArtifactId') && null !== $data->getSubjectArtifactId()) {
            $dataArray['subject_artifact_id'] = $data->getSubjectArtifactId();
        }
        if ($data->isInitialized('subjectArtifactDigest') && null !== $data->getSubjectArtifactDigest()) {
            $dataArray['subject_artifact_digest'] = $data->getSubjectArtifactDigest();
        }
        if ($data->isInitialized('subjectArtifactRepo') && null !== $data->getSubjectArtifactRepo()) {
            $dataArray['subject_artifact_repo'] = $data->getSubjectArtifactRepo();
        }
        if ($data->isInitialized('size') && null !== $data->getSize()) {
            $dataArray['size'] = $data->getSize();
        }
        if ($data->isInitialized('digest') && null !== $data->getDigest()) {
            $dataArray['digest'] = $data->getDigest();
        }
        if ($data->isInitialized('type') && null !== $data->getType()) {
            $dataArray['type'] = $data->getType();
        }
        if ($data->isInitialized('icon') && null !== $data->getIcon()) {
            $dataArray['icon'] = $data->getIcon();
        }
        if ($data->isInitialized('creationTime') && null !== $data->getCreationTime()) {
            $dataArray['creation_time'] = $data->getCreationTime()->format('Y-m-d\TH:i:s.vp');
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\Accessory::class => false];
    }
}
