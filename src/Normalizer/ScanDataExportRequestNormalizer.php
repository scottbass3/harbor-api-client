<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ScanDataExportRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\ScanDataExportRequest::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\ScanDataExportRequest::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\ScanDataExportRequest();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('job_name', $data) && $data['job_name'] !== null) {
            $object->setJobName($data['job_name']);
        } elseif (\array_key_exists('job_name', $data) && $data['job_name'] === null) {
            $object->setJobName(null);
        }
        if (\array_key_exists('projects', $data) && $data['projects'] !== null) {
            $values = [];
            foreach ($data['projects'] as $value) {
                $values[] = $value;
            }
            $object->setProjects($values);
        } elseif (\array_key_exists('projects', $data) && $data['projects'] === null) {
            $object->setProjects(null);
        }
        if (\array_key_exists('labels', $data) && $data['labels'] !== null) {
            $values_1 = [];
            foreach ($data['labels'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setLabels($values_1);
        } elseif (\array_key_exists('labels', $data) && $data['labels'] === null) {
            $object->setLabels(null);
        }
        if (\array_key_exists('repositories', $data) && $data['repositories'] !== null) {
            $object->setRepositories($data['repositories']);
        } elseif (\array_key_exists('repositories', $data) && $data['repositories'] === null) {
            $object->setRepositories(null);
        }
        if (\array_key_exists('cveIds', $data) && $data['cveIds'] !== null) {
            $object->setCveIds($data['cveIds']);
        } elseif (\array_key_exists('cveIds', $data) && $data['cveIds'] === null) {
            $object->setCveIds(null);
        }
        if (\array_key_exists('tags', $data) && $data['tags'] !== null) {
            $object->setTags($data['tags']);
        } elseif (\array_key_exists('tags', $data) && $data['tags'] === null) {
            $object->setTags(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('jobName') && null !== $data->getJobName()) {
            $dataArray['job_name'] = $data->getJobName();
        }
        if ($data->isInitialized('projects') && null !== $data->getProjects()) {
            $values = [];
            foreach ($data->getProjects() as $value) {
                $values[] = $value;
            }
            $dataArray['projects'] = $values;
        }
        if ($data->isInitialized('labels') && null !== $data->getLabels()) {
            $values_1 = [];
            foreach ($data->getLabels() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['labels'] = $values_1;
        }
        if ($data->isInitialized('repositories') && null !== $data->getRepositories()) {
            $dataArray['repositories'] = $data->getRepositories();
        }
        if ($data->isInitialized('cveIds') && null !== $data->getCveIds()) {
            $dataArray['cveIds'] = $data->getCveIds();
        }
        if ($data->isInitialized('tags') && null !== $data->getTags()) {
            $dataArray['tags'] = $data->getTags();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\ScanDataExportRequest::class => false];
    }
}
