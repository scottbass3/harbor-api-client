<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ScannerRegistrationReqNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\ScannerRegistrationReq::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\ScannerRegistrationReq::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\ScannerRegistrationReq();
        if (\array_key_exists('skip_certVerify', $data) && \is_int($data['skip_certVerify'])) {
            $data['skip_certVerify'] = (bool) $data['skip_certVerify'];
        }
        if (\array_key_exists('use_internal_addr', $data) && \is_int($data['use_internal_addr'])) {
            $data['use_internal_addr'] = (bool) $data['use_internal_addr'];
        }
        if (\array_key_exists('disabled', $data) && \is_int($data['disabled'])) {
            $data['disabled'] = (bool) $data['disabled'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('description', $data) && $data['description'] !== null) {
            $object->setDescription($data['description']);
        } elseif (\array_key_exists('description', $data) && $data['description'] === null) {
            $object->setDescription(null);
        }
        if (\array_key_exists('url', $data) && $data['url'] !== null) {
            $object->setUrl($data['url']);
        } elseif (\array_key_exists('url', $data) && $data['url'] === null) {
            $object->setUrl(null);
        }
        if (\array_key_exists('auth', $data) && $data['auth'] !== null) {
            $object->setAuth($data['auth']);
        } elseif (\array_key_exists('auth', $data) && $data['auth'] === null) {
            $object->setAuth(null);
        }
        if (\array_key_exists('access_credential', $data) && $data['access_credential'] !== null) {
            $object->setAccessCredential($data['access_credential']);
        } elseif (\array_key_exists('access_credential', $data) && $data['access_credential'] === null) {
            $object->setAccessCredential(null);
        }
        if (\array_key_exists('skip_certVerify', $data) && $data['skip_certVerify'] !== null) {
            $object->setSkipCertVerify($data['skip_certVerify']);
        } elseif (\array_key_exists('skip_certVerify', $data) && $data['skip_certVerify'] === null) {
            $object->setSkipCertVerify(null);
        }
        if (\array_key_exists('use_internal_addr', $data) && $data['use_internal_addr'] !== null) {
            $object->setUseInternalAddr($data['use_internal_addr']);
        } elseif (\array_key_exists('use_internal_addr', $data) && $data['use_internal_addr'] === null) {
            $object->setUseInternalAddr(null);
        }
        if (\array_key_exists('disabled', $data) && $data['disabled'] !== null) {
            $object->setDisabled($data['disabled']);
        } elseif (\array_key_exists('disabled', $data) && $data['disabled'] === null) {
            $object->setDisabled(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['name'] = $data->getName();
        if ($data->isInitialized('description') && null !== $data->getDescription()) {
            $dataArray['description'] = $data->getDescription();
        }
        $dataArray['url'] = $data->getUrl();
        if ($data->isInitialized('auth') && null !== $data->getAuth()) {
            $dataArray['auth'] = $data->getAuth();
        }
        if ($data->isInitialized('accessCredential') && null !== $data->getAccessCredential()) {
            $dataArray['access_credential'] = $data->getAccessCredential();
        }
        if ($data->isInitialized('skipCertVerify') && null !== $data->getSkipCertVerify()) {
            $dataArray['skip_certVerify'] = $data->getSkipCertVerify();
        }
        if ($data->isInitialized('useInternalAddr') && null !== $data->getUseInternalAddr()) {
            $dataArray['use_internal_addr'] = $data->getUseInternalAddr();
        }
        if ($data->isInitialized('disabled') && null !== $data->getDisabled()) {
            $dataArray['disabled'] = $data->getDisabled();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\ScannerRegistrationReq::class => false];
    }
}
