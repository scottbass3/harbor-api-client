<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ProjectSummaryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\ProjectSummary::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\ProjectSummary::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\ProjectSummary();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('repo_count', $data) && $data['repo_count'] !== null) {
            $object->setRepoCount($data['repo_count']);
        } elseif (\array_key_exists('repo_count', $data) && $data['repo_count'] === null) {
            $object->setRepoCount(null);
        }
        if (\array_key_exists('project_admin_count', $data) && $data['project_admin_count'] !== null) {
            $object->setProjectAdminCount($data['project_admin_count']);
        } elseif (\array_key_exists('project_admin_count', $data) && $data['project_admin_count'] === null) {
            $object->setProjectAdminCount(null);
        }
        if (\array_key_exists('maintainer_count', $data) && $data['maintainer_count'] !== null) {
            $object->setMaintainerCount($data['maintainer_count']);
        } elseif (\array_key_exists('maintainer_count', $data) && $data['maintainer_count'] === null) {
            $object->setMaintainerCount(null);
        }
        if (\array_key_exists('developer_count', $data) && $data['developer_count'] !== null) {
            $object->setDeveloperCount($data['developer_count']);
        } elseif (\array_key_exists('developer_count', $data) && $data['developer_count'] === null) {
            $object->setDeveloperCount(null);
        }
        if (\array_key_exists('guest_count', $data) && $data['guest_count'] !== null) {
            $object->setGuestCount($data['guest_count']);
        } elseif (\array_key_exists('guest_count', $data) && $data['guest_count'] === null) {
            $object->setGuestCount(null);
        }
        if (\array_key_exists('limited_guest_count', $data) && $data['limited_guest_count'] !== null) {
            $object->setLimitedGuestCount($data['limited_guest_count']);
        } elseif (\array_key_exists('limited_guest_count', $data) && $data['limited_guest_count'] === null) {
            $object->setLimitedGuestCount(null);
        }
        if (\array_key_exists('quota', $data) && $data['quota'] !== null) {
            $object->setQuota($this->denormalizer->denormalize($data['quota'], \Flownative\Harbor\Api\Model\ProjectSummaryQuota::class, 'json', $context));
        } elseif (\array_key_exists('quota', $data) && $data['quota'] === null) {
            $object->setQuota(null);
        }
        if (\array_key_exists('registry', $data) && $data['registry'] !== null) {
            $object->setRegistry($this->denormalizer->denormalize($data['registry'], \Flownative\Harbor\Api\Model\Registry::class, 'json', $context));
        } elseif (\array_key_exists('registry', $data) && $data['registry'] === null) {
            $object->setRegistry(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('repoCount') && null !== $data->getRepoCount()) {
            $dataArray['repo_count'] = $data->getRepoCount();
        }
        if ($data->isInitialized('projectAdminCount') && null !== $data->getProjectAdminCount()) {
            $dataArray['project_admin_count'] = $data->getProjectAdminCount();
        }
        if ($data->isInitialized('maintainerCount') && null !== $data->getMaintainerCount()) {
            $dataArray['maintainer_count'] = $data->getMaintainerCount();
        }
        if ($data->isInitialized('developerCount') && null !== $data->getDeveloperCount()) {
            $dataArray['developer_count'] = $data->getDeveloperCount();
        }
        if ($data->isInitialized('guestCount') && null !== $data->getGuestCount()) {
            $dataArray['guest_count'] = $data->getGuestCount();
        }
        if ($data->isInitialized('limitedGuestCount') && null !== $data->getLimitedGuestCount()) {
            $dataArray['limited_guest_count'] = $data->getLimitedGuestCount();
        }
        if ($data->isInitialized('quota') && null !== $data->getQuota()) {
            $dataArray['quota'] = $this->normalizer->normalize($data->getQuota(), 'json', $context);
        }
        if ($data->isInitialized('registry') && null !== $data->getRegistry()) {
            $dataArray['registry'] = $this->normalizer->normalize($data->getRegistry(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\ProjectSummary::class => false];
    }
}
