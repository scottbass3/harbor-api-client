<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ConfigurationsResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\ConfigurationsResponse::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\ConfigurationsResponse::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\ConfigurationsResponse();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('auth_mode', $data) && $data['auth_mode'] !== null) {
            $object->setAuthMode($this->denormalizer->denormalize($data['auth_mode'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('auth_mode', $data) && $data['auth_mode'] === null) {
            $object->setAuthMode(null);
        }
        if (\array_key_exists('primary_auth_mode', $data) && $data['primary_auth_mode'] !== null) {
            $object->setPrimaryAuthMode($this->denormalizer->denormalize($data['primary_auth_mode'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('primary_auth_mode', $data) && $data['primary_auth_mode'] === null) {
            $object->setPrimaryAuthMode(null);
        }
        if (\array_key_exists('ldap_base_dn', $data) && $data['ldap_base_dn'] !== null) {
            $object->setLdapBaseDn($this->denormalizer->denormalize($data['ldap_base_dn'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_base_dn', $data) && $data['ldap_base_dn'] === null) {
            $object->setLdapBaseDn(null);
        }
        if (\array_key_exists('ldap_filter', $data) && $data['ldap_filter'] !== null) {
            $object->setLdapFilter($this->denormalizer->denormalize($data['ldap_filter'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_filter', $data) && $data['ldap_filter'] === null) {
            $object->setLdapFilter(null);
        }
        if (\array_key_exists('ldap_group_base_dn', $data) && $data['ldap_group_base_dn'] !== null) {
            $object->setLdapGroupBaseDn($this->denormalizer->denormalize($data['ldap_group_base_dn'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_group_base_dn', $data) && $data['ldap_group_base_dn'] === null) {
            $object->setLdapGroupBaseDn(null);
        }
        if (\array_key_exists('ldap_group_admin_dn', $data) && $data['ldap_group_admin_dn'] !== null) {
            $object->setLdapGroupAdminDn($this->denormalizer->denormalize($data['ldap_group_admin_dn'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_group_admin_dn', $data) && $data['ldap_group_admin_dn'] === null) {
            $object->setLdapGroupAdminDn(null);
        }
        if (\array_key_exists('ldap_group_attribute_name', $data) && $data['ldap_group_attribute_name'] !== null) {
            $object->setLdapGroupAttributeName($this->denormalizer->denormalize($data['ldap_group_attribute_name'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_group_attribute_name', $data) && $data['ldap_group_attribute_name'] === null) {
            $object->setLdapGroupAttributeName(null);
        }
        if (\array_key_exists('ldap_group_search_filter', $data) && $data['ldap_group_search_filter'] !== null) {
            $object->setLdapGroupSearchFilter($this->denormalizer->denormalize($data['ldap_group_search_filter'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_group_search_filter', $data) && $data['ldap_group_search_filter'] === null) {
            $object->setLdapGroupSearchFilter(null);
        }
        if (\array_key_exists('ldap_group_search_scope', $data) && $data['ldap_group_search_scope'] !== null) {
            $object->setLdapGroupSearchScope($this->denormalizer->denormalize($data['ldap_group_search_scope'], \Flownative\Harbor\Api\Model\IntegerConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_group_search_scope', $data) && $data['ldap_group_search_scope'] === null) {
            $object->setLdapGroupSearchScope(null);
        }
        if (\array_key_exists('ldap_scope', $data) && $data['ldap_scope'] !== null) {
            $object->setLdapScope($this->denormalizer->denormalize($data['ldap_scope'], \Flownative\Harbor\Api\Model\IntegerConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_scope', $data) && $data['ldap_scope'] === null) {
            $object->setLdapScope(null);
        }
        if (\array_key_exists('ldap_search_dn', $data) && $data['ldap_search_dn'] !== null) {
            $object->setLdapSearchDn($this->denormalizer->denormalize($data['ldap_search_dn'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_search_dn', $data) && $data['ldap_search_dn'] === null) {
            $object->setLdapSearchDn(null);
        }
        if (\array_key_exists('ldap_timeout', $data) && $data['ldap_timeout'] !== null) {
            $object->setLdapTimeout($this->denormalizer->denormalize($data['ldap_timeout'], \Flownative\Harbor\Api\Model\IntegerConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_timeout', $data) && $data['ldap_timeout'] === null) {
            $object->setLdapTimeout(null);
        }
        if (\array_key_exists('ldap_uid', $data) && $data['ldap_uid'] !== null) {
            $object->setLdapUid($this->denormalizer->denormalize($data['ldap_uid'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_uid', $data) && $data['ldap_uid'] === null) {
            $object->setLdapUid(null);
        }
        if (\array_key_exists('ldap_url', $data) && $data['ldap_url'] !== null) {
            $object->setLdapUrl($this->denormalizer->denormalize($data['ldap_url'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_url', $data) && $data['ldap_url'] === null) {
            $object->setLdapUrl(null);
        }
        if (\array_key_exists('ldap_verify_cert', $data) && $data['ldap_verify_cert'] !== null) {
            $object->setLdapVerifyCert($this->denormalizer->denormalize($data['ldap_verify_cert'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_verify_cert', $data) && $data['ldap_verify_cert'] === null) {
            $object->setLdapVerifyCert(null);
        }
        if (\array_key_exists('ldap_group_membership_attribute', $data) && $data['ldap_group_membership_attribute'] !== null) {
            $object->setLdapGroupMembershipAttribute($this->denormalizer->denormalize($data['ldap_group_membership_attribute'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('ldap_group_membership_attribute', $data) && $data['ldap_group_membership_attribute'] === null) {
            $object->setLdapGroupMembershipAttribute(null);
        }
        if (\array_key_exists('project_creation_restriction', $data) && $data['project_creation_restriction'] !== null) {
            $object->setProjectCreationRestriction($this->denormalizer->denormalize($data['project_creation_restriction'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('project_creation_restriction', $data) && $data['project_creation_restriction'] === null) {
            $object->setProjectCreationRestriction(null);
        }
        if (\array_key_exists('read_only', $data) && $data['read_only'] !== null) {
            $object->setReadOnly($this->denormalizer->denormalize($data['read_only'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('read_only', $data) && $data['read_only'] === null) {
            $object->setReadOnly(null);
        }
        if (\array_key_exists('self_registration', $data) && $data['self_registration'] !== null) {
            $object->setSelfRegistration($this->denormalizer->denormalize($data['self_registration'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('self_registration', $data) && $data['self_registration'] === null) {
            $object->setSelfRegistration(null);
        }
        if (\array_key_exists('token_expiration', $data) && $data['token_expiration'] !== null) {
            $object->setTokenExpiration($this->denormalizer->denormalize($data['token_expiration'], \Flownative\Harbor\Api\Model\IntegerConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('token_expiration', $data) && $data['token_expiration'] === null) {
            $object->setTokenExpiration(null);
        }
        if (\array_key_exists('uaa_client_id', $data) && $data['uaa_client_id'] !== null) {
            $object->setUaaClientId($this->denormalizer->denormalize($data['uaa_client_id'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('uaa_client_id', $data) && $data['uaa_client_id'] === null) {
            $object->setUaaClientId(null);
        }
        if (\array_key_exists('uaa_client_secret', $data) && $data['uaa_client_secret'] !== null) {
            $object->setUaaClientSecret($this->denormalizer->denormalize($data['uaa_client_secret'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('uaa_client_secret', $data) && $data['uaa_client_secret'] === null) {
            $object->setUaaClientSecret(null);
        }
        if (\array_key_exists('uaa_endpoint', $data) && $data['uaa_endpoint'] !== null) {
            $object->setUaaEndpoint($this->denormalizer->denormalize($data['uaa_endpoint'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('uaa_endpoint', $data) && $data['uaa_endpoint'] === null) {
            $object->setUaaEndpoint(null);
        }
        if (\array_key_exists('uaa_verify_cert', $data) && $data['uaa_verify_cert'] !== null) {
            $object->setUaaVerifyCert($this->denormalizer->denormalize($data['uaa_verify_cert'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('uaa_verify_cert', $data) && $data['uaa_verify_cert'] === null) {
            $object->setUaaVerifyCert(null);
        }
        if (\array_key_exists('http_authproxy_endpoint', $data) && $data['http_authproxy_endpoint'] !== null) {
            $object->setHttpAuthproxyEndpoint($this->denormalizer->denormalize($data['http_authproxy_endpoint'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('http_authproxy_endpoint', $data) && $data['http_authproxy_endpoint'] === null) {
            $object->setHttpAuthproxyEndpoint(null);
        }
        if (\array_key_exists('http_authproxy_tokenreview_endpoint', $data) && $data['http_authproxy_tokenreview_endpoint'] !== null) {
            $object->setHttpAuthproxyTokenreviewEndpoint($this->denormalizer->denormalize($data['http_authproxy_tokenreview_endpoint'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('http_authproxy_tokenreview_endpoint', $data) && $data['http_authproxy_tokenreview_endpoint'] === null) {
            $object->setHttpAuthproxyTokenreviewEndpoint(null);
        }
        if (\array_key_exists('http_authproxy_admin_groups', $data) && $data['http_authproxy_admin_groups'] !== null) {
            $object->setHttpAuthproxyAdminGroups($this->denormalizer->denormalize($data['http_authproxy_admin_groups'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('http_authproxy_admin_groups', $data) && $data['http_authproxy_admin_groups'] === null) {
            $object->setHttpAuthproxyAdminGroups(null);
        }
        if (\array_key_exists('http_authproxy_admin_usernames', $data) && $data['http_authproxy_admin_usernames'] !== null) {
            $object->setHttpAuthproxyAdminUsernames($this->denormalizer->denormalize($data['http_authproxy_admin_usernames'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('http_authproxy_admin_usernames', $data) && $data['http_authproxy_admin_usernames'] === null) {
            $object->setHttpAuthproxyAdminUsernames(null);
        }
        if (\array_key_exists('http_authproxy_verify_cert', $data) && $data['http_authproxy_verify_cert'] !== null) {
            $object->setHttpAuthproxyVerifyCert($this->denormalizer->denormalize($data['http_authproxy_verify_cert'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('http_authproxy_verify_cert', $data) && $data['http_authproxy_verify_cert'] === null) {
            $object->setHttpAuthproxyVerifyCert(null);
        }
        if (\array_key_exists('http_authproxy_skip_search', $data) && $data['http_authproxy_skip_search'] !== null) {
            $object->setHttpAuthproxySkipSearch($this->denormalizer->denormalize($data['http_authproxy_skip_search'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('http_authproxy_skip_search', $data) && $data['http_authproxy_skip_search'] === null) {
            $object->setHttpAuthproxySkipSearch(null);
        }
        if (\array_key_exists('http_authproxy_server_certificate', $data) && $data['http_authproxy_server_certificate'] !== null) {
            $object->setHttpAuthproxyServerCertificate($this->denormalizer->denormalize($data['http_authproxy_server_certificate'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('http_authproxy_server_certificate', $data) && $data['http_authproxy_server_certificate'] === null) {
            $object->setHttpAuthproxyServerCertificate(null);
        }
        if (\array_key_exists('oidc_name', $data) && $data['oidc_name'] !== null) {
            $object->setOidcName($this->denormalizer->denormalize($data['oidc_name'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_name', $data) && $data['oidc_name'] === null) {
            $object->setOidcName(null);
        }
        if (\array_key_exists('oidc_endpoint', $data) && $data['oidc_endpoint'] !== null) {
            $object->setOidcEndpoint($this->denormalizer->denormalize($data['oidc_endpoint'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_endpoint', $data) && $data['oidc_endpoint'] === null) {
            $object->setOidcEndpoint(null);
        }
        if (\array_key_exists('oidc_client_id', $data) && $data['oidc_client_id'] !== null) {
            $object->setOidcClientId($this->denormalizer->denormalize($data['oidc_client_id'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_client_id', $data) && $data['oidc_client_id'] === null) {
            $object->setOidcClientId(null);
        }
        if (\array_key_exists('oidc_groups_claim', $data) && $data['oidc_groups_claim'] !== null) {
            $object->setOidcGroupsClaim($this->denormalizer->denormalize($data['oidc_groups_claim'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_groups_claim', $data) && $data['oidc_groups_claim'] === null) {
            $object->setOidcGroupsClaim(null);
        }
        if (\array_key_exists('oidc_admin_group', $data) && $data['oidc_admin_group'] !== null) {
            $object->setOidcAdminGroup($this->denormalizer->denormalize($data['oidc_admin_group'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_admin_group', $data) && $data['oidc_admin_group'] === null) {
            $object->setOidcAdminGroup(null);
        }
        if (\array_key_exists('oidc_group_filter', $data) && $data['oidc_group_filter'] !== null) {
            $object->setOidcGroupFilter($this->denormalizer->denormalize($data['oidc_group_filter'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_group_filter', $data) && $data['oidc_group_filter'] === null) {
            $object->setOidcGroupFilter(null);
        }
        if (\array_key_exists('oidc_scope', $data) && $data['oidc_scope'] !== null) {
            $object->setOidcScope($this->denormalizer->denormalize($data['oidc_scope'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_scope', $data) && $data['oidc_scope'] === null) {
            $object->setOidcScope(null);
        }
        if (\array_key_exists('oidc_user_claim', $data) && $data['oidc_user_claim'] !== null) {
            $object->setOidcUserClaim($this->denormalizer->denormalize($data['oidc_user_claim'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_user_claim', $data) && $data['oidc_user_claim'] === null) {
            $object->setOidcUserClaim(null);
        }
        if (\array_key_exists('oidc_verify_cert', $data) && $data['oidc_verify_cert'] !== null) {
            $object->setOidcVerifyCert($this->denormalizer->denormalize($data['oidc_verify_cert'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_verify_cert', $data) && $data['oidc_verify_cert'] === null) {
            $object->setOidcVerifyCert(null);
        }
        if (\array_key_exists('oidc_auto_onboard', $data) && $data['oidc_auto_onboard'] !== null) {
            $object->setOidcAutoOnboard($this->denormalizer->denormalize($data['oidc_auto_onboard'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_auto_onboard', $data) && $data['oidc_auto_onboard'] === null) {
            $object->setOidcAutoOnboard(null);
        }
        if (\array_key_exists('oidc_extra_redirect_parms', $data) && $data['oidc_extra_redirect_parms'] !== null) {
            $object->setOidcExtraRedirectParms($this->denormalizer->denormalize($data['oidc_extra_redirect_parms'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('oidc_extra_redirect_parms', $data) && $data['oidc_extra_redirect_parms'] === null) {
            $object->setOidcExtraRedirectParms(null);
        }
        if (\array_key_exists('robot_token_duration', $data) && $data['robot_token_duration'] !== null) {
            $object->setRobotTokenDuration($this->denormalizer->denormalize($data['robot_token_duration'], \Flownative\Harbor\Api\Model\IntegerConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('robot_token_duration', $data) && $data['robot_token_duration'] === null) {
            $object->setRobotTokenDuration(null);
        }
        if (\array_key_exists('robot_name_prefix', $data) && $data['robot_name_prefix'] !== null) {
            $object->setRobotNamePrefix($this->denormalizer->denormalize($data['robot_name_prefix'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('robot_name_prefix', $data) && $data['robot_name_prefix'] === null) {
            $object->setRobotNamePrefix(null);
        }
        if (\array_key_exists('notification_enable', $data) && $data['notification_enable'] !== null) {
            $object->setNotificationEnable($this->denormalizer->denormalize($data['notification_enable'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('notification_enable', $data) && $data['notification_enable'] === null) {
            $object->setNotificationEnable(null);
        }
        if (\array_key_exists('quota_per_project_enable', $data) && $data['quota_per_project_enable'] !== null) {
            $object->setQuotaPerProjectEnable($this->denormalizer->denormalize($data['quota_per_project_enable'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('quota_per_project_enable', $data) && $data['quota_per_project_enable'] === null) {
            $object->setQuotaPerProjectEnable(null);
        }
        if (\array_key_exists('storage_per_project', $data) && $data['storage_per_project'] !== null) {
            $object->setStoragePerProject($this->denormalizer->denormalize($data['storage_per_project'], \Flownative\Harbor\Api\Model\IntegerConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('storage_per_project', $data) && $data['storage_per_project'] === null) {
            $object->setStoragePerProject(null);
        }
        if (\array_key_exists('audit_log_forward_endpoint', $data) && $data['audit_log_forward_endpoint'] !== null) {
            $object->setAuditLogForwardEndpoint($this->denormalizer->denormalize($data['audit_log_forward_endpoint'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('audit_log_forward_endpoint', $data) && $data['audit_log_forward_endpoint'] === null) {
            $object->setAuditLogForwardEndpoint(null);
        }
        if (\array_key_exists('skip_audit_log_database', $data) && $data['skip_audit_log_database'] !== null) {
            $object->setSkipAuditLogDatabase($this->denormalizer->denormalize($data['skip_audit_log_database'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('skip_audit_log_database', $data) && $data['skip_audit_log_database'] === null) {
            $object->setSkipAuditLogDatabase(null);
        }
        if (\array_key_exists('scanner_skip_update_pulltime', $data) && $data['scanner_skip_update_pulltime'] !== null) {
            $object->setScannerSkipUpdatePulltime($this->denormalizer->denormalize($data['scanner_skip_update_pulltime'], \Flownative\Harbor\Api\Model\BoolConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('scanner_skip_update_pulltime', $data) && $data['scanner_skip_update_pulltime'] === null) {
            $object->setScannerSkipUpdatePulltime(null);
        }
        if (\array_key_exists('scan_all_policy', $data) && $data['scan_all_policy'] !== null) {
            $object->setScanAllPolicy($this->denormalizer->denormalize($data['scan_all_policy'], \Flownative\Harbor\Api\Model\ConfigurationsResponseScanAllPolicy::class, 'json', $context));
        } elseif (\array_key_exists('scan_all_policy', $data) && $data['scan_all_policy'] === null) {
            $object->setScanAllPolicy(null);
        }
        if (\array_key_exists('session_timeout', $data) && $data['session_timeout'] !== null) {
            $object->setSessionTimeout($this->denormalizer->denormalize($data['session_timeout'], \Flownative\Harbor\Api\Model\IntegerConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('session_timeout', $data) && $data['session_timeout'] === null) {
            $object->setSessionTimeout(null);
        }
        if (\array_key_exists('banner_message', $data) && $data['banner_message'] !== null) {
            $object->setBannerMessage($this->denormalizer->denormalize($data['banner_message'], \Flownative\Harbor\Api\Model\StringConfigItem::class, 'json', $context));
        } elseif (\array_key_exists('banner_message', $data) && $data['banner_message'] === null) {
            $object->setBannerMessage(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('authMode') && null !== $data->getAuthMode()) {
            $dataArray['auth_mode'] = $this->normalizer->normalize($data->getAuthMode(), 'json', $context);
        }
        if ($data->isInitialized('primaryAuthMode') && null !== $data->getPrimaryAuthMode()) {
            $dataArray['primary_auth_mode'] = $this->normalizer->normalize($data->getPrimaryAuthMode(), 'json', $context);
        }
        if ($data->isInitialized('ldapBaseDn') && null !== $data->getLdapBaseDn()) {
            $dataArray['ldap_base_dn'] = $this->normalizer->normalize($data->getLdapBaseDn(), 'json', $context);
        }
        if ($data->isInitialized('ldapFilter') && null !== $data->getLdapFilter()) {
            $dataArray['ldap_filter'] = $this->normalizer->normalize($data->getLdapFilter(), 'json', $context);
        }
        if ($data->isInitialized('ldapGroupBaseDn') && null !== $data->getLdapGroupBaseDn()) {
            $dataArray['ldap_group_base_dn'] = $this->normalizer->normalize($data->getLdapGroupBaseDn(), 'json', $context);
        }
        if ($data->isInitialized('ldapGroupAdminDn') && null !== $data->getLdapGroupAdminDn()) {
            $dataArray['ldap_group_admin_dn'] = $this->normalizer->normalize($data->getLdapGroupAdminDn(), 'json', $context);
        }
        if ($data->isInitialized('ldapGroupAttributeName') && null !== $data->getLdapGroupAttributeName()) {
            $dataArray['ldap_group_attribute_name'] = $this->normalizer->normalize($data->getLdapGroupAttributeName(), 'json', $context);
        }
        if ($data->isInitialized('ldapGroupSearchFilter') && null !== $data->getLdapGroupSearchFilter()) {
            $dataArray['ldap_group_search_filter'] = $this->normalizer->normalize($data->getLdapGroupSearchFilter(), 'json', $context);
        }
        if ($data->isInitialized('ldapGroupSearchScope') && null !== $data->getLdapGroupSearchScope()) {
            $dataArray['ldap_group_search_scope'] = $this->normalizer->normalize($data->getLdapGroupSearchScope(), 'json', $context);
        }
        if ($data->isInitialized('ldapScope') && null !== $data->getLdapScope()) {
            $dataArray['ldap_scope'] = $this->normalizer->normalize($data->getLdapScope(), 'json', $context);
        }
        if ($data->isInitialized('ldapSearchDn') && null !== $data->getLdapSearchDn()) {
            $dataArray['ldap_search_dn'] = $this->normalizer->normalize($data->getLdapSearchDn(), 'json', $context);
        }
        if ($data->isInitialized('ldapTimeout') && null !== $data->getLdapTimeout()) {
            $dataArray['ldap_timeout'] = $this->normalizer->normalize($data->getLdapTimeout(), 'json', $context);
        }
        if ($data->isInitialized('ldapUid') && null !== $data->getLdapUid()) {
            $dataArray['ldap_uid'] = $this->normalizer->normalize($data->getLdapUid(), 'json', $context);
        }
        if ($data->isInitialized('ldapUrl') && null !== $data->getLdapUrl()) {
            $dataArray['ldap_url'] = $this->normalizer->normalize($data->getLdapUrl(), 'json', $context);
        }
        if ($data->isInitialized('ldapVerifyCert') && null !== $data->getLdapVerifyCert()) {
            $dataArray['ldap_verify_cert'] = $this->normalizer->normalize($data->getLdapVerifyCert(), 'json', $context);
        }
        if ($data->isInitialized('ldapGroupMembershipAttribute') && null !== $data->getLdapGroupMembershipAttribute()) {
            $dataArray['ldap_group_membership_attribute'] = $this->normalizer->normalize($data->getLdapGroupMembershipAttribute(), 'json', $context);
        }
        if ($data->isInitialized('projectCreationRestriction') && null !== $data->getProjectCreationRestriction()) {
            $dataArray['project_creation_restriction'] = $this->normalizer->normalize($data->getProjectCreationRestriction(), 'json', $context);
        }
        if ($data->isInitialized('readOnly') && null !== $data->getReadOnly()) {
            $dataArray['read_only'] = $this->normalizer->normalize($data->getReadOnly(), 'json', $context);
        }
        if ($data->isInitialized('selfRegistration') && null !== $data->getSelfRegistration()) {
            $dataArray['self_registration'] = $this->normalizer->normalize($data->getSelfRegistration(), 'json', $context);
        }
        if ($data->isInitialized('tokenExpiration') && null !== $data->getTokenExpiration()) {
            $dataArray['token_expiration'] = $this->normalizer->normalize($data->getTokenExpiration(), 'json', $context);
        }
        if ($data->isInitialized('uaaClientId') && null !== $data->getUaaClientId()) {
            $dataArray['uaa_client_id'] = $this->normalizer->normalize($data->getUaaClientId(), 'json', $context);
        }
        if ($data->isInitialized('uaaClientSecret') && null !== $data->getUaaClientSecret()) {
            $dataArray['uaa_client_secret'] = $this->normalizer->normalize($data->getUaaClientSecret(), 'json', $context);
        }
        if ($data->isInitialized('uaaEndpoint') && null !== $data->getUaaEndpoint()) {
            $dataArray['uaa_endpoint'] = $this->normalizer->normalize($data->getUaaEndpoint(), 'json', $context);
        }
        if ($data->isInitialized('uaaVerifyCert') && null !== $data->getUaaVerifyCert()) {
            $dataArray['uaa_verify_cert'] = $this->normalizer->normalize($data->getUaaVerifyCert(), 'json', $context);
        }
        if ($data->isInitialized('httpAuthproxyEndpoint') && null !== $data->getHttpAuthproxyEndpoint()) {
            $dataArray['http_authproxy_endpoint'] = $this->normalizer->normalize($data->getHttpAuthproxyEndpoint(), 'json', $context);
        }
        if ($data->isInitialized('httpAuthproxyTokenreviewEndpoint') && null !== $data->getHttpAuthproxyTokenreviewEndpoint()) {
            $dataArray['http_authproxy_tokenreview_endpoint'] = $this->normalizer->normalize($data->getHttpAuthproxyTokenreviewEndpoint(), 'json', $context);
        }
        if ($data->isInitialized('httpAuthproxyAdminGroups') && null !== $data->getHttpAuthproxyAdminGroups()) {
            $dataArray['http_authproxy_admin_groups'] = $this->normalizer->normalize($data->getHttpAuthproxyAdminGroups(), 'json', $context);
        }
        if ($data->isInitialized('httpAuthproxyAdminUsernames') && null !== $data->getHttpAuthproxyAdminUsernames()) {
            $dataArray['http_authproxy_admin_usernames'] = $this->normalizer->normalize($data->getHttpAuthproxyAdminUsernames(), 'json', $context);
        }
        if ($data->isInitialized('httpAuthproxyVerifyCert') && null !== $data->getHttpAuthproxyVerifyCert()) {
            $dataArray['http_authproxy_verify_cert'] = $this->normalizer->normalize($data->getHttpAuthproxyVerifyCert(), 'json', $context);
        }
        if ($data->isInitialized('httpAuthproxySkipSearch') && null !== $data->getHttpAuthproxySkipSearch()) {
            $dataArray['http_authproxy_skip_search'] = $this->normalizer->normalize($data->getHttpAuthproxySkipSearch(), 'json', $context);
        }
        if ($data->isInitialized('httpAuthproxyServerCertificate') && null !== $data->getHttpAuthproxyServerCertificate()) {
            $dataArray['http_authproxy_server_certificate'] = $this->normalizer->normalize($data->getHttpAuthproxyServerCertificate(), 'json', $context);
        }
        if ($data->isInitialized('oidcName') && null !== $data->getOidcName()) {
            $dataArray['oidc_name'] = $this->normalizer->normalize($data->getOidcName(), 'json', $context);
        }
        if ($data->isInitialized('oidcEndpoint') && null !== $data->getOidcEndpoint()) {
            $dataArray['oidc_endpoint'] = $this->normalizer->normalize($data->getOidcEndpoint(), 'json', $context);
        }
        if ($data->isInitialized('oidcClientId') && null !== $data->getOidcClientId()) {
            $dataArray['oidc_client_id'] = $this->normalizer->normalize($data->getOidcClientId(), 'json', $context);
        }
        if ($data->isInitialized('oidcGroupsClaim') && null !== $data->getOidcGroupsClaim()) {
            $dataArray['oidc_groups_claim'] = $this->normalizer->normalize($data->getOidcGroupsClaim(), 'json', $context);
        }
        if ($data->isInitialized('oidcAdminGroup') && null !== $data->getOidcAdminGroup()) {
            $dataArray['oidc_admin_group'] = $this->normalizer->normalize($data->getOidcAdminGroup(), 'json', $context);
        }
        if ($data->isInitialized('oidcGroupFilter') && null !== $data->getOidcGroupFilter()) {
            $dataArray['oidc_group_filter'] = $this->normalizer->normalize($data->getOidcGroupFilter(), 'json', $context);
        }
        if ($data->isInitialized('oidcScope') && null !== $data->getOidcScope()) {
            $dataArray['oidc_scope'] = $this->normalizer->normalize($data->getOidcScope(), 'json', $context);
        }
        if ($data->isInitialized('oidcUserClaim') && null !== $data->getOidcUserClaim()) {
            $dataArray['oidc_user_claim'] = $this->normalizer->normalize($data->getOidcUserClaim(), 'json', $context);
        }
        if ($data->isInitialized('oidcVerifyCert') && null !== $data->getOidcVerifyCert()) {
            $dataArray['oidc_verify_cert'] = $this->normalizer->normalize($data->getOidcVerifyCert(), 'json', $context);
        }
        if ($data->isInitialized('oidcAutoOnboard') && null !== $data->getOidcAutoOnboard()) {
            $dataArray['oidc_auto_onboard'] = $this->normalizer->normalize($data->getOidcAutoOnboard(), 'json', $context);
        }
        if ($data->isInitialized('oidcExtraRedirectParms') && null !== $data->getOidcExtraRedirectParms()) {
            $dataArray['oidc_extra_redirect_parms'] = $this->normalizer->normalize($data->getOidcExtraRedirectParms(), 'json', $context);
        }
        if ($data->isInitialized('robotTokenDuration') && null !== $data->getRobotTokenDuration()) {
            $dataArray['robot_token_duration'] = $this->normalizer->normalize($data->getRobotTokenDuration(), 'json', $context);
        }
        if ($data->isInitialized('robotNamePrefix') && null !== $data->getRobotNamePrefix()) {
            $dataArray['robot_name_prefix'] = $this->normalizer->normalize($data->getRobotNamePrefix(), 'json', $context);
        }
        if ($data->isInitialized('notificationEnable') && null !== $data->getNotificationEnable()) {
            $dataArray['notification_enable'] = $this->normalizer->normalize($data->getNotificationEnable(), 'json', $context);
        }
        if ($data->isInitialized('quotaPerProjectEnable') && null !== $data->getQuotaPerProjectEnable()) {
            $dataArray['quota_per_project_enable'] = $this->normalizer->normalize($data->getQuotaPerProjectEnable(), 'json', $context);
        }
        if ($data->isInitialized('storagePerProject') && null !== $data->getStoragePerProject()) {
            $dataArray['storage_per_project'] = $this->normalizer->normalize($data->getStoragePerProject(), 'json', $context);
        }
        if ($data->isInitialized('auditLogForwardEndpoint') && null !== $data->getAuditLogForwardEndpoint()) {
            $dataArray['audit_log_forward_endpoint'] = $this->normalizer->normalize($data->getAuditLogForwardEndpoint(), 'json', $context);
        }
        if ($data->isInitialized('skipAuditLogDatabase') && null !== $data->getSkipAuditLogDatabase()) {
            $dataArray['skip_audit_log_database'] = $this->normalizer->normalize($data->getSkipAuditLogDatabase(), 'json', $context);
        }
        if ($data->isInitialized('scannerSkipUpdatePulltime') && null !== $data->getScannerSkipUpdatePulltime()) {
            $dataArray['scanner_skip_update_pulltime'] = $this->normalizer->normalize($data->getScannerSkipUpdatePulltime(), 'json', $context);
        }
        if ($data->isInitialized('scanAllPolicy') && null !== $data->getScanAllPolicy()) {
            $dataArray['scan_all_policy'] = $this->normalizer->normalize($data->getScanAllPolicy(), 'json', $context);
        }
        if ($data->isInitialized('sessionTimeout') && null !== $data->getSessionTimeout()) {
            $dataArray['session_timeout'] = $this->normalizer->normalize($data->getSessionTimeout(), 'json', $context);
        }
        if ($data->isInitialized('bannerMessage') && null !== $data->getBannerMessage()) {
            $dataArray['banner_message'] = $this->normalizer->normalize($data->getBannerMessage(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\ConfigurationsResponse::class => false];
    }
}
