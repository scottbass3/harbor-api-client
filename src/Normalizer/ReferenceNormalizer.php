<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ReferenceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\Reference::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\Reference::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\Reference();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('parent_id', $data) && $data['parent_id'] !== null) {
            $object->setParentId($data['parent_id']);
        } elseif (\array_key_exists('parent_id', $data) && $data['parent_id'] === null) {
            $object->setParentId(null);
        }
        if (\array_key_exists('child_id', $data) && $data['child_id'] !== null) {
            $object->setChildId($data['child_id']);
        } elseif (\array_key_exists('child_id', $data) && $data['child_id'] === null) {
            $object->setChildId(null);
        }
        if (\array_key_exists('child_digest', $data) && $data['child_digest'] !== null) {
            $object->setChildDigest($data['child_digest']);
        } elseif (\array_key_exists('child_digest', $data) && $data['child_digest'] === null) {
            $object->setChildDigest(null);
        }
        if (\array_key_exists('platform', $data) && $data['platform'] !== null) {
            $object->setPlatform($this->denormalizer->denormalize($data['platform'], \Flownative\Harbor\Api\Model\Platform::class, 'json', $context));
        } elseif (\array_key_exists('platform', $data) && $data['platform'] === null) {
            $object->setPlatform(null);
        }
        if (\array_key_exists('annotations', $data) && $data['annotations'] !== null) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['annotations'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setAnnotations($values);
        } elseif (\array_key_exists('annotations', $data) && $data['annotations'] === null) {
            $object->setAnnotations(null);
        }
        if (\array_key_exists('urls', $data) && $data['urls'] !== null) {
            $values_1 = [];
            foreach ($data['urls'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setUrls($values_1);
        } elseif (\array_key_exists('urls', $data) && $data['urls'] === null) {
            $object->setUrls(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('parentId') && null !== $data->getParentId()) {
            $dataArray['parent_id'] = $data->getParentId();
        }
        if ($data->isInitialized('childId') && null !== $data->getChildId()) {
            $dataArray['child_id'] = $data->getChildId();
        }
        if ($data->isInitialized('childDigest') && null !== $data->getChildDigest()) {
            $dataArray['child_digest'] = $data->getChildDigest();
        }
        if ($data->isInitialized('platform') && null !== $data->getPlatform()) {
            $dataArray['platform'] = $this->normalizer->normalize($data->getPlatform(), 'json', $context);
        }
        if ($data->isInitialized('annotations') && null !== $data->getAnnotations()) {
            $values = [];
            foreach ($data->getAnnotations() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['annotations'] = $values;
        }
        if ($data->isInitialized('urls') && null !== $data->getUrls()) {
            $values_1 = [];
            foreach ($data->getUrls() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['urls'] = $values_1;
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\Reference::class => false];
    }
}
