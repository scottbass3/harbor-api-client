<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LdapConfNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\LdapConf::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\LdapConf::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\LdapConf();
        if (\array_key_exists('ldap_verify_cert', $data) && \is_int($data['ldap_verify_cert'])) {
            $data['ldap_verify_cert'] = (bool) $data['ldap_verify_cert'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('ldap_url', $data) && $data['ldap_url'] !== null) {
            $object->setLdapUrl($data['ldap_url']);
        } elseif (\array_key_exists('ldap_url', $data) && $data['ldap_url'] === null) {
            $object->setLdapUrl(null);
        }
        if (\array_key_exists('ldap_search_dn', $data) && $data['ldap_search_dn'] !== null) {
            $object->setLdapSearchDn($data['ldap_search_dn']);
        } elseif (\array_key_exists('ldap_search_dn', $data) && $data['ldap_search_dn'] === null) {
            $object->setLdapSearchDn(null);
        }
        if (\array_key_exists('ldap_search_password', $data) && $data['ldap_search_password'] !== null) {
            $object->setLdapSearchPassword($data['ldap_search_password']);
        } elseif (\array_key_exists('ldap_search_password', $data) && $data['ldap_search_password'] === null) {
            $object->setLdapSearchPassword(null);
        }
        if (\array_key_exists('ldap_base_dn', $data) && $data['ldap_base_dn'] !== null) {
            $object->setLdapBaseDn($data['ldap_base_dn']);
        } elseif (\array_key_exists('ldap_base_dn', $data) && $data['ldap_base_dn'] === null) {
            $object->setLdapBaseDn(null);
        }
        if (\array_key_exists('ldap_filter', $data) && $data['ldap_filter'] !== null) {
            $object->setLdapFilter($data['ldap_filter']);
        } elseif (\array_key_exists('ldap_filter', $data) && $data['ldap_filter'] === null) {
            $object->setLdapFilter(null);
        }
        if (\array_key_exists('ldap_uid', $data) && $data['ldap_uid'] !== null) {
            $object->setLdapUid($data['ldap_uid']);
        } elseif (\array_key_exists('ldap_uid', $data) && $data['ldap_uid'] === null) {
            $object->setLdapUid(null);
        }
        if (\array_key_exists('ldap_scope', $data) && $data['ldap_scope'] !== null) {
            $object->setLdapScope($data['ldap_scope']);
        } elseif (\array_key_exists('ldap_scope', $data) && $data['ldap_scope'] === null) {
            $object->setLdapScope(null);
        }
        if (\array_key_exists('ldap_connection_timeout', $data) && $data['ldap_connection_timeout'] !== null) {
            $object->setLdapConnectionTimeout($data['ldap_connection_timeout']);
        } elseif (\array_key_exists('ldap_connection_timeout', $data) && $data['ldap_connection_timeout'] === null) {
            $object->setLdapConnectionTimeout(null);
        }
        if (\array_key_exists('ldap_verify_cert', $data) && $data['ldap_verify_cert'] !== null) {
            $object->setLdapVerifyCert($data['ldap_verify_cert']);
        } elseif (\array_key_exists('ldap_verify_cert', $data) && $data['ldap_verify_cert'] === null) {
            $object->setLdapVerifyCert(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('ldapUrl') && null !== $data->getLdapUrl()) {
            $dataArray['ldap_url'] = $data->getLdapUrl();
        }
        if ($data->isInitialized('ldapSearchDn') && null !== $data->getLdapSearchDn()) {
            $dataArray['ldap_search_dn'] = $data->getLdapSearchDn();
        }
        if ($data->isInitialized('ldapSearchPassword') && null !== $data->getLdapSearchPassword()) {
            $dataArray['ldap_search_password'] = $data->getLdapSearchPassword();
        }
        if ($data->isInitialized('ldapBaseDn') && null !== $data->getLdapBaseDn()) {
            $dataArray['ldap_base_dn'] = $data->getLdapBaseDn();
        }
        if ($data->isInitialized('ldapFilter') && null !== $data->getLdapFilter()) {
            $dataArray['ldap_filter'] = $data->getLdapFilter();
        }
        if ($data->isInitialized('ldapUid') && null !== $data->getLdapUid()) {
            $dataArray['ldap_uid'] = $data->getLdapUid();
        }
        if ($data->isInitialized('ldapScope') && null !== $data->getLdapScope()) {
            $dataArray['ldap_scope'] = $data->getLdapScope();
        }
        if ($data->isInitialized('ldapConnectionTimeout') && null !== $data->getLdapConnectionTimeout()) {
            $dataArray['ldap_connection_timeout'] = $data->getLdapConnectionTimeout();
        }
        if ($data->isInitialized('ldapVerifyCert') && null !== $data->getLdapVerifyCert()) {
            $dataArray['ldap_verify_cert'] = $data->getLdapVerifyCert();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\LdapConf::class => false];
    }
}
