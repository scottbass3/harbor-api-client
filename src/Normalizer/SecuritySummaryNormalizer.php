<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SecuritySummaryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\SecuritySummary::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\SecuritySummary::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\SecuritySummary();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('critical_cnt', $data) && $data['critical_cnt'] !== null) {
            $object->setCriticalCnt($data['critical_cnt']);
        } elseif (\array_key_exists('critical_cnt', $data) && $data['critical_cnt'] === null) {
            $object->setCriticalCnt(null);
        }
        if (\array_key_exists('high_cnt', $data) && $data['high_cnt'] !== null) {
            $object->setHighCnt($data['high_cnt']);
        } elseif (\array_key_exists('high_cnt', $data) && $data['high_cnt'] === null) {
            $object->setHighCnt(null);
        }
        if (\array_key_exists('medium_cnt', $data) && $data['medium_cnt'] !== null) {
            $object->setMediumCnt($data['medium_cnt']);
        } elseif (\array_key_exists('medium_cnt', $data) && $data['medium_cnt'] === null) {
            $object->setMediumCnt(null);
        }
        if (\array_key_exists('low_cnt', $data) && $data['low_cnt'] !== null) {
            $object->setLowCnt($data['low_cnt']);
        } elseif (\array_key_exists('low_cnt', $data) && $data['low_cnt'] === null) {
            $object->setLowCnt(null);
        }
        if (\array_key_exists('none_cnt', $data) && $data['none_cnt'] !== null) {
            $object->setNoneCnt($data['none_cnt']);
        } elseif (\array_key_exists('none_cnt', $data) && $data['none_cnt'] === null) {
            $object->setNoneCnt(null);
        }
        if (\array_key_exists('unknown_cnt', $data) && $data['unknown_cnt'] !== null) {
            $object->setUnknownCnt($data['unknown_cnt']);
        } elseif (\array_key_exists('unknown_cnt', $data) && $data['unknown_cnt'] === null) {
            $object->setUnknownCnt(null);
        }
        if (\array_key_exists('total_vuls', $data) && $data['total_vuls'] !== null) {
            $object->setTotalVuls($data['total_vuls']);
        } elseif (\array_key_exists('total_vuls', $data) && $data['total_vuls'] === null) {
            $object->setTotalVuls(null);
        }
        if (\array_key_exists('scanned_cnt', $data) && $data['scanned_cnt'] !== null) {
            $object->setScannedCnt($data['scanned_cnt']);
        } elseif (\array_key_exists('scanned_cnt', $data) && $data['scanned_cnt'] === null) {
            $object->setScannedCnt(null);
        }
        if (\array_key_exists('total_artifact', $data) && $data['total_artifact'] !== null) {
            $object->setTotalArtifact($data['total_artifact']);
        } elseif (\array_key_exists('total_artifact', $data) && $data['total_artifact'] === null) {
            $object->setTotalArtifact(null);
        }
        if (\array_key_exists('fixable_cnt', $data) && $data['fixable_cnt'] !== null) {
            $object->setFixableCnt($data['fixable_cnt']);
        } elseif (\array_key_exists('fixable_cnt', $data) && $data['fixable_cnt'] === null) {
            $object->setFixableCnt(null);
        }
        if (\array_key_exists('dangerous_cves', $data) && $data['dangerous_cves'] !== null) {
            $values = [];
            foreach ($data['dangerous_cves'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Scottbass3\Harbor\Api\Model\DangerousCVE::class, 'json', $context);
            }
            $object->setDangerousCves($values);
        } elseif (\array_key_exists('dangerous_cves', $data) && $data['dangerous_cves'] === null) {
            $object->setDangerousCves(null);
        }
        if (\array_key_exists('dangerous_artifacts', $data) && $data['dangerous_artifacts'] !== null) {
            $values_1 = [];
            foreach ($data['dangerous_artifacts'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Scottbass3\Harbor\Api\Model\DangerousArtifact::class, 'json', $context);
            }
            $object->setDangerousArtifacts($values_1);
        } elseif (\array_key_exists('dangerous_artifacts', $data) && $data['dangerous_artifacts'] === null) {
            $object->setDangerousArtifacts(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('criticalCnt') && null !== $data->getCriticalCnt()) {
            $dataArray['critical_cnt'] = $data->getCriticalCnt();
        }
        if ($data->isInitialized('highCnt') && null !== $data->getHighCnt()) {
            $dataArray['high_cnt'] = $data->getHighCnt();
        }
        if ($data->isInitialized('mediumCnt') && null !== $data->getMediumCnt()) {
            $dataArray['medium_cnt'] = $data->getMediumCnt();
        }
        if ($data->isInitialized('lowCnt') && null !== $data->getLowCnt()) {
            $dataArray['low_cnt'] = $data->getLowCnt();
        }
        if ($data->isInitialized('noneCnt') && null !== $data->getNoneCnt()) {
            $dataArray['none_cnt'] = $data->getNoneCnt();
        }
        if ($data->isInitialized('unknownCnt') && null !== $data->getUnknownCnt()) {
            $dataArray['unknown_cnt'] = $data->getUnknownCnt();
        }
        if ($data->isInitialized('totalVuls') && null !== $data->getTotalVuls()) {
            $dataArray['total_vuls'] = $data->getTotalVuls();
        }
        if ($data->isInitialized('scannedCnt') && null !== $data->getScannedCnt()) {
            $dataArray['scanned_cnt'] = $data->getScannedCnt();
        }
        if ($data->isInitialized('totalArtifact') && null !== $data->getTotalArtifact()) {
            $dataArray['total_artifact'] = $data->getTotalArtifact();
        }
        if ($data->isInitialized('fixableCnt') && null !== $data->getFixableCnt()) {
            $dataArray['fixable_cnt'] = $data->getFixableCnt();
        }
        if ($data->isInitialized('dangerousCves') && null !== $data->getDangerousCves()) {
            $values = [];
            foreach ($data->getDangerousCves() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['dangerous_cves'] = $values;
        }
        if ($data->isInitialized('dangerousArtifacts') && null !== $data->getDangerousArtifacts()) {
            $values_1 = [];
            foreach ($data->getDangerousArtifacts() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['dangerous_artifacts'] = $values_1;
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\SecuritySummary::class => false];
    }
}
