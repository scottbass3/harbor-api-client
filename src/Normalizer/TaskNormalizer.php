<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TaskNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\Task::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\Task::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\Task();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data) && $data['id'] !== null) {
            $object->setId($data['id']);
        } elseif (\array_key_exists('id', $data) && $data['id'] === null) {
            $object->setId(null);
        }
        if (\array_key_exists('execution_id', $data) && $data['execution_id'] !== null) {
            $object->setExecutionId($data['execution_id']);
        } elseif (\array_key_exists('execution_id', $data) && $data['execution_id'] === null) {
            $object->setExecutionId(null);
        }
        if (\array_key_exists('status', $data) && $data['status'] !== null) {
            $object->setStatus($data['status']);
        } elseif (\array_key_exists('status', $data) && $data['status'] === null) {
            $object->setStatus(null);
        }
        if (\array_key_exists('status_message', $data) && $data['status_message'] !== null) {
            $object->setStatusMessage($data['status_message']);
        } elseif (\array_key_exists('status_message', $data) && $data['status_message'] === null) {
            $object->setStatusMessage(null);
        }
        if (\array_key_exists('run_count', $data) && $data['run_count'] !== null) {
            $object->setRunCount($data['run_count']);
        } elseif (\array_key_exists('run_count', $data) && $data['run_count'] === null) {
            $object->setRunCount(null);
        }
        if (\array_key_exists('extra_attrs', $data) && $data['extra_attrs'] !== null) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['extra_attrs'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setExtraAttrs($values);
        } elseif (\array_key_exists('extra_attrs', $data) && $data['extra_attrs'] === null) {
            $object->setExtraAttrs(null);
        }
        if (\array_key_exists('creation_time', $data) && $data['creation_time'] !== null) {
            $object->setCreationTime($data['creation_time']);
        } elseif (\array_key_exists('creation_time', $data) && $data['creation_time'] === null) {
            $object->setCreationTime(null);
        }
        if (\array_key_exists('update_time', $data) && $data['update_time'] !== null) {
            $object->setUpdateTime($data['update_time']);
        } elseif (\array_key_exists('update_time', $data) && $data['update_time'] === null) {
            $object->setUpdateTime(null);
        }
        if (\array_key_exists('start_time', $data) && $data['start_time'] !== null) {
            $object->setStartTime($data['start_time']);
        } elseif (\array_key_exists('start_time', $data) && $data['start_time'] === null) {
            $object->setStartTime(null);
        }
        if (\array_key_exists('end_time', $data) && $data['end_time'] !== null) {
            $object->setEndTime($data['end_time']);
        } elseif (\array_key_exists('end_time', $data) && $data['end_time'] === null) {
            $object->setEndTime(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('executionId') && null !== $data->getExecutionId()) {
            $dataArray['execution_id'] = $data->getExecutionId();
        }
        if ($data->isInitialized('status') && null !== $data->getStatus()) {
            $dataArray['status'] = $data->getStatus();
        }
        if ($data->isInitialized('statusMessage') && null !== $data->getStatusMessage()) {
            $dataArray['status_message'] = $data->getStatusMessage();
        }
        if ($data->isInitialized('runCount') && null !== $data->getRunCount()) {
            $dataArray['run_count'] = $data->getRunCount();
        }
        if ($data->isInitialized('extraAttrs') && null !== $data->getExtraAttrs()) {
            $values = [];
            foreach ($data->getExtraAttrs() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['extra_attrs'] = $values;
        }
        if ($data->isInitialized('creationTime') && null !== $data->getCreationTime()) {
            $dataArray['creation_time'] = $data->getCreationTime();
        }
        if ($data->isInitialized('updateTime') && null !== $data->getUpdateTime()) {
            $dataArray['update_time'] = $data->getUpdateTime();
        }
        if ($data->isInitialized('startTime') && null !== $data->getStartTime()) {
            $dataArray['start_time'] = $data->getStartTime();
        }
        if ($data->isInitialized('endTime') && null !== $data->getEndTime()) {
            $dataArray['end_time'] = $data->getEndTime();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\Task::class => false];
    }
}
