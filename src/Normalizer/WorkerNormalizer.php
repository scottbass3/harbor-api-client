<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class WorkerNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\Worker::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\Worker::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\Worker();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data) && $data['id'] !== null) {
            $object->setId($data['id']);
        } elseif (\array_key_exists('id', $data) && $data['id'] === null) {
            $object->setId(null);
        }
        if (\array_key_exists('pool_id', $data) && $data['pool_id'] !== null) {
            $object->setPoolId($data['pool_id']);
        } elseif (\array_key_exists('pool_id', $data) && $data['pool_id'] === null) {
            $object->setPoolId(null);
        }
        if (\array_key_exists('job_name', $data) && $data['job_name'] !== null) {
            $object->setJobName($data['job_name']);
        } elseif (\array_key_exists('job_name', $data) && $data['job_name'] === null) {
            $object->setJobName(null);
        }
        if (\array_key_exists('job_id', $data) && $data['job_id'] !== null) {
            $object->setJobId($data['job_id']);
        } elseif (\array_key_exists('job_id', $data) && $data['job_id'] === null) {
            $object->setJobId(null);
        }
        if (\array_key_exists('start_at', $data) && $data['start_at'] !== null) {
            $object->setStartAt(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['start_at']));
        } elseif (\array_key_exists('start_at', $data) && $data['start_at'] === null) {
            $object->setStartAt(null);
        }
        if (\array_key_exists('check_in', $data) && $data['check_in'] !== null) {
            $object->setCheckIn($data['check_in']);
        } elseif (\array_key_exists('check_in', $data) && $data['check_in'] === null) {
            $object->setCheckIn(null);
        }
        if (\array_key_exists('checkin_at', $data) && $data['checkin_at'] !== null) {
            $object->setCheckinAt(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['checkin_at']));
        } elseif (\array_key_exists('checkin_at', $data) && $data['checkin_at'] === null) {
            $object->setCheckinAt(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('poolId') && null !== $data->getPoolId()) {
            $dataArray['pool_id'] = $data->getPoolId();
        }
        if ($data->isInitialized('jobName') && null !== $data->getJobName()) {
            $dataArray['job_name'] = $data->getJobName();
        }
        if ($data->isInitialized('jobId') && null !== $data->getJobId()) {
            $dataArray['job_id'] = $data->getJobId();
        }
        if ($data->isInitialized('startAt') && null !== $data->getStartAt()) {
            $dataArray['start_at'] = $data->getStartAt()?->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('checkIn') && null !== $data->getCheckIn()) {
            $dataArray['check_in'] = $data->getCheckIn();
        }
        if ($data->isInitialized('checkinAt') && null !== $data->getCheckinAt()) {
            $dataArray['checkin_at'] = $data->getCheckinAt()?->format('Y-m-d\TH:i:s.vp');
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\Worker::class => false];
    }
}
