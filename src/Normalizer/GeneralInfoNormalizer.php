<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class GeneralInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\GeneralInfo::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\GeneralInfo::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\GeneralInfo();
        if (\array_key_exists('primary_auth_mode', $data) && \is_int($data['primary_auth_mode'])) {
            $data['primary_auth_mode'] = (bool) $data['primary_auth_mode'];
        }
        if (\array_key_exists('self_registration', $data) && \is_int($data['self_registration'])) {
            $data['self_registration'] = (bool) $data['self_registration'];
        }
        if (\array_key_exists('has_ca_root', $data) && \is_int($data['has_ca_root'])) {
            $data['has_ca_root'] = (bool) $data['has_ca_root'];
        }
        if (\array_key_exists('read_only', $data) && \is_int($data['read_only'])) {
            $data['read_only'] = (bool) $data['read_only'];
        }
        if (\array_key_exists('notification_enable', $data) && \is_int($data['notification_enable'])) {
            $data['notification_enable'] = (bool) $data['notification_enable'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('banner_message', $data) && $data['banner_message'] !== null) {
            $object->setBannerMessage($data['banner_message']);
        } elseif (\array_key_exists('banner_message', $data) && $data['banner_message'] === null) {
            $object->setBannerMessage(null);
        }
        if (\array_key_exists('current_time', $data) && $data['current_time'] !== null) {
            $object->setCurrentTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['current_time']));
        } elseif (\array_key_exists('current_time', $data) && $data['current_time'] === null) {
            $object->setCurrentTime(null);
        }
        if (\array_key_exists('registry_url', $data) && $data['registry_url'] !== null) {
            $object->setRegistryUrl($data['registry_url']);
        } elseif (\array_key_exists('registry_url', $data) && $data['registry_url'] === null) {
            $object->setRegistryUrl(null);
        }
        if (\array_key_exists('external_url', $data) && $data['external_url'] !== null) {
            $object->setExternalUrl($data['external_url']);
        } elseif (\array_key_exists('external_url', $data) && $data['external_url'] === null) {
            $object->setExternalUrl(null);
        }
        if (\array_key_exists('auth_mode', $data) && $data['auth_mode'] !== null) {
            $object->setAuthMode($data['auth_mode']);
        } elseif (\array_key_exists('auth_mode', $data) && $data['auth_mode'] === null) {
            $object->setAuthMode(null);
        }
        if (\array_key_exists('primary_auth_mode', $data) && $data['primary_auth_mode'] !== null) {
            $object->setPrimaryAuthMode($data['primary_auth_mode']);
        } elseif (\array_key_exists('primary_auth_mode', $data) && $data['primary_auth_mode'] === null) {
            $object->setPrimaryAuthMode(null);
        }
        if (\array_key_exists('project_creation_restriction', $data) && $data['project_creation_restriction'] !== null) {
            $object->setProjectCreationRestriction($data['project_creation_restriction']);
        } elseif (\array_key_exists('project_creation_restriction', $data) && $data['project_creation_restriction'] === null) {
            $object->setProjectCreationRestriction(null);
        }
        if (\array_key_exists('self_registration', $data) && $data['self_registration'] !== null) {
            $object->setSelfRegistration($data['self_registration']);
        } elseif (\array_key_exists('self_registration', $data) && $data['self_registration'] === null) {
            $object->setSelfRegistration(null);
        }
        if (\array_key_exists('has_ca_root', $data) && $data['has_ca_root'] !== null) {
            $object->setHasCaRoot($data['has_ca_root']);
        } elseif (\array_key_exists('has_ca_root', $data) && $data['has_ca_root'] === null) {
            $object->setHasCaRoot(null);
        }
        if (\array_key_exists('harbor_version', $data) && $data['harbor_version'] !== null) {
            $object->setHarborVersion($data['harbor_version']);
        } elseif (\array_key_exists('harbor_version', $data) && $data['harbor_version'] === null) {
            $object->setHarborVersion(null);
        }
        if (\array_key_exists('registry_storage_provider_name', $data) && $data['registry_storage_provider_name'] !== null) {
            $object->setRegistryStorageProviderName($data['registry_storage_provider_name']);
        } elseif (\array_key_exists('registry_storage_provider_name', $data) && $data['registry_storage_provider_name'] === null) {
            $object->setRegistryStorageProviderName(null);
        }
        if (\array_key_exists('read_only', $data) && $data['read_only'] !== null) {
            $object->setReadOnly($data['read_only']);
        } elseif (\array_key_exists('read_only', $data) && $data['read_only'] === null) {
            $object->setReadOnly(null);
        }
        if (\array_key_exists('notification_enable', $data) && $data['notification_enable'] !== null) {
            $object->setNotificationEnable($data['notification_enable']);
        } elseif (\array_key_exists('notification_enable', $data) && $data['notification_enable'] === null) {
            $object->setNotificationEnable(null);
        }
        if (\array_key_exists('authproxy_settings', $data) && $data['authproxy_settings'] !== null) {
            $object->setAuthproxySettings($this->denormalizer->denormalize($data['authproxy_settings'], \Flownative\Harbor\Api\Model\AuthproxySetting::class, 'json', $context));
        } elseif (\array_key_exists('authproxy_settings', $data) && $data['authproxy_settings'] === null) {
            $object->setAuthproxySettings(null);
        }
        if (\array_key_exists('oidc_provider_name', $data) && $data['oidc_provider_name'] !== null) {
            $object->setOidcProviderName($data['oidc_provider_name']);
        } elseif (\array_key_exists('oidc_provider_name', $data) && $data['oidc_provider_name'] === null) {
            $object->setOidcProviderName(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('bannerMessage') && null !== $data->getBannerMessage()) {
            $dataArray['banner_message'] = $data->getBannerMessage();
        }
        if ($data->isInitialized('currentTime') && null !== $data->getCurrentTime()) {
            $dataArray['current_time'] = $data->getCurrentTime()?->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('registryUrl') && null !== $data->getRegistryUrl()) {
            $dataArray['registry_url'] = $data->getRegistryUrl();
        }
        if ($data->isInitialized('externalUrl') && null !== $data->getExternalUrl()) {
            $dataArray['external_url'] = $data->getExternalUrl();
        }
        if ($data->isInitialized('authMode') && null !== $data->getAuthMode()) {
            $dataArray['auth_mode'] = $data->getAuthMode();
        }
        if ($data->isInitialized('primaryAuthMode') && null !== $data->getPrimaryAuthMode()) {
            $dataArray['primary_auth_mode'] = $data->getPrimaryAuthMode();
        }
        if ($data->isInitialized('projectCreationRestriction') && null !== $data->getProjectCreationRestriction()) {
            $dataArray['project_creation_restriction'] = $data->getProjectCreationRestriction();
        }
        if ($data->isInitialized('selfRegistration') && null !== $data->getSelfRegistration()) {
            $dataArray['self_registration'] = $data->getSelfRegistration();
        }
        if ($data->isInitialized('hasCaRoot') && null !== $data->getHasCaRoot()) {
            $dataArray['has_ca_root'] = $data->getHasCaRoot();
        }
        if ($data->isInitialized('harborVersion') && null !== $data->getHarborVersion()) {
            $dataArray['harbor_version'] = $data->getHarborVersion();
        }
        if ($data->isInitialized('registryStorageProviderName') && null !== $data->getRegistryStorageProviderName()) {
            $dataArray['registry_storage_provider_name'] = $data->getRegistryStorageProviderName();
        }
        if ($data->isInitialized('readOnly') && null !== $data->getReadOnly()) {
            $dataArray['read_only'] = $data->getReadOnly();
        }
        if ($data->isInitialized('notificationEnable') && null !== $data->getNotificationEnable()) {
            $dataArray['notification_enable'] = $data->getNotificationEnable();
        }
        if ($data->isInitialized('authproxySettings') && null !== $data->getAuthproxySettings()) {
            $dataArray['authproxy_settings'] = $this->normalizer->normalize($data->getAuthproxySettings(), 'json', $context);
        }
        if ($data->isInitialized('oidcProviderName') && null !== $data->getOidcProviderName()) {
            $dataArray['oidc_provider_name'] = $data->getOidcProviderName();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\GeneralInfo::class => false];
    }
}
