<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class MetricsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\Metrics::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\Metrics::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\Metrics();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('task_count', $data) && $data['task_count'] !== null) {
            $object->setTaskCount($data['task_count']);
        } elseif (\array_key_exists('task_count', $data) && $data['task_count'] === null) {
            $object->setTaskCount(null);
        }
        if (\array_key_exists('success_task_count', $data) && $data['success_task_count'] !== null) {
            $object->setSuccessTaskCount($data['success_task_count']);
        } elseif (\array_key_exists('success_task_count', $data) && $data['success_task_count'] === null) {
            $object->setSuccessTaskCount(null);
        }
        if (\array_key_exists('error_task_count', $data) && $data['error_task_count'] !== null) {
            $object->setErrorTaskCount($data['error_task_count']);
        } elseif (\array_key_exists('error_task_count', $data) && $data['error_task_count'] === null) {
            $object->setErrorTaskCount(null);
        }
        if (\array_key_exists('pending_task_count', $data) && $data['pending_task_count'] !== null) {
            $object->setPendingTaskCount($data['pending_task_count']);
        } elseif (\array_key_exists('pending_task_count', $data) && $data['pending_task_count'] === null) {
            $object->setPendingTaskCount(null);
        }
        if (\array_key_exists('running_task_count', $data) && $data['running_task_count'] !== null) {
            $object->setRunningTaskCount($data['running_task_count']);
        } elseif (\array_key_exists('running_task_count', $data) && $data['running_task_count'] === null) {
            $object->setRunningTaskCount(null);
        }
        if (\array_key_exists('scheduled_task_count', $data) && $data['scheduled_task_count'] !== null) {
            $object->setScheduledTaskCount($data['scheduled_task_count']);
        } elseif (\array_key_exists('scheduled_task_count', $data) && $data['scheduled_task_count'] === null) {
            $object->setScheduledTaskCount(null);
        }
        if (\array_key_exists('stopped_task_count', $data) && $data['stopped_task_count'] !== null) {
            $object->setStoppedTaskCount($data['stopped_task_count']);
        } elseif (\array_key_exists('stopped_task_count', $data) && $data['stopped_task_count'] === null) {
            $object->setStoppedTaskCount(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('taskCount') && null !== $data->getTaskCount()) {
            $dataArray['task_count'] = $data->getTaskCount();
        }
        if ($data->isInitialized('successTaskCount') && null !== $data->getSuccessTaskCount()) {
            $dataArray['success_task_count'] = $data->getSuccessTaskCount();
        }
        if ($data->isInitialized('errorTaskCount') && null !== $data->getErrorTaskCount()) {
            $dataArray['error_task_count'] = $data->getErrorTaskCount();
        }
        if ($data->isInitialized('pendingTaskCount') && null !== $data->getPendingTaskCount()) {
            $dataArray['pending_task_count'] = $data->getPendingTaskCount();
        }
        if ($data->isInitialized('runningTaskCount') && null !== $data->getRunningTaskCount()) {
            $dataArray['running_task_count'] = $data->getRunningTaskCount();
        }
        if ($data->isInitialized('scheduledTaskCount') && null !== $data->getScheduledTaskCount()) {
            $dataArray['scheduled_task_count'] = $data->getScheduledTaskCount();
        }
        if ($data->isInitialized('stoppedTaskCount') && null !== $data->getStoppedTaskCount()) {
            $dataArray['stopped_task_count'] = $data->getStoppedTaskCount();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\Metrics::class => false];
    }
}
