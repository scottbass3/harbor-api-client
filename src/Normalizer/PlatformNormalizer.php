<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Normalizer;

use Scottbass3\Harbor\Api\Runtime\Normalizer\CheckArray;
use Scottbass3\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PlatformNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Scottbass3\Harbor\Api\Model\Platform::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Scottbass3\Harbor\Api\Model\Platform::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Scottbass3\Harbor\Api\Model\Platform();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('architecture', $data) && $data['architecture'] !== null) {
            $object->setArchitecture($data['architecture']);
        } elseif (\array_key_exists('architecture', $data) && $data['architecture'] === null) {
            $object->setArchitecture(null);
        }
        if (\array_key_exists('os', $data) && $data['os'] !== null) {
            $object->setOs($data['os']);
        } elseif (\array_key_exists('os', $data) && $data['os'] === null) {
            $object->setOs(null);
        }
        if (\array_key_exists('\'os.version\'', $data) && $data['\'os.version\''] !== null) {
            $object->setOsVersion($data['\'os.version\'']);
        } elseif (\array_key_exists('\'os.version\'', $data) && $data['\'os.version\''] === null) {
            $object->setOsVersion(null);
        }
        if (\array_key_exists('\'os.features\'', $data) && $data['\'os.features\''] !== null) {
            $values = [];
            foreach ($data['\'os.features\''] as $value) {
                $values[] = $value;
            }
            $object->setOsFeatures($values);
        } elseif (\array_key_exists('\'os.features\'', $data) && $data['\'os.features\''] === null) {
            $object->setOsFeatures(null);
        }
        if (\array_key_exists('variant', $data) && $data['variant'] !== null) {
            $object->setVariant($data['variant']);
        } elseif (\array_key_exists('variant', $data) && $data['variant'] === null) {
            $object->setVariant(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('architecture') && null !== $data->getArchitecture()) {
            $dataArray['architecture'] = $data->getArchitecture();
        }
        if ($data->isInitialized('os') && null !== $data->getOs()) {
            $dataArray['os'] = $data->getOs();
        }
        if ($data->isInitialized('osVersion') && null !== $data->getOsVersion()) {
            $dataArray['\'os.version\''] = $data->getOsVersion();
        }
        if ($data->isInitialized('osFeatures') && null !== $data->getOsFeatures()) {
            $values = [];
            foreach ($data->getOsFeatures() as $value) {
                $values[] = $value;
            }
            $dataArray['\'os.features\''] = $values;
        }
        if ($data->isInitialized('variant') && null !== $data->getVariant()) {
            $dataArray['variant'] = $data->getVariant();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Scottbass3\Harbor\Api\Model\Platform::class => false];
    }
}
