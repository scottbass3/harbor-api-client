<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AuthproxySettingNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\AuthproxySetting::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\AuthproxySetting::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\AuthproxySetting();
        if (\array_key_exists('skip_search', $data) && \is_int($data['skip_search'])) {
            $data['skip_search'] = (bool) $data['skip_search'];
        }
        if (\array_key_exists('verify_cert', $data) && \is_int($data['verify_cert'])) {
            $data['verify_cert'] = (bool) $data['verify_cert'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('endpoint', $data) && $data['endpoint'] !== null) {
            $object->setEndpoint($data['endpoint']);
        } elseif (\array_key_exists('endpoint', $data) && $data['endpoint'] === null) {
            $object->setEndpoint(null);
        }
        if (\array_key_exists('tokenreivew_endpoint', $data) && $data['tokenreivew_endpoint'] !== null) {
            $object->setTokenreivewEndpoint($data['tokenreivew_endpoint']);
        } elseif (\array_key_exists('tokenreivew_endpoint', $data) && $data['tokenreivew_endpoint'] === null) {
            $object->setTokenreivewEndpoint(null);
        }
        if (\array_key_exists('skip_search', $data) && $data['skip_search'] !== null) {
            $object->setSkipSearch($data['skip_search']);
        } elseif (\array_key_exists('skip_search', $data) && $data['skip_search'] === null) {
            $object->setSkipSearch(null);
        }
        if (\array_key_exists('verify_cert', $data) && $data['verify_cert'] !== null) {
            $object->setVerifyCert($data['verify_cert']);
        } elseif (\array_key_exists('verify_cert', $data) && $data['verify_cert'] === null) {
            $object->setVerifyCert(null);
        }
        if (\array_key_exists('server_certificate', $data) && $data['server_certificate'] !== null) {
            $object->setServerCertificate($data['server_certificate']);
        } elseif (\array_key_exists('server_certificate', $data) && $data['server_certificate'] === null) {
            $object->setServerCertificate(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('endpoint') && null !== $data->getEndpoint()) {
            $dataArray['endpoint'] = $data->getEndpoint();
        }
        if ($data->isInitialized('tokenreivewEndpoint') && null !== $data->getTokenreivewEndpoint()) {
            $dataArray['tokenreivew_endpoint'] = $data->getTokenreivewEndpoint();
        }
        if ($data->isInitialized('skipSearch') && null !== $data->getSkipSearch()) {
            $dataArray['skip_search'] = $data->getSkipSearch();
        }
        if ($data->isInitialized('verifyCert') && null !== $data->getVerifyCert()) {
            $dataArray['verify_cert'] = $data->getVerifyCert();
        }
        if ($data->isInitialized('serverCertificate') && null !== $data->getServerCertificate()) {
            $dataArray['server_certificate'] = $data->getServerCertificate();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\AuthproxySetting::class => false];
    }
}
