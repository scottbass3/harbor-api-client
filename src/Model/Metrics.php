<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Model;

class Metrics
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The count of task.
     *
     * @var int|null
     */
    protected $taskCount;
    /**
     * The count of success task.
     *
     * @var int|null
     */
    protected $successTaskCount;
    /**
     * The count of error task.
     *
     * @var int|null
     */
    protected $errorTaskCount;
    /**
     * The count of pending task.
     *
     * @var int|null
     */
    protected $pendingTaskCount;
    /**
     * The count of running task.
     *
     * @var int|null
     */
    protected $runningTaskCount;
    /**
     * The count of scheduled task.
     *
     * @var int|null
     */
    protected $scheduledTaskCount;
    /**
     * The count of stopped task.
     *
     * @var int|null
     */
    protected $stoppedTaskCount;

    /**
     * The count of task.
     */
    public function getTaskCount(): ?int
    {
        return $this->taskCount;
    }

    /**
     * The count of task.
     */
    public function setTaskCount(?int $taskCount): self
    {
        $this->initialized['taskCount'] = true;
        $this->taskCount = $taskCount;

        return $this;
    }

    /**
     * The count of success task.
     */
    public function getSuccessTaskCount(): ?int
    {
        return $this->successTaskCount;
    }

    /**
     * The count of success task.
     */
    public function setSuccessTaskCount(?int $successTaskCount): self
    {
        $this->initialized['successTaskCount'] = true;
        $this->successTaskCount = $successTaskCount;

        return $this;
    }

    /**
     * The count of error task.
     */
    public function getErrorTaskCount(): ?int
    {
        return $this->errorTaskCount;
    }

    /**
     * The count of error task.
     */
    public function setErrorTaskCount(?int $errorTaskCount): self
    {
        $this->initialized['errorTaskCount'] = true;
        $this->errorTaskCount = $errorTaskCount;

        return $this;
    }

    /**
     * The count of pending task.
     */
    public function getPendingTaskCount(): ?int
    {
        return $this->pendingTaskCount;
    }

    /**
     * The count of pending task.
     */
    public function setPendingTaskCount(?int $pendingTaskCount): self
    {
        $this->initialized['pendingTaskCount'] = true;
        $this->pendingTaskCount = $pendingTaskCount;

        return $this;
    }

    /**
     * The count of running task.
     */
    public function getRunningTaskCount(): ?int
    {
        return $this->runningTaskCount;
    }

    /**
     * The count of running task.
     */
    public function setRunningTaskCount(?int $runningTaskCount): self
    {
        $this->initialized['runningTaskCount'] = true;
        $this->runningTaskCount = $runningTaskCount;

        return $this;
    }

    /**
     * The count of scheduled task.
     */
    public function getScheduledTaskCount(): ?int
    {
        return $this->scheduledTaskCount;
    }

    /**
     * The count of scheduled task.
     */
    public function setScheduledTaskCount(?int $scheduledTaskCount): self
    {
        $this->initialized['scheduledTaskCount'] = true;
        $this->scheduledTaskCount = $scheduledTaskCount;

        return $this;
    }

    /**
     * The count of stopped task.
     */
    public function getStoppedTaskCount(): ?int
    {
        return $this->stoppedTaskCount;
    }

    /**
     * The count of stopped task.
     */
    public function setStoppedTaskCount(?int $stoppedTaskCount): self
    {
        $this->initialized['stoppedTaskCount'] = true;
        $this->stoppedTaskCount = $stoppedTaskCount;

        return $this;
    }
}
