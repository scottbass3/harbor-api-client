<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Model;

class Stats
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The total number of scan processes triggered by the scan all action.
     *
     * @var int|null
     */
    protected $total;
    /**
     * The number of the finished scan processes triggered by the scan all action.
     *
     * @var int|null
     */
    protected $completed;
    /**
     * The metrics data for the each status.
     *
     * @var array<string, int>|null
     */
    protected $metrics;
    /**
     * A flag indicating job status of scan all.
     *
     * @var bool|null
     */
    protected $ongoing;
    /**
     * The trigger of the scan all job.
     *
     * @var string|null
     */
    protected $trigger;

    /**
     * The total number of scan processes triggered by the scan all action.
     */
    public function getTotal(): ?int
    {
        return $this->total;
    }

    /**
     * The total number of scan processes triggered by the scan all action.
     */
    public function setTotal(?int $total): self
    {
        $this->initialized['total'] = true;
        $this->total = $total;

        return $this;
    }

    /**
     * The number of the finished scan processes triggered by the scan all action.
     */
    public function getCompleted(): ?int
    {
        return $this->completed;
    }

    /**
     * The number of the finished scan processes triggered by the scan all action.
     */
    public function setCompleted(?int $completed): self
    {
        $this->initialized['completed'] = true;
        $this->completed = $completed;

        return $this;
    }

    /**
     * The metrics data for the each status.
     *
     * @return array<string, int>|null
     */
    public function getMetrics(): ?iterable
    {
        return $this->metrics;
    }

    /**
     * The metrics data for the each status.
     *
     * @param array<string, int>|null $metrics
     */
    public function setMetrics(?iterable $metrics): self
    {
        $this->initialized['metrics'] = true;
        $this->metrics = $metrics;

        return $this;
    }

    /**
     * A flag indicating job status of scan all.
     */
    public function getOngoing(): ?bool
    {
        return $this->ongoing;
    }

    /**
     * A flag indicating job status of scan all.
     */
    public function setOngoing(?bool $ongoing): self
    {
        $this->initialized['ongoing'] = true;
        $this->ongoing = $ongoing;

        return $this;
    }

    /**
     * The trigger of the scan all job.
     */
    public function getTrigger(): ?string
    {
        return $this->trigger;
    }

    /**
     * The trigger of the scan all job.
     */
    public function setTrigger(?string $trigger): self
    {
        $this->initialized['trigger'] = true;
        $this->trigger = $trigger;

        return $this;
    }
}
