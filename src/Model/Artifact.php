<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class Artifact
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The ID of the artifact.
     *
     * @var int|null
     */
    protected $id;
    /**
     * The type of the artifact, e.g. image, chart, etc.
     *
     * @var string|null
     */
    protected $type;
    /**
     * The media type of the artifact.
     *
     * @var string|null
     */
    protected $mediaType;
    /**
     * The manifest media type of the artifact.
     *
     * @var string|null
     */
    protected $manifestMediaType;
    /**
     * The ID of the project that the artifact belongs to.
     *
     * @var int|null
     */
    protected $projectId;
    /**
     * The ID of the repository that the artifact belongs to.
     *
     * @var int|null
     */
    protected $repositoryId;
    /**
     * The digest of the artifact.
     *
     * @var string|null
     */
    protected $digest;
    /**
     * The size of the artifact.
     *
     * @var int|null
     */
    protected $size;
    /**
     * The digest of the icon.
     *
     * @var string|null
     */
    protected $icon;
    /**
     * The push time of the artifact.
     *
     * @var \DateTimeInterface|null
     */
    protected $pushTime;
    /**
     * The latest pull time of the artifact.
     *
     * @var \DateTimeInterface|null
     */
    protected $pullTime;
    /**
     * @var array<string, mixed>|null
     */
    protected $extraAttrs;
    /**
     * @var array<string, string>|null
     */
    protected $annotations;
    /**
     * @var list<Reference>|null
     */
    protected $references;
    /**
     * @var list<Tag>|null
     */
    protected $tags;
    /**
     * @var array<string, AdditionLink>|null
     */
    protected $additionLinks;
    /**
     * @var list<Label>|null
     */
    protected $labels;
    /**
     * The scan overview attached in the metadata of tag.
     *
     * @var array<string, NativeReportSummary>|null
     */
    protected $scanOverview;
    /**
     * @var list<Accessory>|null
     */
    protected $accessories;

    /**
     * The ID of the artifact.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * The ID of the artifact.
     */
    public function setId(?int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The type of the artifact, e.g. image, chart, etc.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * The type of the artifact, e.g. image, chart, etc.
     */
    public function setType(?string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * The media type of the artifact.
     */
    public function getMediaType(): ?string
    {
        return $this->mediaType;
    }

    /**
     * The media type of the artifact.
     */
    public function setMediaType(?string $mediaType): self
    {
        $this->initialized['mediaType'] = true;
        $this->mediaType = $mediaType;

        return $this;
    }

    /**
     * The manifest media type of the artifact.
     */
    public function getManifestMediaType(): ?string
    {
        return $this->manifestMediaType;
    }

    /**
     * The manifest media type of the artifact.
     */
    public function setManifestMediaType(?string $manifestMediaType): self
    {
        $this->initialized['manifestMediaType'] = true;
        $this->manifestMediaType = $manifestMediaType;

        return $this;
    }

    /**
     * The ID of the project that the artifact belongs to.
     */
    public function getProjectId(): ?int
    {
        return $this->projectId;
    }

    /**
     * The ID of the project that the artifact belongs to.
     */
    public function setProjectId(?int $projectId): self
    {
        $this->initialized['projectId'] = true;
        $this->projectId = $projectId;

        return $this;
    }

    /**
     * The ID of the repository that the artifact belongs to.
     */
    public function getRepositoryId(): ?int
    {
        return $this->repositoryId;
    }

    /**
     * The ID of the repository that the artifact belongs to.
     */
    public function setRepositoryId(?int $repositoryId): self
    {
        $this->initialized['repositoryId'] = true;
        $this->repositoryId = $repositoryId;

        return $this;
    }

    /**
     * The digest of the artifact.
     */
    public function getDigest(): ?string
    {
        return $this->digest;
    }

    /**
     * The digest of the artifact.
     */
    public function setDigest(?string $digest): self
    {
        $this->initialized['digest'] = true;
        $this->digest = $digest;

        return $this;
    }

    /**
     * The size of the artifact.
     */
    public function getSize(): ?int
    {
        return $this->size;
    }

    /**
     * The size of the artifact.
     */
    public function setSize(?int $size): self
    {
        $this->initialized['size'] = true;
        $this->size = $size;

        return $this;
    }

    /**
     * The digest of the icon.
     */
    public function getIcon(): ?string
    {
        return $this->icon;
    }

    /**
     * The digest of the icon.
     */
    public function setIcon(?string $icon): self
    {
        $this->initialized['icon'] = true;
        $this->icon = $icon;

        return $this;
    }

    /**
     * The push time of the artifact.
     */
    public function getPushTime(): ?\DateTimeInterface
    {
        return $this->pushTime;
    }

    /**
     * The push time of the artifact.
     */
    public function setPushTime(?\DateTimeInterface $pushTime): self
    {
        $this->initialized['pushTime'] = true;
        $this->pushTime = $pushTime;

        return $this;
    }

    /**
     * The latest pull time of the artifact.
     */
    public function getPullTime(): ?\DateTimeInterface
    {
        return $this->pullTime;
    }

    /**
     * The latest pull time of the artifact.
     */
    public function setPullTime(?\DateTimeInterface $pullTime): self
    {
        $this->initialized['pullTime'] = true;
        $this->pullTime = $pullTime;

        return $this;
    }

    /**
     * @return array<string, mixed>|null
     */
    public function getExtraAttrs(): ?iterable
    {
        return $this->extraAttrs;
    }

    /**
     * @param array<string, mixed>|null $extraAttrs
     */
    public function setExtraAttrs(?iterable $extraAttrs): self
    {
        $this->initialized['extraAttrs'] = true;
        $this->extraAttrs = $extraAttrs;

        return $this;
    }

    /**
     * @return array<string, string>|null
     */
    public function getAnnotations(): ?iterable
    {
        return $this->annotations;
    }

    /**
     * @param array<string, string>|null $annotations
     */
    public function setAnnotations(?iterable $annotations): self
    {
        $this->initialized['annotations'] = true;
        $this->annotations = $annotations;

        return $this;
    }

    /**
     * @return list<Reference>|null
     */
    public function getReferences(): ?array
    {
        return $this->references;
    }

    /**
     * @param list<Reference>|null $references
     */
    public function setReferences(?array $references): self
    {
        $this->initialized['references'] = true;
        $this->references = $references;

        return $this;
    }

    /**
     * @return list<Tag>|null
     */
    public function getTags(): ?array
    {
        return $this->tags;
    }

    /**
     * @param list<Tag>|null $tags
     */
    public function setTags(?array $tags): self
    {
        $this->initialized['tags'] = true;
        $this->tags = $tags;

        return $this;
    }

    /**
     * @return array<string, AdditionLink>|null
     */
    public function getAdditionLinks(): ?iterable
    {
        return $this->additionLinks;
    }

    /**
     * @param array<string, AdditionLink>|null $additionLinks
     */
    public function setAdditionLinks(?iterable $additionLinks): self
    {
        $this->initialized['additionLinks'] = true;
        $this->additionLinks = $additionLinks;

        return $this;
    }

    /**
     * @return list<Label>|null
     */
    public function getLabels(): ?array
    {
        return $this->labels;
    }

    /**
     * @param list<Label>|null $labels
     */
    public function setLabels(?array $labels): self
    {
        $this->initialized['labels'] = true;
        $this->labels = $labels;

        return $this;
    }

    /**
     * The scan overview attached in the metadata of tag.
     *
     * @return array<string, NativeReportSummary>|null
     */
    public function getScanOverview(): ?iterable
    {
        return $this->scanOverview;
    }

    /**
     * The scan overview attached in the metadata of tag.
     *
     * @param array<string, NativeReportSummary>|null $scanOverview
     */
    public function setScanOverview(?iterable $scanOverview): self
    {
        $this->initialized['scanOverview'] = true;
        $this->scanOverview = $scanOverview;

        return $this;
    }

    /**
     * @return list<Accessory>|null
     */
    public function getAccessories(): ?array
    {
        return $this->accessories;
    }

    /**
     * @param list<Accessory>|null $accessories
     */
    public function setAccessories(?array $accessories): self
    {
        $this->initialized['accessories'] = true;
        $this->accessories = $accessories;

        return $this;
    }
}
