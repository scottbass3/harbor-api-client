<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class ImmutableRule
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int|null
     */
    protected $id;
    /**
     * @var int|null
     */
    protected $priority;
    /**
     * @var bool|null
     */
    protected $disabled;
    /**
     * @var string|null
     */
    protected $action;
    /**
     * @var string|null
     */
    protected $template;
    /**
     * @var array<string, mixed>|null
     */
    protected $params;
    /**
     * @var list<ImmutableSelector>|null
     */
    protected $tagSelectors;
    /**
     * @var array<string, list<ImmutableSelector>>|null
     */
    protected $scopeSelectors;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function setId(?int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    public function getPriority(): ?int
    {
        return $this->priority;
    }

    public function setPriority(?int $priority): self
    {
        $this->initialized['priority'] = true;
        $this->priority = $priority;

        return $this;
    }

    public function getDisabled(): ?bool
    {
        return $this->disabled;
    }

    public function setDisabled(?bool $disabled): self
    {
        $this->initialized['disabled'] = true;
        $this->disabled = $disabled;

        return $this;
    }

    public function getAction(): ?string
    {
        return $this->action;
    }

    public function setAction(?string $action): self
    {
        $this->initialized['action'] = true;
        $this->action = $action;

        return $this;
    }

    public function getTemplate(): ?string
    {
        return $this->template;
    }

    public function setTemplate(?string $template): self
    {
        $this->initialized['template'] = true;
        $this->template = $template;

        return $this;
    }

    /**
     * @return array<string, mixed>|null
     */
    public function getParams(): ?iterable
    {
        return $this->params;
    }

    /**
     * @param array<string, mixed>|null $params
     */
    public function setParams(?iterable $params): self
    {
        $this->initialized['params'] = true;
        $this->params = $params;

        return $this;
    }

    /**
     * @return list<ImmutableSelector>|null
     */
    public function getTagSelectors(): ?array
    {
        return $this->tagSelectors;
    }

    /**
     * @param list<ImmutableSelector>|null $tagSelectors
     */
    public function setTagSelectors(?array $tagSelectors): self
    {
        $this->initialized['tagSelectors'] = true;
        $this->tagSelectors = $tagSelectors;

        return $this;
    }

    /**
     * @return array<string, list<ImmutableSelector>>|null
     */
    public function getScopeSelectors(): ?iterable
    {
        return $this->scopeSelectors;
    }

    /**
     * @param array<string, list<ImmutableSelector>>|null $scopeSelectors
     */
    public function setScopeSelectors(?iterable $scopeSelectors): self
    {
        $this->initialized['scopeSelectors'] = true;
        $this->scopeSelectors = $scopeSelectors;

        return $this;
    }
}
