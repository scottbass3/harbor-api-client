<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Model;

class ScheduleObj
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'.
     * 'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and
     * 'None' means to cancel the schedule.
     *
     * @var string|null
     */
    protected $type;
    /**
     * A cron expression, a time-based job scheduler.
     *
     * @var string|null
     */
    protected $cron;
    /**
     * The next time to schedule to run the job.
     *
     * @var \DateTimeInterface|null
     */
    protected $nextScheduledTime;

    /**
     * The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'.
     * 'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and
     * 'None' means to cancel the schedule.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'.
     * 'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and
     * 'None' means to cancel the schedule.
     */
    public function setType(?string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * A cron expression, a time-based job scheduler.
     */
    public function getCron(): ?string
    {
        return $this->cron;
    }

    /**
     * A cron expression, a time-based job scheduler.
     */
    public function setCron(?string $cron): self
    {
        $this->initialized['cron'] = true;
        $this->cron = $cron;

        return $this;
    }

    /**
     * The next time to schedule to run the job.
     */
    public function getNextScheduledTime(): ?\DateTimeInterface
    {
        return $this->nextScheduledTime;
    }

    /**
     * The next time to schedule to run the job.
     */
    public function setNextScheduledTime(?\DateTimeInterface $nextScheduledTime): self
    {
        $this->initialized['nextScheduledTime'] = true;
        $this->nextScheduledTime = $nextScheduledTime;

        return $this;
    }
}
