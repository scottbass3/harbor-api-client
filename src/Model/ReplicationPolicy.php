<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Model;

class ReplicationPolicy
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The policy ID.
     *
     * @var int|null
     */
    protected $id;
    /**
     * The policy name.
     *
     * @var string|null
     */
    protected $name;
    /**
     * The description of the policy.
     *
     * @var string|null
     */
    protected $description;
    /**
     * @var Registry|null
     */
    protected $srcRegistry;
    /**
     * @var Registry|null
     */
    protected $destRegistry;
    /**
     * The destination namespace.
     *
     * @var string|null
     */
    protected $destNamespace;
    /**
     * Specify how many path components will be replaced by the provided destination namespace.
     * The default value is -1 in which case the legacy mode will be applied.
     *
     * @var int|null
     */
    protected $destNamespaceReplaceCount;
    /**
     * @var ReplicationTrigger|null
     */
    protected $trigger;
    /**
     * The replication policy filter array.
     *
     * @var list<ReplicationFilter>|null
     */
    protected $filters;
    /**
     * Whether to replicate the deletion operation.
     *
     * @var bool|null
     */
    protected $replicateDeletion;
    /**
     * Deprecated, use "replicate_deletion" instead. Whether to replicate the deletion operation.
     *
     * @var bool|null
     */
    protected $deletion;
    /**
     * Whether to override the resources on the destination registry.
     *
     * @var bool|null
     */
    protected $override;
    /**
     * Whether the policy is enabled or not.
     *
     * @var bool|null
     */
    protected $enabled;
    /**
     * The create time of the policy.
     *
     * @var \DateTimeInterface|null
     */
    protected $creationTime;
    /**
     * The update time of the policy.
     *
     * @var \DateTimeInterface|null
     */
    protected $updateTime;
    /**
     * speed limit for each task.
     *
     * @var int|null
     */
    protected $speed;
    /**
     * Whether to enable copy by chunk.
     *
     * @var bool|null
     */
    protected $copyByChunk;

    /**
     * The policy ID.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * The policy ID.
     */
    public function setId(?int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The policy name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * The policy name.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * The description of the policy.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * The description of the policy.
     */
    public function setDescription(?string $description): self
    {
        $this->initialized['description'] = true;
        $this->description = $description;

        return $this;
    }

    public function getSrcRegistry(): ?Registry
    {
        return $this->srcRegistry;
    }

    public function setSrcRegistry(?Registry $srcRegistry): self
    {
        $this->initialized['srcRegistry'] = true;
        $this->srcRegistry = $srcRegistry;

        return $this;
    }

    public function getDestRegistry(): ?Registry
    {
        return $this->destRegistry;
    }

    public function setDestRegistry(?Registry $destRegistry): self
    {
        $this->initialized['destRegistry'] = true;
        $this->destRegistry = $destRegistry;

        return $this;
    }

    /**
     * The destination namespace.
     */
    public function getDestNamespace(): ?string
    {
        return $this->destNamespace;
    }

    /**
     * The destination namespace.
     */
    public function setDestNamespace(?string $destNamespace): self
    {
        $this->initialized['destNamespace'] = true;
        $this->destNamespace = $destNamespace;

        return $this;
    }

    /**
     * Specify how many path components will be replaced by the provided destination namespace.
     * The default value is -1 in which case the legacy mode will be applied.
     */
    public function getDestNamespaceReplaceCount(): ?int
    {
        return $this->destNamespaceReplaceCount;
    }

    /**
     * Specify how many path components will be replaced by the provided destination namespace.
     * The default value is -1 in which case the legacy mode will be applied.
     */
    public function setDestNamespaceReplaceCount(?int $destNamespaceReplaceCount): self
    {
        $this->initialized['destNamespaceReplaceCount'] = true;
        $this->destNamespaceReplaceCount = $destNamespaceReplaceCount;

        return $this;
    }

    public function getTrigger(): ?ReplicationTrigger
    {
        return $this->trigger;
    }

    public function setTrigger(?ReplicationTrigger $trigger): self
    {
        $this->initialized['trigger'] = true;
        $this->trigger = $trigger;

        return $this;
    }

    /**
     * The replication policy filter array.
     *
     * @return list<ReplicationFilter>|null
     */
    public function getFilters(): ?array
    {
        return $this->filters;
    }

    /**
     * The replication policy filter array.
     *
     * @param list<ReplicationFilter>|null $filters
     */
    public function setFilters(?array $filters): self
    {
        $this->initialized['filters'] = true;
        $this->filters = $filters;

        return $this;
    }

    /**
     * Whether to replicate the deletion operation.
     */
    public function getReplicateDeletion(): ?bool
    {
        return $this->replicateDeletion;
    }

    /**
     * Whether to replicate the deletion operation.
     */
    public function setReplicateDeletion(?bool $replicateDeletion): self
    {
        $this->initialized['replicateDeletion'] = true;
        $this->replicateDeletion = $replicateDeletion;

        return $this;
    }

    /**
     * Deprecated, use "replicate_deletion" instead. Whether to replicate the deletion operation.
     */
    public function getDeletion(): ?bool
    {
        return $this->deletion;
    }

    /**
     * Deprecated, use "replicate_deletion" instead. Whether to replicate the deletion operation.
     */
    public function setDeletion(?bool $deletion): self
    {
        $this->initialized['deletion'] = true;
        $this->deletion = $deletion;

        return $this;
    }

    /**
     * Whether to override the resources on the destination registry.
     */
    public function getOverride(): ?bool
    {
        return $this->override;
    }

    /**
     * Whether to override the resources on the destination registry.
     */
    public function setOverride(?bool $override): self
    {
        $this->initialized['override'] = true;
        $this->override = $override;

        return $this;
    }

    /**
     * Whether the policy is enabled or not.
     */
    public function getEnabled(): ?bool
    {
        return $this->enabled;
    }

    /**
     * Whether the policy is enabled or not.
     */
    public function setEnabled(?bool $enabled): self
    {
        $this->initialized['enabled'] = true;
        $this->enabled = $enabled;

        return $this;
    }

    /**
     * The create time of the policy.
     */
    public function getCreationTime(): ?\DateTimeInterface
    {
        return $this->creationTime;
    }

    /**
     * The create time of the policy.
     */
    public function setCreationTime(?\DateTimeInterface $creationTime): self
    {
        $this->initialized['creationTime'] = true;
        $this->creationTime = $creationTime;

        return $this;
    }

    /**
     * The update time of the policy.
     */
    public function getUpdateTime(): ?\DateTimeInterface
    {
        return $this->updateTime;
    }

    /**
     * The update time of the policy.
     */
    public function setUpdateTime(?\DateTimeInterface $updateTime): self
    {
        $this->initialized['updateTime'] = true;
        $this->updateTime = $updateTime;

        return $this;
    }

    /**
     * speed limit for each task.
     */
    public function getSpeed(): ?int
    {
        return $this->speed;
    }

    /**
     * speed limit for each task.
     */
    public function setSpeed(?int $speed): self
    {
        $this->initialized['speed'] = true;
        $this->speed = $speed;

        return $this;
    }

    /**
     * Whether to enable copy by chunk.
     */
    public function getCopyByChunk(): ?bool
    {
        return $this->copyByChunk;
    }

    /**
     * Whether to enable copy by chunk.
     */
    public function setCopyByChunk(?bool $copyByChunk): self
    {
        $this->initialized['copyByChunk'] = true;
        $this->copyByChunk = $copyByChunk;

        return $this;
    }
}
