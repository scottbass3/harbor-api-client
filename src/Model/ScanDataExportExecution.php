<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Model;

class ScanDataExportExecution
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The ID of the execution.
     *
     * @var int|null
     */
    protected $id;
    /**
     * The ID if the user triggering the export job.
     *
     * @var int|null
     */
    protected $userId;
    /**
     * The status of the execution.
     *
     * @var string|null
     */
    protected $status;
    /**
     * The trigger mode.
     *
     * @var string|null
     */
    protected $trigger;
    /**
     * The start time.
     *
     * @var \DateTimeInterface|null
     */
    protected $startTime;
    /**
     * The end time.
     *
     * @var \DateTimeInterface|null
     */
    protected $endTime;
    /**
     * The status text.
     *
     * @var string|null
     */
    protected $statusText;
    /**
     * The name of the user triggering the job.
     *
     * @var string|null
     */
    protected $userName;
    /**
     * Indicates whether the export artifact is present in registry.
     *
     * @var bool|null
     */
    protected $filePresent;

    /**
     * The ID of the execution.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * The ID of the execution.
     */
    public function setId(?int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The ID if the user triggering the export job.
     */
    public function getUserId(): ?int
    {
        return $this->userId;
    }

    /**
     * The ID if the user triggering the export job.
     */
    public function setUserId(?int $userId): self
    {
        $this->initialized['userId'] = true;
        $this->userId = $userId;

        return $this;
    }

    /**
     * The status of the execution.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * The status of the execution.
     */
    public function setStatus(?string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }

    /**
     * The trigger mode.
     */
    public function getTrigger(): ?string
    {
        return $this->trigger;
    }

    /**
     * The trigger mode.
     */
    public function setTrigger(?string $trigger): self
    {
        $this->initialized['trigger'] = true;
        $this->trigger = $trigger;

        return $this;
    }

    /**
     * The start time.
     */
    public function getStartTime(): ?\DateTimeInterface
    {
        return $this->startTime;
    }

    /**
     * The start time.
     */
    public function setStartTime(?\DateTimeInterface $startTime): self
    {
        $this->initialized['startTime'] = true;
        $this->startTime = $startTime;

        return $this;
    }

    /**
     * The end time.
     */
    public function getEndTime(): ?\DateTimeInterface
    {
        return $this->endTime;
    }

    /**
     * The end time.
     */
    public function setEndTime(?\DateTimeInterface $endTime): self
    {
        $this->initialized['endTime'] = true;
        $this->endTime = $endTime;

        return $this;
    }

    /**
     * The status text.
     */
    public function getStatusText(): ?string
    {
        return $this->statusText;
    }

    /**
     * The status text.
     */
    public function setStatusText(?string $statusText): self
    {
        $this->initialized['statusText'] = true;
        $this->statusText = $statusText;

        return $this;
    }

    /**
     * The name of the user triggering the job.
     */
    public function getUserName(): ?string
    {
        return $this->userName;
    }

    /**
     * The name of the user triggering the job.
     */
    public function setUserName(?string $userName): self
    {
        $this->initialized['userName'] = true;
        $this->userName = $userName;

        return $this;
    }

    /**
     * Indicates whether the export artifact is present in registry.
     */
    public function getFilePresent(): ?bool
    {
        return $this->filePresent;
    }

    /**
     * Indicates whether the export artifact is present in registry.
     */
    public function setFilePresent(?bool $filePresent): self
    {
        $this->initialized['filePresent'] = true;
        $this->filePresent = $filePresent;

        return $this;
    }
}
