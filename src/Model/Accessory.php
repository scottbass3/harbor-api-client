<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class Accessory
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The ID of the accessory.
     *
     * @var int|null
     */
    protected $id;
    /**
     * The artifact id of the accessory.
     *
     * @var int|null
     */
    protected $artifactId;
    /**
     * Going to be deprecated, use repo and digest for insteand. The subject artifact id of the accessory.
     *
     * @var int|null
     */
    protected $subjectArtifactId;
    /**
     * The subject artifact digest of the accessory.
     *
     * @var string|null
     */
    protected $subjectArtifactDigest;
    /**
     * The subject artifact repository name of the accessory.
     *
     * @var string|null
     */
    protected $subjectArtifactRepo;
    /**
     * The artifact size of the accessory.
     *
     * @var int|null
     */
    protected $size;
    /**
     * The artifact digest of the accessory.
     *
     * @var string|null
     */
    protected $digest;
    /**
     * The artifact size of the accessory.
     *
     * @var string|null
     */
    protected $type;
    /**
     * The icon of the accessory.
     *
     * @var string|null
     */
    protected $icon;
    /**
     * The creation time of the accessory.
     *
     * @var \DateTimeInterface|null
     */
    protected $creationTime;

    /**
     * The ID of the accessory.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * The ID of the accessory.
     */
    public function setId(?int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The artifact id of the accessory.
     */
    public function getArtifactId(): ?int
    {
        return $this->artifactId;
    }

    /**
     * The artifact id of the accessory.
     */
    public function setArtifactId(?int $artifactId): self
    {
        $this->initialized['artifactId'] = true;
        $this->artifactId = $artifactId;

        return $this;
    }

    /**
     * Going to be deprecated, use repo and digest for insteand. The subject artifact id of the accessory.
     */
    public function getSubjectArtifactId(): ?int
    {
        return $this->subjectArtifactId;
    }

    /**
     * Going to be deprecated, use repo and digest for insteand. The subject artifact id of the accessory.
     */
    public function setSubjectArtifactId(?int $subjectArtifactId): self
    {
        $this->initialized['subjectArtifactId'] = true;
        $this->subjectArtifactId = $subjectArtifactId;

        return $this;
    }

    /**
     * The subject artifact digest of the accessory.
     */
    public function getSubjectArtifactDigest(): ?string
    {
        return $this->subjectArtifactDigest;
    }

    /**
     * The subject artifact digest of the accessory.
     */
    public function setSubjectArtifactDigest(?string $subjectArtifactDigest): self
    {
        $this->initialized['subjectArtifactDigest'] = true;
        $this->subjectArtifactDigest = $subjectArtifactDigest;

        return $this;
    }

    /**
     * The subject artifact repository name of the accessory.
     */
    public function getSubjectArtifactRepo(): ?string
    {
        return $this->subjectArtifactRepo;
    }

    /**
     * The subject artifact repository name of the accessory.
     */
    public function setSubjectArtifactRepo(?string $subjectArtifactRepo): self
    {
        $this->initialized['subjectArtifactRepo'] = true;
        $this->subjectArtifactRepo = $subjectArtifactRepo;

        return $this;
    }

    /**
     * The artifact size of the accessory.
     */
    public function getSize(): ?int
    {
        return $this->size;
    }

    /**
     * The artifact size of the accessory.
     */
    public function setSize(?int $size): self
    {
        $this->initialized['size'] = true;
        $this->size = $size;

        return $this;
    }

    /**
     * The artifact digest of the accessory.
     */
    public function getDigest(): ?string
    {
        return $this->digest;
    }

    /**
     * The artifact digest of the accessory.
     */
    public function setDigest(?string $digest): self
    {
        $this->initialized['digest'] = true;
        $this->digest = $digest;

        return $this;
    }

    /**
     * The artifact size of the accessory.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * The artifact size of the accessory.
     */
    public function setType(?string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * The icon of the accessory.
     */
    public function getIcon(): ?string
    {
        return $this->icon;
    }

    /**
     * The icon of the accessory.
     */
    public function setIcon(?string $icon): self
    {
        $this->initialized['icon'] = true;
        $this->icon = $icon;

        return $this;
    }

    /**
     * The creation time of the accessory.
     */
    public function getCreationTime(): ?\DateTimeInterface
    {
        return $this->creationTime;
    }

    /**
     * The creation time of the accessory.
     */
    public function setCreationTime(?\DateTimeInterface $creationTime): self
    {
        $this->initialized['creationTime'] = true;
        $this->creationTime = $creationTime;

        return $this;
    }
}
