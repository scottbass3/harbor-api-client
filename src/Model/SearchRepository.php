<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class SearchRepository
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The ID of the project that the repository belongs to.
     *
     * @var int|null
     */
    protected $projectId;
    /**
     * The name of the project that the repository belongs to.
     *
     * @var string|null
     */
    protected $projectName;
    /**
     * The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not).
     *
     * @var bool|null
     */
    protected $projectPublic;
    /**
     * The name of the repository.
     *
     * @var string|null
     */
    protected $repositoryName;
    /**
     * The count how many times the repository is pulled.
     *
     * @var int|null
     */
    protected $pullCount;
    /**
     * The count of artifacts in the repository.
     *
     * @var int|null
     */
    protected $artifactCount;

    /**
     * The ID of the project that the repository belongs to.
     */
    public function getProjectId(): ?int
    {
        return $this->projectId;
    }

    /**
     * The ID of the project that the repository belongs to.
     */
    public function setProjectId(?int $projectId): self
    {
        $this->initialized['projectId'] = true;
        $this->projectId = $projectId;

        return $this;
    }

    /**
     * The name of the project that the repository belongs to.
     */
    public function getProjectName(): ?string
    {
        return $this->projectName;
    }

    /**
     * The name of the project that the repository belongs to.
     */
    public function setProjectName(?string $projectName): self
    {
        $this->initialized['projectName'] = true;
        $this->projectName = $projectName;

        return $this;
    }

    /**
     * The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not).
     */
    public function getProjectPublic(): ?bool
    {
        return $this->projectPublic;
    }

    /**
     * The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not).
     */
    public function setProjectPublic(?bool $projectPublic): self
    {
        $this->initialized['projectPublic'] = true;
        $this->projectPublic = $projectPublic;

        return $this;
    }

    /**
     * The name of the repository.
     */
    public function getRepositoryName(): ?string
    {
        return $this->repositoryName;
    }

    /**
     * The name of the repository.
     */
    public function setRepositoryName(?string $repositoryName): self
    {
        $this->initialized['repositoryName'] = true;
        $this->repositoryName = $repositoryName;

        return $this;
    }

    /**
     * The count how many times the repository is pulled.
     */
    public function getPullCount(): ?int
    {
        return $this->pullCount;
    }

    /**
     * The count how many times the repository is pulled.
     */
    public function setPullCount(?int $pullCount): self
    {
        $this->initialized['pullCount'] = true;
        $this->pullCount = $pullCount;

        return $this;
    }

    /**
     * The count of artifacts in the repository.
     */
    public function getArtifactCount(): ?int
    {
        return $this->artifactCount;
    }

    /**
     * The count of artifacts in the repository.
     */
    public function setArtifactCount(?int $artifactCount): self
    {
        $this->initialized['artifactCount'] = true;
        $this->artifactCount = $artifactCount;

        return $this;
    }
}
