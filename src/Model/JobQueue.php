<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class JobQueue
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The type of the job queue.
     *
     * @var string|null
     */
    protected $jobType;
    /**
     * The count of jobs in the job queue.
     *
     * @var int|null
     */
    protected $count;
    /**
     * The latency the job queue (seconds).
     *
     * @var int|null
     */
    protected $latency;
    /**
     * The paused status of the job queue.
     *
     * @var bool|null
     */
    protected $paused;

    /**
     * The type of the job queue.
     */
    public function getJobType(): ?string
    {
        return $this->jobType;
    }

    /**
     * The type of the job queue.
     */
    public function setJobType(?string $jobType): self
    {
        $this->initialized['jobType'] = true;
        $this->jobType = $jobType;

        return $this;
    }

    /**
     * The count of jobs in the job queue.
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
     * The count of jobs in the job queue.
     */
    public function setCount(?int $count): self
    {
        $this->initialized['count'] = true;
        $this->count = $count;

        return $this;
    }

    /**
     * The latency the job queue (seconds).
     */
    public function getLatency(): ?int
    {
        return $this->latency;
    }

    /**
     * The latency the job queue (seconds).
     */
    public function setLatency(?int $latency): self
    {
        $this->initialized['latency'] = true;
        $this->latency = $latency;

        return $this;
    }

    /**
     * The paused status of the job queue.
     */
    public function getPaused(): ?bool
    {
        return $this->paused;
    }

    /**
     * The paused status of the job queue.
     */
    public function setPaused(?bool $paused): self
    {
        $this->initialized['paused'] = true;
        $this->paused = $paused;

        return $this;
    }
}
