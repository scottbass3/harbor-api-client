<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class UserResp
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string|null
     */
    protected $email;
    /**
     * @var string|null
     */
    protected $realname;
    /**
     * @var string|null
     */
    protected $comment;
    /**
     * @var int|null
     */
    protected $userId;
    /**
     * @var string|null
     */
    protected $username;
    /**
     * @var bool|null
     */
    protected $sysadminFlag;
    /**
     * indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user.
     *
     * @var bool|null
     */
    protected $adminRoleInAuth;
    /**
     * @var OIDCUserInfo|null
     */
    protected $oidcUserMeta;
    /**
     * The creation time of the user.
     *
     * @var \DateTimeInterface|null
     */
    protected $creationTime;
    /**
     * The update time of the user.
     *
     * @var \DateTimeInterface|null
     */
    protected $updateTime;

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(?string $email): self
    {
        $this->initialized['email'] = true;
        $this->email = $email;

        return $this;
    }

    public function getRealname(): ?string
    {
        return $this->realname;
    }

    public function setRealname(?string $realname): self
    {
        $this->initialized['realname'] = true;
        $this->realname = $realname;

        return $this;
    }

    public function getComment(): ?string
    {
        return $this->comment;
    }

    public function setComment(?string $comment): self
    {
        $this->initialized['comment'] = true;
        $this->comment = $comment;

        return $this;
    }

    public function getUserId(): ?int
    {
        return $this->userId;
    }

    public function setUserId(?int $userId): self
    {
        $this->initialized['userId'] = true;
        $this->userId = $userId;

        return $this;
    }

    public function getUsername(): ?string
    {
        return $this->username;
    }

    public function setUsername(?string $username): self
    {
        $this->initialized['username'] = true;
        $this->username = $username;

        return $this;
    }

    public function getSysadminFlag(): ?bool
    {
        return $this->sysadminFlag;
    }

    public function setSysadminFlag(?bool $sysadminFlag): self
    {
        $this->initialized['sysadminFlag'] = true;
        $this->sysadminFlag = $sysadminFlag;

        return $this;
    }

    /**
     * indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user.
     */
    public function getAdminRoleInAuth(): ?bool
    {
        return $this->adminRoleInAuth;
    }

    /**
     * indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user.
     */
    public function setAdminRoleInAuth(?bool $adminRoleInAuth): self
    {
        $this->initialized['adminRoleInAuth'] = true;
        $this->adminRoleInAuth = $adminRoleInAuth;

        return $this;
    }

    public function getOidcUserMeta(): ?OIDCUserInfo
    {
        return $this->oidcUserMeta;
    }

    public function setOidcUserMeta(?OIDCUserInfo $oidcUserMeta): self
    {
        $this->initialized['oidcUserMeta'] = true;
        $this->oidcUserMeta = $oidcUserMeta;

        return $this;
    }

    /**
     * The creation time of the user.
     */
    public function getCreationTime(): ?\DateTimeInterface
    {
        return $this->creationTime;
    }

    /**
     * The creation time of the user.
     */
    public function setCreationTime(?\DateTimeInterface $creationTime): self
    {
        $this->initialized['creationTime'] = true;
        $this->creationTime = $creationTime;

        return $this;
    }

    /**
     * The update time of the user.
     */
    public function getUpdateTime(): ?\DateTimeInterface
    {
        return $this->updateTime;
    }

    /**
     * The update time of the user.
     */
    public function setUpdateTime(?\DateTimeInterface $updateTime): self
    {
        $this->initialized['updateTime'] = true;
        $this->updateTime = $updateTime;

        return $this;
    }
}
