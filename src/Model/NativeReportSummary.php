<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class NativeReportSummary
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * id of the native scan report.
     *
     * @var string|null
     */
    protected $reportId;
    /**
     * The status of the report generating process.
     *
     * @var string|null
     */
    protected $scanStatus;
    /**
     * The overall severity.
     *
     * @var string|null
     */
    protected $severity;
    /**
     * The seconds spent for generating the report.
     *
     * @var int|null
     */
    protected $duration;
    /**
     * VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.
     *
     * @var VulnerabilitySummary|null
     */
    protected $summary;
    /**
     * The start time of the scan process that generating report.
     *
     * @var \DateTimeInterface|null
     */
    protected $startTime;
    /**
     * The end time of the scan process that generating report.
     *
     * @var \DateTimeInterface|null
     */
    protected $endTime;
    /**
     * The complete percent of the scanning which value is between 0 and 100.
     *
     * @var int|null
     */
    protected $completePercent;
    /**
     * @var Scanner|null
     */
    protected $scanner;

    /**
     * id of the native scan report.
     */
    public function getReportId(): ?string
    {
        return $this->reportId;
    }

    /**
     * id of the native scan report.
     */
    public function setReportId(?string $reportId): self
    {
        $this->initialized['reportId'] = true;
        $this->reportId = $reportId;

        return $this;
    }

    /**
     * The status of the report generating process.
     */
    public function getScanStatus(): ?string
    {
        return $this->scanStatus;
    }

    /**
     * The status of the report generating process.
     */
    public function setScanStatus(?string $scanStatus): self
    {
        $this->initialized['scanStatus'] = true;
        $this->scanStatus = $scanStatus;

        return $this;
    }

    /**
     * The overall severity.
     */
    public function getSeverity(): ?string
    {
        return $this->severity;
    }

    /**
     * The overall severity.
     */
    public function setSeverity(?string $severity): self
    {
        $this->initialized['severity'] = true;
        $this->severity = $severity;

        return $this;
    }

    /**
     * The seconds spent for generating the report.
     */
    public function getDuration(): ?int
    {
        return $this->duration;
    }

    /**
     * The seconds spent for generating the report.
     */
    public function setDuration(?int $duration): self
    {
        $this->initialized['duration'] = true;
        $this->duration = $duration;

        return $this;
    }

    /**
     * VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.
     */
    public function getSummary(): ?VulnerabilitySummary
    {
        return $this->summary;
    }

    /**
     * VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.
     */
    public function setSummary(?VulnerabilitySummary $summary): self
    {
        $this->initialized['summary'] = true;
        $this->summary = $summary;

        return $this;
    }

    /**
     * The start time of the scan process that generating report.
     */
    public function getStartTime(): ?\DateTimeInterface
    {
        return $this->startTime;
    }

    /**
     * The start time of the scan process that generating report.
     */
    public function setStartTime(?\DateTimeInterface $startTime): self
    {
        $this->initialized['startTime'] = true;
        $this->startTime = $startTime;

        return $this;
    }

    /**
     * The end time of the scan process that generating report.
     */
    public function getEndTime(): ?\DateTimeInterface
    {
        return $this->endTime;
    }

    /**
     * The end time of the scan process that generating report.
     */
    public function setEndTime(?\DateTimeInterface $endTime): self
    {
        $this->initialized['endTime'] = true;
        $this->endTime = $endTime;

        return $this;
    }

    /**
     * The complete percent of the scanning which value is between 0 and 100.
     */
    public function getCompletePercent(): ?int
    {
        return $this->completePercent;
    }

    /**
     * The complete percent of the scanning which value is between 0 and 100.
     */
    public function setCompletePercent(?int $completePercent): self
    {
        $this->initialized['completePercent'] = true;
        $this->completePercent = $completePercent;

        return $this;
    }

    public function getScanner(): ?Scanner
    {
        return $this->scanner;
    }

    public function setScanner(?Scanner $scanner): self
    {
        $this->initialized['scanner'] = true;
        $this->scanner = $scanner;

        return $this;
    }
}
