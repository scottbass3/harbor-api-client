<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Model;

class ScannerRegistration
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The unique identifier of this registration.
     *
     * @var string|null
     */
    protected $uuid;
    /**
     * The name of this registration.
     *
     * @var string|null
     */
    protected $name;
    /**
     * An optional description of this registration.
     *
     * @var string|null
     */
    protected $description;
    /**
     * A base URL of the scanner adapter.
     *
     * @var string|null
     */
    protected $url;
    /**
     * Indicate whether the registration is enabled or not.
     *
     * @var bool|null
     */
    protected $disabled = false;
    /**
     * Indicate if the registration is set as the system default one.
     *
     * @var bool|null
     */
    protected $isDefault = false;
    /**
     * Specify what authentication approach is adopted for the HTTP communications.
     * Supported types Basic", "Bearer" and api key header "X-ScannerAdapter-API-Key".
     *
     * @var string|null
     */
    protected $auth = '';
    /**
     * An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
     *
     * @var string|null
     */
    protected $accessCredential;
    /**
     * Indicate if skip the certificate verification when sending HTTP requests.
     *
     * @var bool|null
     */
    protected $skipCertVerify = false;
    /**
     * Indicate whether use internal registry addr for the scanner to pull content or not.
     *
     * @var bool|null
     */
    protected $useInternalAddr = false;
    /**
     * The creation time of this registration.
     *
     * @var \DateTimeInterface|null
     */
    protected $createTime;
    /**
     * The update time of this registration.
     *
     * @var \DateTimeInterface|null
     */
    protected $updateTime;
    /**
     * Optional property to describe the name of the scanner registration.
     *
     * @var string|null
     */
    protected $adapter;
    /**
     * Optional property to describe the vendor of the scanner registration.
     *
     * @var string|null
     */
    protected $vendor;
    /**
     * Optional property to describe the version of the scanner registration.
     *
     * @var string|null
     */
    protected $version;
    /**
     * Indicate the healthy of the registration.
     *
     * @var string|null
     */
    protected $health = '';

    /**
     * The unique identifier of this registration.
     */
    public function getUuid(): ?string
    {
        return $this->uuid;
    }

    /**
     * The unique identifier of this registration.
     */
    public function setUuid(?string $uuid): self
    {
        $this->initialized['uuid'] = true;
        $this->uuid = $uuid;

        return $this;
    }

    /**
     * The name of this registration.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * The name of this registration.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * An optional description of this registration.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * An optional description of this registration.
     */
    public function setDescription(?string $description): self
    {
        $this->initialized['description'] = true;
        $this->description = $description;

        return $this;
    }

    /**
     * A base URL of the scanner adapter.
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * A base URL of the scanner adapter.
     */
    public function setUrl(?string $url): self
    {
        $this->initialized['url'] = true;
        $this->url = $url;

        return $this;
    }

    /**
     * Indicate whether the registration is enabled or not.
     */
    public function getDisabled(): ?bool
    {
        return $this->disabled;
    }

    /**
     * Indicate whether the registration is enabled or not.
     */
    public function setDisabled(?bool $disabled): self
    {
        $this->initialized['disabled'] = true;
        $this->disabled = $disabled;

        return $this;
    }

    /**
     * Indicate if the registration is set as the system default one.
     */
    public function getIsDefault(): ?bool
    {
        return $this->isDefault;
    }

    /**
     * Indicate if the registration is set as the system default one.
     */
    public function setIsDefault(?bool $isDefault): self
    {
        $this->initialized['isDefault'] = true;
        $this->isDefault = $isDefault;

        return $this;
    }

    /**
     * Specify what authentication approach is adopted for the HTTP communications.
     * Supported types Basic", "Bearer" and api key header "X-ScannerAdapter-API-Key".
     */
    public function getAuth(): ?string
    {
        return $this->auth;
    }

    /**
     * Specify what authentication approach is adopted for the HTTP communications.
     * Supported types Basic", "Bearer" and api key header "X-ScannerAdapter-API-Key".
     */
    public function setAuth(?string $auth): self
    {
        $this->initialized['auth'] = true;
        $this->auth = $auth;

        return $this;
    }

    /**
     * An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
     */
    public function getAccessCredential(): ?string
    {
        return $this->accessCredential;
    }

    /**
     * An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
     */
    public function setAccessCredential(?string $accessCredential): self
    {
        $this->initialized['accessCredential'] = true;
        $this->accessCredential = $accessCredential;

        return $this;
    }

    /**
     * Indicate if skip the certificate verification when sending HTTP requests.
     */
    public function getSkipCertVerify(): ?bool
    {
        return $this->skipCertVerify;
    }

    /**
     * Indicate if skip the certificate verification when sending HTTP requests.
     */
    public function setSkipCertVerify(?bool $skipCertVerify): self
    {
        $this->initialized['skipCertVerify'] = true;
        $this->skipCertVerify = $skipCertVerify;

        return $this;
    }

    /**
     * Indicate whether use internal registry addr for the scanner to pull content or not.
     */
    public function getUseInternalAddr(): ?bool
    {
        return $this->useInternalAddr;
    }

    /**
     * Indicate whether use internal registry addr for the scanner to pull content or not.
     */
    public function setUseInternalAddr(?bool $useInternalAddr): self
    {
        $this->initialized['useInternalAddr'] = true;
        $this->useInternalAddr = $useInternalAddr;

        return $this;
    }

    /**
     * The creation time of this registration.
     */
    public function getCreateTime(): ?\DateTimeInterface
    {
        return $this->createTime;
    }

    /**
     * The creation time of this registration.
     */
    public function setCreateTime(?\DateTimeInterface $createTime): self
    {
        $this->initialized['createTime'] = true;
        $this->createTime = $createTime;

        return $this;
    }

    /**
     * The update time of this registration.
     */
    public function getUpdateTime(): ?\DateTimeInterface
    {
        return $this->updateTime;
    }

    /**
     * The update time of this registration.
     */
    public function setUpdateTime(?\DateTimeInterface $updateTime): self
    {
        $this->initialized['updateTime'] = true;
        $this->updateTime = $updateTime;

        return $this;
    }

    /**
     * Optional property to describe the name of the scanner registration.
     */
    public function getAdapter(): ?string
    {
        return $this->adapter;
    }

    /**
     * Optional property to describe the name of the scanner registration.
     */
    public function setAdapter(?string $adapter): self
    {
        $this->initialized['adapter'] = true;
        $this->adapter = $adapter;

        return $this;
    }

    /**
     * Optional property to describe the vendor of the scanner registration.
     */
    public function getVendor(): ?string
    {
        return $this->vendor;
    }

    /**
     * Optional property to describe the vendor of the scanner registration.
     */
    public function setVendor(?string $vendor): self
    {
        $this->initialized['vendor'] = true;
        $this->vendor = $vendor;

        return $this;
    }

    /**
     * Optional property to describe the version of the scanner registration.
     */
    public function getVersion(): ?string
    {
        return $this->version;
    }

    /**
     * Optional property to describe the version of the scanner registration.
     */
    public function setVersion(?string $version): self
    {
        $this->initialized['version'] = true;
        $this->version = $version;

        return $this;
    }

    /**
     * Indicate the healthy of the registration.
     */
    public function getHealth(): ?string
    {
        return $this->health;
    }

    /**
     * Indicate the healthy of the registration.
     */
    public function setHealth(?string $health): self
    {
        $this->initialized['health'] = true;
        $this->health = $health;

        return $this;
    }
}
