<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class AuthproxySetting
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'.
     *
     * @var string|null
     */
    protected $endpoint;
    /**
     * The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'.
     *
     * @var string|null
     */
    protected $tokenreivewEndpoint;
    /**
     * The flag to determine whether Harbor can skip search the user/group when adding him as a member.
     *
     * @var bool|null
     */
    protected $skipSearch;
    /**
     * The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.
     *
     * @var bool|null
     */
    protected $verifyCert;
    /**
     * The certificate to be pinned when connecting auth proxy.
     *
     * @var string|null
     */
    protected $serverCertificate;

    /**
     * The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'.
     */
    public function getEndpoint(): ?string
    {
        return $this->endpoint;
    }

    /**
     * The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'.
     */
    public function setEndpoint(?string $endpoint): self
    {
        $this->initialized['endpoint'] = true;
        $this->endpoint = $endpoint;

        return $this;
    }

    /**
     * The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'.
     */
    public function getTokenreivewEndpoint(): ?string
    {
        return $this->tokenreivewEndpoint;
    }

    /**
     * The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'.
     */
    public function setTokenreivewEndpoint(?string $tokenreivewEndpoint): self
    {
        $this->initialized['tokenreivewEndpoint'] = true;
        $this->tokenreivewEndpoint = $tokenreivewEndpoint;

        return $this;
    }

    /**
     * The flag to determine whether Harbor can skip search the user/group when adding him as a member.
     */
    public function getSkipSearch(): ?bool
    {
        return $this->skipSearch;
    }

    /**
     * The flag to determine whether Harbor can skip search the user/group when adding him as a member.
     */
    public function setSkipSearch(?bool $skipSearch): self
    {
        $this->initialized['skipSearch'] = true;
        $this->skipSearch = $skipSearch;

        return $this;
    }

    /**
     * The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.
     */
    public function getVerifyCert(): ?bool
    {
        return $this->verifyCert;
    }

    /**
     * The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.
     */
    public function setVerifyCert(?bool $verifyCert): self
    {
        $this->initialized['verifyCert'] = true;
        $this->verifyCert = $verifyCert;

        return $this;
    }

    /**
     * The certificate to be pinned when connecting auth proxy.
     */
    public function getServerCertificate(): ?string
    {
        return $this->serverCertificate;
    }

    /**
     * The certificate to be pinned when connecting auth proxy.
     */
    public function setServerCertificate(?string $serverCertificate): self
    {
        $this->initialized['serverCertificate'] = true;
        $this->serverCertificate = $serverCertificate;

        return $this;
    }
}
