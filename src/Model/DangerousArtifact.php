<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class DangerousArtifact
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * the project id of the artifact.
     *
     * @var int|null
     */
    protected $projectId;
    /**
     * the repository name of the artifact.
     *
     * @var string|null
     */
    protected $repositoryName;
    /**
     * the digest of the artifact.
     *
     * @var string|null
     */
    protected $digest;
    /**
     * the count of critical vulnerabilities.
     *
     * @var int|null
     */
    protected $criticalCnt;
    /**
     * the count of high vulnerabilities.
     *
     * @var int|null
     */
    protected $highCnt;
    /**
     * the count of medium vulnerabilities.
     *
     * @var int|null
     */
    protected $mediumCnt;

    /**
     * the project id of the artifact.
     */
    public function getProjectId(): ?int
    {
        return $this->projectId;
    }

    /**
     * the project id of the artifact.
     */
    public function setProjectId(?int $projectId): self
    {
        $this->initialized['projectId'] = true;
        $this->projectId = $projectId;

        return $this;
    }

    /**
     * the repository name of the artifact.
     */
    public function getRepositoryName(): ?string
    {
        return $this->repositoryName;
    }

    /**
     * the repository name of the artifact.
     */
    public function setRepositoryName(?string $repositoryName): self
    {
        $this->initialized['repositoryName'] = true;
        $this->repositoryName = $repositoryName;

        return $this;
    }

    /**
     * the digest of the artifact.
     */
    public function getDigest(): ?string
    {
        return $this->digest;
    }

    /**
     * the digest of the artifact.
     */
    public function setDigest(?string $digest): self
    {
        $this->initialized['digest'] = true;
        $this->digest = $digest;

        return $this;
    }

    /**
     * the count of critical vulnerabilities.
     */
    public function getCriticalCnt(): ?int
    {
        return $this->criticalCnt;
    }

    /**
     * the count of critical vulnerabilities.
     */
    public function setCriticalCnt(?int $criticalCnt): self
    {
        $this->initialized['criticalCnt'] = true;
        $this->criticalCnt = $criticalCnt;

        return $this;
    }

    /**
     * the count of high vulnerabilities.
     */
    public function getHighCnt(): ?int
    {
        return $this->highCnt;
    }

    /**
     * the count of high vulnerabilities.
     */
    public function setHighCnt(?int $highCnt): self
    {
        $this->initialized['highCnt'] = true;
        $this->highCnt = $highCnt;

        return $this;
    }

    /**
     * the count of medium vulnerabilities.
     */
    public function getMediumCnt(): ?int
    {
        return $this->mediumCnt;
    }

    /**
     * the count of medium vulnerabilities.
     */
    public function setMediumCnt(?int $mediumCnt): self
    {
        $this->initialized['mediumCnt'] = true;
        $this->mediumCnt = $mediumCnt;

        return $this;
    }
}
