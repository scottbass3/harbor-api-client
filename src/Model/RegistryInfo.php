<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class RegistryInfo
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The registry type.
     *
     * @var string|null
     */
    protected $type;
    /**
     * The description.
     *
     * @var string|null
     */
    protected $description;
    /**
     * The filters that the registry supports.
     *
     * @var list<FilterStyle>|null
     */
    protected $supportedResourceFilters;
    /**
     * The triggers that the registry supports.
     *
     * @var list<string>|null
     */
    protected $supportedTriggers;
    /**
     * The registry whether support copy by chunk.
     *
     * @var bool|null
     */
    protected $supportedCopyByChunk;

    /**
     * The registry type.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * The registry type.
     */
    public function setType(?string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * The description.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * The description.
     */
    public function setDescription(?string $description): self
    {
        $this->initialized['description'] = true;
        $this->description = $description;

        return $this;
    }

    /**
     * The filters that the registry supports.
     *
     * @return list<FilterStyle>|null
     */
    public function getSupportedResourceFilters(): ?array
    {
        return $this->supportedResourceFilters;
    }

    /**
     * The filters that the registry supports.
     *
     * @param list<FilterStyle>|null $supportedResourceFilters
     */
    public function setSupportedResourceFilters(?array $supportedResourceFilters): self
    {
        $this->initialized['supportedResourceFilters'] = true;
        $this->supportedResourceFilters = $supportedResourceFilters;

        return $this;
    }

    /**
     * The triggers that the registry supports.
     *
     * @return list<string>|null
     */
    public function getSupportedTriggers(): ?array
    {
        return $this->supportedTriggers;
    }

    /**
     * The triggers that the registry supports.
     *
     * @param list<string>|null $supportedTriggers
     */
    public function setSupportedTriggers(?array $supportedTriggers): self
    {
        $this->initialized['supportedTriggers'] = true;
        $this->supportedTriggers = $supportedTriggers;

        return $this;
    }

    /**
     * The registry whether support copy by chunk.
     */
    public function getSupportedCopyByChunk(): ?bool
    {
        return $this->supportedCopyByChunk;
    }

    /**
     * The registry whether support copy by chunk.
     */
    public function setSupportedCopyByChunk(?bool $supportedCopyByChunk): self
    {
        $this->initialized['supportedCopyByChunk'] = true;
        $this->supportedCopyByChunk = $supportedCopyByChunk;

        return $this;
    }
}
