<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class RegistryUpdate
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The registry name.
     *
     * @var string|null
     */
    protected $name;
    /**
     * Description of the registry.
     *
     * @var string|null
     */
    protected $description;
    /**
     * The registry URL.
     *
     * @var string|null
     */
    protected $url;
    /**
     * Credential type of the registry, e.g. 'basic'.
     *
     * @var string|null
     */
    protected $credentialType;
    /**
     * The registry access key.
     *
     * @var string|null
     */
    protected $accessKey;
    /**
     * The registry access secret.
     *
     * @var string|null
     */
    protected $accessSecret;
    /**
     * Whether or not the certificate will be verified when Harbor tries to access the server.
     *
     * @var bool|null
     */
    protected $insecure;

    /**
     * The registry name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * The registry name.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Description of the registry.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Description of the registry.
     */
    public function setDescription(?string $description): self
    {
        $this->initialized['description'] = true;
        $this->description = $description;

        return $this;
    }

    /**
     * The registry URL.
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * The registry URL.
     */
    public function setUrl(?string $url): self
    {
        $this->initialized['url'] = true;
        $this->url = $url;

        return $this;
    }

    /**
     * Credential type of the registry, e.g. 'basic'.
     */
    public function getCredentialType(): ?string
    {
        return $this->credentialType;
    }

    /**
     * Credential type of the registry, e.g. 'basic'.
     */
    public function setCredentialType(?string $credentialType): self
    {
        $this->initialized['credentialType'] = true;
        $this->credentialType = $credentialType;

        return $this;
    }

    /**
     * The registry access key.
     */
    public function getAccessKey(): ?string
    {
        return $this->accessKey;
    }

    /**
     * The registry access key.
     */
    public function setAccessKey(?string $accessKey): self
    {
        $this->initialized['accessKey'] = true;
        $this->accessKey = $accessKey;

        return $this;
    }

    /**
     * The registry access secret.
     */
    public function getAccessSecret(): ?string
    {
        return $this->accessSecret;
    }

    /**
     * The registry access secret.
     */
    public function setAccessSecret(?string $accessSecret): self
    {
        $this->initialized['accessSecret'] = true;
        $this->accessSecret = $accessSecret;

        return $this;
    }

    /**
     * Whether or not the certificate will be verified when Harbor tries to access the server.
     */
    public function getInsecure(): ?bool
    {
        return $this->insecure;
    }

    /**
     * Whether or not the certificate will be verified when Harbor tries to access the server.
     */
    public function setInsecure(?bool $insecure): self
    {
        $this->initialized['insecure'] = true;
        $this->insecure = $insecure;

        return $this;
    }
}
