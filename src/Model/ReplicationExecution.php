<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class ReplicationExecution
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The ID of the execution.
     *
     * @var int|null
     */
    protected $id;
    /**
     * The ID if the policy that the execution belongs to.
     *
     * @var int|null
     */
    protected $policyId;
    /**
     * The status of the execution.
     *
     * @var string|null
     */
    protected $status;
    /**
     * The trigger mode.
     *
     * @var string|null
     */
    protected $trigger;
    /**
     * The start time.
     *
     * @var \DateTimeInterface|null
     */
    protected $startTime;
    /**
     * The end time.
     *
     * @var \DateTimeInterface|null
     */
    protected $endTime;
    /**
     * The status text.
     *
     * @var string|null
     */
    protected $statusText;
    /**
     * The total count of all executions.
     *
     * @var int|null
     */
    protected $total;
    /**
     * The count of failed executions.
     *
     * @var int|null
     */
    protected $failed;
    /**
     * The count of succeed executions.
     *
     * @var int|null
     */
    protected $succeed;
    /**
     * The count of in_progress executions.
     *
     * @var int|null
     */
    protected $inProgress;
    /**
     * The count of stopped executions.
     *
     * @var int|null
     */
    protected $stopped;

    /**
     * The ID of the execution.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * The ID of the execution.
     */
    public function setId(?int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The ID if the policy that the execution belongs to.
     */
    public function getPolicyId(): ?int
    {
        return $this->policyId;
    }

    /**
     * The ID if the policy that the execution belongs to.
     */
    public function setPolicyId(?int $policyId): self
    {
        $this->initialized['policyId'] = true;
        $this->policyId = $policyId;

        return $this;
    }

    /**
     * The status of the execution.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * The status of the execution.
     */
    public function setStatus(?string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }

    /**
     * The trigger mode.
     */
    public function getTrigger(): ?string
    {
        return $this->trigger;
    }

    /**
     * The trigger mode.
     */
    public function setTrigger(?string $trigger): self
    {
        $this->initialized['trigger'] = true;
        $this->trigger = $trigger;

        return $this;
    }

    /**
     * The start time.
     */
    public function getStartTime(): ?\DateTimeInterface
    {
        return $this->startTime;
    }

    /**
     * The start time.
     */
    public function setStartTime(?\DateTimeInterface $startTime): self
    {
        $this->initialized['startTime'] = true;
        $this->startTime = $startTime;

        return $this;
    }

    /**
     * The end time.
     */
    public function getEndTime(): ?\DateTimeInterface
    {
        return $this->endTime;
    }

    /**
     * The end time.
     */
    public function setEndTime(?\DateTimeInterface $endTime): self
    {
        $this->initialized['endTime'] = true;
        $this->endTime = $endTime;

        return $this;
    }

    /**
     * The status text.
     */
    public function getStatusText(): ?string
    {
        return $this->statusText;
    }

    /**
     * The status text.
     */
    public function setStatusText(?string $statusText): self
    {
        $this->initialized['statusText'] = true;
        $this->statusText = $statusText;

        return $this;
    }

    /**
     * The total count of all executions.
     */
    public function getTotal(): ?int
    {
        return $this->total;
    }

    /**
     * The total count of all executions.
     */
    public function setTotal(?int $total): self
    {
        $this->initialized['total'] = true;
        $this->total = $total;

        return $this;
    }

    /**
     * The count of failed executions.
     */
    public function getFailed(): ?int
    {
        return $this->failed;
    }

    /**
     * The count of failed executions.
     */
    public function setFailed(?int $failed): self
    {
        $this->initialized['failed'] = true;
        $this->failed = $failed;

        return $this;
    }

    /**
     * The count of succeed executions.
     */
    public function getSucceed(): ?int
    {
        return $this->succeed;
    }

    /**
     * The count of succeed executions.
     */
    public function setSucceed(?int $succeed): self
    {
        $this->initialized['succeed'] = true;
        $this->succeed = $succeed;

        return $this;
    }

    /**
     * The count of in_progress executions.
     */
    public function getInProgress(): ?int
    {
        return $this->inProgress;
    }

    /**
     * The count of in_progress executions.
     */
    public function setInProgress(?int $inProgress): self
    {
        $this->initialized['inProgress'] = true;
        $this->inProgress = $inProgress;

        return $this;
    }

    /**
     * The count of stopped executions.
     */
    public function getStopped(): ?int
    {
        return $this->stopped;
    }

    /**
     * The count of stopped executions.
     */
    public function setStopped(?int $stopped): self
    {
        $this->initialized['stopped'] = true;
        $this->stopped = $stopped;

        return $this;
    }
}
