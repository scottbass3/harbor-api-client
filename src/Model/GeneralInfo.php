<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class GeneralInfo
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The banner message for the UI. It is the stringified result of the banner message object.
     *
     * @var string|null
     */
    protected $bannerMessage;
    /**
     * The current time of the server.
     *
     * @var \DateTimeInterface|null
     */
    protected $currentTime;
    /**
     * The url of registry against which the docker command should be issued.
     *
     * @var string|null
     */
    protected $registryUrl;
    /**
     * The external URL of Harbor, with protocol.
     *
     * @var string|null
     */
    protected $externalUrl;
    /**
     * The auth mode of current Harbor instance.
     *
     * @var string|null
     */
    protected $authMode;
    /**
     * The flag to indicate whether the current auth mode should consider as a primary one.
     *
     * @var bool|null
     */
    protected $primaryAuthMode;
    /**
     * Indicate who can create projects, it could be 'adminonly' or 'everyone'.
     *
     * @var string|null
     */
    protected $projectCreationRestriction;
    /**
     * Indicate whether the Harbor instance enable user to register himself.
     *
     * @var bool|null
     */
    protected $selfRegistration;
    /**
     * Indicate whether there is a ca root cert file ready for download in the file system.
     *
     * @var bool|null
     */
    protected $hasCaRoot;
    /**
     * The build version of Harbor.
     *
     * @var string|null
     */
    protected $harborVersion;
    /**
     * The storage provider's name of Harbor registry.
     *
     * @var string|null
     */
    protected $registryStorageProviderName;
    /**
     * The flag to indicate whether Harbor is in readonly mode.
     *
     * @var bool|null
     */
    protected $readOnly;
    /**
     * The flag to indicate whether notification mechanism is enabled on Harbor instance.
     *
     * @var bool|null
     */
    protected $notificationEnable;
    /**
     * @var AuthproxySetting|null
     */
    protected $authproxySettings;
    /**
     * The OIDC provider name, empty if current auth is not OIDC_auth or OIDC provider is not configured.
     *
     * @var string|null
     */
    protected $oidcProviderName;

    /**
     * The banner message for the UI. It is the stringified result of the banner message object.
     */
    public function getBannerMessage(): ?string
    {
        return $this->bannerMessage;
    }

    /**
     * The banner message for the UI. It is the stringified result of the banner message object.
     */
    public function setBannerMessage(?string $bannerMessage): self
    {
        $this->initialized['bannerMessage'] = true;
        $this->bannerMessage = $bannerMessage;

        return $this;
    }

    /**
     * The current time of the server.
     */
    public function getCurrentTime(): ?\DateTimeInterface
    {
        return $this->currentTime;
    }

    /**
     * The current time of the server.
     */
    public function setCurrentTime(?\DateTimeInterface $currentTime): self
    {
        $this->initialized['currentTime'] = true;
        $this->currentTime = $currentTime;

        return $this;
    }

    /**
     * The url of registry against which the docker command should be issued.
     */
    public function getRegistryUrl(): ?string
    {
        return $this->registryUrl;
    }

    /**
     * The url of registry against which the docker command should be issued.
     */
    public function setRegistryUrl(?string $registryUrl): self
    {
        $this->initialized['registryUrl'] = true;
        $this->registryUrl = $registryUrl;

        return $this;
    }

    /**
     * The external URL of Harbor, with protocol.
     */
    public function getExternalUrl(): ?string
    {
        return $this->externalUrl;
    }

    /**
     * The external URL of Harbor, with protocol.
     */
    public function setExternalUrl(?string $externalUrl): self
    {
        $this->initialized['externalUrl'] = true;
        $this->externalUrl = $externalUrl;

        return $this;
    }

    /**
     * The auth mode of current Harbor instance.
     */
    public function getAuthMode(): ?string
    {
        return $this->authMode;
    }

    /**
     * The auth mode of current Harbor instance.
     */
    public function setAuthMode(?string $authMode): self
    {
        $this->initialized['authMode'] = true;
        $this->authMode = $authMode;

        return $this;
    }

    /**
     * The flag to indicate whether the current auth mode should consider as a primary one.
     */
    public function getPrimaryAuthMode(): ?bool
    {
        return $this->primaryAuthMode;
    }

    /**
     * The flag to indicate whether the current auth mode should consider as a primary one.
     */
    public function setPrimaryAuthMode(?bool $primaryAuthMode): self
    {
        $this->initialized['primaryAuthMode'] = true;
        $this->primaryAuthMode = $primaryAuthMode;

        return $this;
    }

    /**
     * Indicate who can create projects, it could be 'adminonly' or 'everyone'.
     */
    public function getProjectCreationRestriction(): ?string
    {
        return $this->projectCreationRestriction;
    }

    /**
     * Indicate who can create projects, it could be 'adminonly' or 'everyone'.
     */
    public function setProjectCreationRestriction(?string $projectCreationRestriction): self
    {
        $this->initialized['projectCreationRestriction'] = true;
        $this->projectCreationRestriction = $projectCreationRestriction;

        return $this;
    }

    /**
     * Indicate whether the Harbor instance enable user to register himself.
     */
    public function getSelfRegistration(): ?bool
    {
        return $this->selfRegistration;
    }

    /**
     * Indicate whether the Harbor instance enable user to register himself.
     */
    public function setSelfRegistration(?bool $selfRegistration): self
    {
        $this->initialized['selfRegistration'] = true;
        $this->selfRegistration = $selfRegistration;

        return $this;
    }

    /**
     * Indicate whether there is a ca root cert file ready for download in the file system.
     */
    public function getHasCaRoot(): ?bool
    {
        return $this->hasCaRoot;
    }

    /**
     * Indicate whether there is a ca root cert file ready for download in the file system.
     */
    public function setHasCaRoot(?bool $hasCaRoot): self
    {
        $this->initialized['hasCaRoot'] = true;
        $this->hasCaRoot = $hasCaRoot;

        return $this;
    }

    /**
     * The build version of Harbor.
     */
    public function getHarborVersion(): ?string
    {
        return $this->harborVersion;
    }

    /**
     * The build version of Harbor.
     */
    public function setHarborVersion(?string $harborVersion): self
    {
        $this->initialized['harborVersion'] = true;
        $this->harborVersion = $harborVersion;

        return $this;
    }

    /**
     * The storage provider's name of Harbor registry.
     */
    public function getRegistryStorageProviderName(): ?string
    {
        return $this->registryStorageProviderName;
    }

    /**
     * The storage provider's name of Harbor registry.
     */
    public function setRegistryStorageProviderName(?string $registryStorageProviderName): self
    {
        $this->initialized['registryStorageProviderName'] = true;
        $this->registryStorageProviderName = $registryStorageProviderName;

        return $this;
    }

    /**
     * The flag to indicate whether Harbor is in readonly mode.
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * The flag to indicate whether Harbor is in readonly mode.
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * The flag to indicate whether notification mechanism is enabled on Harbor instance.
     */
    public function getNotificationEnable(): ?bool
    {
        return $this->notificationEnable;
    }

    /**
     * The flag to indicate whether notification mechanism is enabled on Harbor instance.
     */
    public function setNotificationEnable(?bool $notificationEnable): self
    {
        $this->initialized['notificationEnable'] = true;
        $this->notificationEnable = $notificationEnable;

        return $this;
    }

    public function getAuthproxySettings(): ?AuthproxySetting
    {
        return $this->authproxySettings;
    }

    public function setAuthproxySettings(?AuthproxySetting $authproxySettings): self
    {
        $this->initialized['authproxySettings'] = true;
        $this->authproxySettings = $authproxySettings;

        return $this;
    }

    /**
     * The OIDC provider name, empty if current auth is not OIDC_auth or OIDC provider is not configured.
     */
    public function getOidcProviderName(): ?string
    {
        return $this->oidcProviderName;
    }

    /**
     * The OIDC provider name, empty if current auth is not OIDC_auth or OIDC provider is not configured.
     */
    public function setOidcProviderName(?string $oidcProviderName): self
    {
        $this->initialized['oidcProviderName'] = true;
        $this->oidcProviderName = $oidcProviderName;

        return $this;
    }
}
