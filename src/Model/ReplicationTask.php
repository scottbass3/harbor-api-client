<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Model;

class ReplicationTask
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The ID of the task.
     *
     * @var int|null
     */
    protected $id;
    /**
     * The ID of the execution that the task belongs to.
     *
     * @var int|null
     */
    protected $executionId;
    /**
     * The status of the task.
     *
     * @var string|null
     */
    protected $status;
    /**
     * The ID of the underlying job that the task related to.
     *
     * @var string|null
     */
    protected $jobId;
    /**
     * The operation of the task.
     *
     * @var string|null
     */
    protected $operation;
    /**
     * The type of the resource that the task operates.
     *
     * @var string|null
     */
    protected $resourceType;
    /**
     * The source resource that the task operates.
     *
     * @var string|null
     */
    protected $srcResource;
    /**
     * The destination resource that the task operates.
     *
     * @var string|null
     */
    protected $dstResource;
    /**
     * The start time of the task.
     *
     * @var \DateTimeInterface|null
     */
    protected $startTime;
    /**
     * The end time of the task.
     *
     * @var \DateTimeInterface|null
     */
    protected $endTime;

    /**
     * The ID of the task.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * The ID of the task.
     */
    public function setId(?int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The ID of the execution that the task belongs to.
     */
    public function getExecutionId(): ?int
    {
        return $this->executionId;
    }

    /**
     * The ID of the execution that the task belongs to.
     */
    public function setExecutionId(?int $executionId): self
    {
        $this->initialized['executionId'] = true;
        $this->executionId = $executionId;

        return $this;
    }

    /**
     * The status of the task.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * The status of the task.
     */
    public function setStatus(?string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }

    /**
     * The ID of the underlying job that the task related to.
     */
    public function getJobId(): ?string
    {
        return $this->jobId;
    }

    /**
     * The ID of the underlying job that the task related to.
     */
    public function setJobId(?string $jobId): self
    {
        $this->initialized['jobId'] = true;
        $this->jobId = $jobId;

        return $this;
    }

    /**
     * The operation of the task.
     */
    public function getOperation(): ?string
    {
        return $this->operation;
    }

    /**
     * The operation of the task.
     */
    public function setOperation(?string $operation): self
    {
        $this->initialized['operation'] = true;
        $this->operation = $operation;

        return $this;
    }

    /**
     * The type of the resource that the task operates.
     */
    public function getResourceType(): ?string
    {
        return $this->resourceType;
    }

    /**
     * The type of the resource that the task operates.
     */
    public function setResourceType(?string $resourceType): self
    {
        $this->initialized['resourceType'] = true;
        $this->resourceType = $resourceType;

        return $this;
    }

    /**
     * The source resource that the task operates.
     */
    public function getSrcResource(): ?string
    {
        return $this->srcResource;
    }

    /**
     * The source resource that the task operates.
     */
    public function setSrcResource(?string $srcResource): self
    {
        $this->initialized['srcResource'] = true;
        $this->srcResource = $srcResource;

        return $this;
    }

    /**
     * The destination resource that the task operates.
     */
    public function getDstResource(): ?string
    {
        return $this->dstResource;
    }

    /**
     * The destination resource that the task operates.
     */
    public function setDstResource(?string $dstResource): self
    {
        $this->initialized['dstResource'] = true;
        $this->dstResource = $dstResource;

        return $this;
    }

    /**
     * The start time of the task.
     */
    public function getStartTime(): ?\DateTimeInterface
    {
        return $this->startTime;
    }

    /**
     * The start time of the task.
     */
    public function setStartTime(?\DateTimeInterface $startTime): self
    {
        $this->initialized['startTime'] = true;
        $this->startTime = $startTime;

        return $this;
    }

    /**
     * The end time of the task.
     */
    public function getEndTime(): ?\DateTimeInterface
    {
        return $this->endTime;
    }

    /**
     * The end time of the task.
     */
    public function setEndTime(?\DateTimeInterface $endTime): self
    {
        $this->initialized['endTime'] = true;
        $this->endTime = $endTime;

        return $this;
    }
}
