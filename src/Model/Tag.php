<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class Tag
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The ID of the tag.
     *
     * @var int|null
     */
    protected $id;
    /**
     * The ID of the repository that the tag belongs to.
     *
     * @var int|null
     */
    protected $repositoryId;
    /**
     * The ID of the artifact that the tag attached to.
     *
     * @var int|null
     */
    protected $artifactId;
    /**
     * The name of the tag.
     *
     * @var string|null
     */
    protected $name;
    /**
     * The push time of the tag.
     *
     * @var \DateTimeInterface|null
     */
    protected $pushTime;
    /**
     * The latest pull time of the tag.
     *
     * @var \DateTimeInterface|null
     */
    protected $pullTime;
    /**
     * The immutable status of the tag.
     *
     * @var bool|null
     */
    protected $immutable;

    /**
     * The ID of the tag.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * The ID of the tag.
     */
    public function setId(?int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The ID of the repository that the tag belongs to.
     */
    public function getRepositoryId(): ?int
    {
        return $this->repositoryId;
    }

    /**
     * The ID of the repository that the tag belongs to.
     */
    public function setRepositoryId(?int $repositoryId): self
    {
        $this->initialized['repositoryId'] = true;
        $this->repositoryId = $repositoryId;

        return $this;
    }

    /**
     * The ID of the artifact that the tag attached to.
     */
    public function getArtifactId(): ?int
    {
        return $this->artifactId;
    }

    /**
     * The ID of the artifact that the tag attached to.
     */
    public function setArtifactId(?int $artifactId): self
    {
        $this->initialized['artifactId'] = true;
        $this->artifactId = $artifactId;

        return $this;
    }

    /**
     * The name of the tag.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * The name of the tag.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * The push time of the tag.
     */
    public function getPushTime(): ?\DateTimeInterface
    {
        return $this->pushTime;
    }

    /**
     * The push time of the tag.
     */
    public function setPushTime(?\DateTimeInterface $pushTime): self
    {
        $this->initialized['pushTime'] = true;
        $this->pushTime = $pushTime;

        return $this;
    }

    /**
     * The latest pull time of the tag.
     */
    public function getPullTime(): ?\DateTimeInterface
    {
        return $this->pullTime;
    }

    /**
     * The latest pull time of the tag.
     */
    public function setPullTime(?\DateTimeInterface $pullTime): self
    {
        $this->initialized['pullTime'] = true;
        $this->pullTime = $pullTime;

        return $this;
    }

    /**
     * The immutable status of the tag.
     */
    public function getImmutable(): ?bool
    {
        return $this->immutable;
    }

    /**
     * The immutable status of the tag.
     */
    public function setImmutable(?bool $immutable): self
    {
        $this->initialized['immutable'] = true;
        $this->immutable = $immutable;

        return $this;
    }
}
