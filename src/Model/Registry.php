<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Scottbass3\Harbor\Api\Model;

class Registry
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The registry ID.
     *
     * @var int|null
     */
    protected $id;
    /**
     * The registry URL string.
     *
     * @var string|null
     */
    protected $url;
    /**
     * The registry name.
     *
     * @var string|null
     */
    protected $name;
    /**
     * @var RegistryCredential|null
     */
    protected $credential;
    /**
     * Type of the registry, e.g. 'harbor'.
     *
     * @var string|null
     */
    protected $type;
    /**
     * Whether or not the certificate will be verified when Harbor tries to access the server.
     *
     * @var bool|null
     */
    protected $insecure;
    /**
     * Description of the registry.
     *
     * @var string|null
     */
    protected $description;
    /**
     * Health status of the registry.
     *
     * @var string|null
     */
    protected $status;
    /**
     * The create time of the policy.
     *
     * @var \DateTimeInterface|null
     */
    protected $creationTime;
    /**
     * The update time of the policy.
     *
     * @var \DateTimeInterface|null
     */
    protected $updateTime;

    /**
     * The registry ID.
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * The registry ID.
     */
    public function setId(?int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The registry URL string.
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
     * The registry URL string.
     */
    public function setUrl(?string $url): self
    {
        $this->initialized['url'] = true;
        $this->url = $url;

        return $this;
    }

    /**
     * The registry name.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * The registry name.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    public function getCredential(): ?RegistryCredential
    {
        return $this->credential;
    }

    public function setCredential(?RegistryCredential $credential): self
    {
        $this->initialized['credential'] = true;
        $this->credential = $credential;

        return $this;
    }

    /**
     * Type of the registry, e.g. 'harbor'.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Type of the registry, e.g. 'harbor'.
     */
    public function setType(?string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * Whether or not the certificate will be verified when Harbor tries to access the server.
     */
    public function getInsecure(): ?bool
    {
        return $this->insecure;
    }

    /**
     * Whether or not the certificate will be verified when Harbor tries to access the server.
     */
    public function setInsecure(?bool $insecure): self
    {
        $this->initialized['insecure'] = true;
        $this->insecure = $insecure;

        return $this;
    }

    /**
     * Description of the registry.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Description of the registry.
     */
    public function setDescription(?string $description): self
    {
        $this->initialized['description'] = true;
        $this->description = $description;

        return $this;
    }

    /**
     * Health status of the registry.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Health status of the registry.
     */
    public function setStatus(?string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }

    /**
     * The create time of the policy.
     */
    public function getCreationTime(): ?\DateTimeInterface
    {
        return $this->creationTime;
    }

    /**
     * The create time of the policy.
     */
    public function setCreationTime(?\DateTimeInterface $creationTime): self
    {
        $this->initialized['creationTime'] = true;
        $this->creationTime = $creationTime;

        return $this;
    }

    /**
     * The update time of the policy.
     */
    public function getUpdateTime(): ?\DateTimeInterface
    {
        return $this->updateTime;
    }

    /**
     * The update time of the policy.
     */
    public function setUpdateTime(?\DateTimeInterface $updateTime): self
    {
        $this->initialized['updateTime'] = true;
        $this->updateTime = $updateTime;

        return $this;
    }
}
